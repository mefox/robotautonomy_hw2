/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2013-02-24 15:40:35.200961
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63;
x0=IKsin(j[1]);
x1=IKcos(j[2]);
x2=IKcos(j[3]);
x3=IKcos(j[1]);
x4=IKsin(j[3]);
x5=IKsin(j[4]);
x6=IKcos(j[4]);
x7=IKsin(j[2]);
x8=IKsin(j[6]);
x9=IKcos(j[5]);
x10=IKsin(j[5]);
x11=IKcos(j[6]);
x12=IKsin(j[0]);
x13=IKcos(j[0]);
x14=((IkReal(1.00000000000000))*(x2));
x15=((IkReal(1.00000000000000))*(x3));
x16=((IkReal(1.00000000000000))*(x10));
x17=((IkReal(0.300000000000000))*(x2));
x18=((IkReal(0.0450000000000000))*(x3));
x19=((IkReal(1.00000000000000))*(x9));
x20=((IkReal(0.0450000000000000))*(x4));
x21=((x0)*(x7));
x22=((x0)*(x12));
x23=((x13)*(x7));
x24=((x12)*(x7));
x25=((x0)*(x13));
x26=((x1)*(x13));
x27=((x0)*(x1));
x28=((x14)*(x3));
x29=((IkReal(0.0450000000000000))*(x23));
x30=((IkReal(1.00000000000000))*(x24));
x31=((IkReal(0.0450000000000000))*(x24));
x32=((IkReal(1.00000000000000))*(x0)*(x4));
x33=((x1)*(x12)*(x3));
x34=((IkReal(1.00000000000000))*(x22)*(x4));
x35=((x1)*(x12)*(x18));
x36=((IkReal(1.00000000000000))*(x25)*(x4));
x37=((x14)*(x25));
x38=((x18)*(x26));
x39=((((IkReal(-1.00000000000000))*(x28)))+(((x27)*(x4))));
x40=((((IkReal(-1.00000000000000))*(x15)*(x24)))+(x26));
x41=((x23)+(x33));
x42=((((x26)*(x3)))+(((IkReal(-1.00000000000000))*(x30))));
x43=((x30)+(((IkReal(-1.00000000000000))*(x15)*(x26))));
x44=((((x14)*(x27)))+(((x15)*(x4))));
x45=((((IkReal(-1.00000000000000))*(x15)*(x23)))+(((IkReal(-1.00000000000000))*(x1)*(x12))));
x46=((x2)*(x42));
x47=((x29)+(x35));
x48=((x10)*(x39));
x49=((x40)*(x5));
x50=((x4)*(x43));
x51=((x45)*(x5));
x52=((x45)*(x6));
x53=((((IkReal(-1.00000000000000))*(x34)))+(((x2)*(x41))));
x54=((x50)+(((IkReal(-1.00000000000000))*(x37))));
x55=((((IkReal(-1.00000000000000))*(x44)*(x6)))+(((x21)*(x5))));
x56=((((x44)*(x5)))+(((x21)*(x6))));
x57=((((IkReal(-1.00000000000000))*(x14)*(x22)))+(((x4)*(((((IkReal(-1.00000000000000))*(x23)))+(((IkReal(-1.00000000000000))*(x1)*(x12)*(x15))))))));
x58=((x53)*(x6));
x59=((x10)*(x57));
x60=((x58)+(x49));
x61=((x51)+(((x6)*(((x46)+(((IkReal(-1.00000000000000))*(x36))))))));
x62=((x60)*(x9));
x63=((((x5)*(((((IkReal(1.00000000000000))*(x14)*(x41)))+(((IkReal(-1.00000000000000))*(x34)))))))+(((IkReal(-1.00000000000000))*(x40)*(x6))));
eerot[0]=((((x11)*(((((x55)*(x9)))+(x48)))))+(((x56)*(x8))));
eerot[1]=((((x8)*(((((IkReal(-1.00000000000000))*(x19)*(x55)))+(((IkReal(-1.00000000000000))*(x16)*(x39)))))))+(((x11)*(x56))));
eerot[2]=((((x9)*(((((IkReal(-1.00000000000000))*(x27)*(x4)))+(x28)))))+(((x10)*(x55))));
IkReal x64=((IkReal(0.0450000000000000))*(x27));
eetrans[0]=((IkReal(0.0790000000000000))+(((x17)*(x3)))+(((IkReal(-1.00000000000000))*(x64)))+(((x18)*(x4)))+(((x2)*(x64)))+(((IkReal(0.550000000000000))*(x3)))+(((IkReal(-0.300000000000000))*(x27)*(x4))));
eerot[3]=((((x11)*(((((IkReal(-1.00000000000000))*(x19)*(x60)))+(((IkReal(-1.00000000000000))*(x16)*(x57)))))))+(((x63)*(x8))));
eerot[4]=((((x11)*(x63)))+(((x8)*(((x59)+(x62))))));
eerot[5]=((((x10)*(((((IkReal(-1.00000000000000))*(x49)))+(((IkReal(-1.00000000000000))*(x58)))))))+(((x57)*(x9))));
IkReal x65=((IkReal(1.00000000000000))*(x22));
eetrans[1]=((IkReal(-0.191000000000000))+(((IkReal(-1.00000000000000))*(x47)))+(((IkReal(-1.00000000000000))*(x20)*(x65)))+(((IkReal(-0.550000000000000))*(x22)))+(((IkReal(-1.00000000000000))*(x17)*(x65)))+(((x4)*(((((IkReal(-0.300000000000000))*(x33)))+(((IkReal(-0.300000000000000))*(x23)))))))+(((x2)*(x47))));
eerot[6]=((((x8)*(((x52)+(((x5)*(((((IkReal(-1.00000000000000))*(x14)*(x42)))+(x36)))))))))+(((x11)*(((((x9)*(((x51)+(((x6)*(((x46)+(((IkReal(-1.00000000000000))*(x25)*(x4)))))))))))+(((x10)*(x54))))))));
eerot[7]=((((x8)*(((((IkReal(-1.00000000000000))*(x16)*(x54)))+(((IkReal(-1.00000000000000))*(x19)*(x61)))))))+(((x11)*(((x52)+(((x5)*(((x36)+(((IkReal(-1.00000000000000))*(x46))))))))))));
eerot[8]=((((x10)*(x61)))+(((x9)*(((((IkReal(-1.00000000000000))*(x50)))+(x37))))));
eetrans[2]=((IkReal(0.905000000000000))+(((x2)*(((x31)+(((IkReal(-1.00000000000000))*(x38)))))))+(((x17)*(x25)))+(((IkReal(-1.00000000000000))*(x31)))+(x38)+(((IkReal(0.550000000000000))*(x25)))+(((x20)*(x25)))+(((x4)*(((((IkReal(-0.300000000000000))*(x24)))+(((IkReal(0.300000000000000))*(x26)*(x3))))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,j6,cj6,sj6,htj6,j2,cj2,sj2,htj2,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij2[2], _nj2;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij2[0] = -1; _ij2[1] = -1; _nj2 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r20;
new_r01=r21;
new_r02=r22;
new_px=((IkReal(-0.905000000000000))+(pz));
new_r10=((IkReal(-1.00000000000000))*(r10));
new_r11=((IkReal(-1.00000000000000))*(r11));
new_r12=((IkReal(-1.00000000000000))*(r12));
new_py=((IkReal(-0.191000000000000))+(((IkReal(-1.00000000000000))*(py))));
new_r20=r00;
new_r21=r01;
new_r22=r02;
new_pz=((IkReal(-0.0790000000000000))+(px));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((pz)*(pz))+((py)*(py)));
npx=((((py)*(r10)))+(((pz)*(r20)))+(((px)*(r00))));
npy=((((px)*(r01)))+(((pz)*(r21)))+(((py)*(r11))));
npz=((((py)*(r12)))+(((pz)*(r22)))+(((px)*(r02))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((py)*(r00)))+(((IkReal(-1.00000000000000))*(px)*(r10))));
rxp1_0=((((pz)*(r11)))+(((IkReal(-1.00000000000000))*(py)*(r21))));
rxp1_1=((((IkReal(-1.00000000000000))*(pz)*(r01)))+(((px)*(r21))));
rxp1_2=((((py)*(r01)))+(((IkReal(-1.00000000000000))*(px)*(r11))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((py)*(r02)))+(((IkReal(-1.00000000000000))*(px)*(r12))));
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
if( (((IkReal(-1.18441410190393))+(((IkReal(2.98679637348110))*(pp))))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(-1.18441410190393))+(((IkReal(2.98679637348110))*(pp))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x66=IKasin(((IkReal(-1.18441410190393))+(((IkReal(2.98679637348110))*(pp)))));
j3array[0]=((IkReal(-1.34027003705633))+(((IkReal(1.00000000000000))*(x66))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((IkReal(1.80132261653346))+(((IkReal(-1.00000000000000))*(x66))));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x67=(cj2)*(cj2);
IkReal x68=(cj3)*(cj3);
IkReal x69=(sj3)*(sj3);
IkReal x70=((IkReal(13.3333333333333))*(sj3));
IkReal x71=((cj3)*(x67));
dummyeval[0]=((IkReal(149.382716049383))+(((IkReal(24.4444444444444))*(sj3)))+(((IkReal(44.4444444444444))*(x68)))+(x67)+(x69)+(((IkReal(44.4444444444444))*(x67)*(x69)))+(((IkReal(-1.00000000000000))*(x70)*(x71)))+(((x67)*(x68)))+(((IkReal(162.962962962963))*(cj3)))+(((cj3)*(x70)))+(((IkReal(-2.00000000000000))*(x71)))+(((x67)*(x70))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x72=((IkReal(0.0450000000000000))*(cj2));
IkReal x73=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
IkReal x74=((((IkReal(0.300000000000000))*(cj2)*(sj3)))+(x72)+(((IkReal(-1.00000000000000))*(cj3)*(x72))));
if( IKabs(x73) < IKFAST_ATAN2_MAGTHRESH && IKabs(x74) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x75=((IkReal(1.00000000000000))*(IKatan2(x73, x74)));
if( ((((x73)*(x73))+((x74)*(x74)))) < (IkReal)-0.00001 )
    continue;
if( (((pz)*(((IKabs(IKabs(IKsqrt((((x73)*(x73))+((x74)*(x74)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x73)*(x73))+((x74)*(x74))))))):(IkReal)1.0e30)))) < -1-IKFAST_SINCOS_THRESH || (((pz)*(((IKabs(IKabs(IKsqrt((((x73)*(x73))+((x74)*(x74)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x73)*(x73))+((x74)*(x74))))))):(IkReal)1.0e30)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x76=IKasin(((pz)*(((IKabs(IKabs(IKsqrt((((x73)*(x73))+((x74)*(x74)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x73)*(x73))+((x74)*(x74))))))):(IkReal)1.0e30))));
j1array[0]=((((IkReal(-1.00000000000000))*(x76)))+(((IkReal(-1.00000000000000))*(x75))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x75)))+(x76));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(((((sj1)*((py)*(py))))+(((sj1)*((px)*(px))))));
dummyeval[0]=((((sj1)*((py)*(py))))+(((sj1)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
IkReal x77=((IkReal(1.00000000000000))*(cj2)*(sj1));
gconst1=IKsign(((((IkReal(-1.00000000000000))*(x77)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x77)*((py)*(py))))));
IkReal x78=((IkReal(1.00000000000000))*(cj2)*(sj1));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x78)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x78)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((((IkReal(-0.550000000000000))*(cj1)))+(((IkReal(-0.300000000000000))*(cj1)*(cj3)))+(pz)+(((IkReal(-0.0450000000000000))*(cj1)*(sj3))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(((((cj1)*((py)*(py))))+(((cj1)*((px)*(px))))));
dummyeval[0]=((((cj1)*((py)*(py))))+(((cj1)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((((sj1)*((py)*(py))))+(((sj1)*((px)*(px))))));
dummyeval[0]=((((sj1)*((py)*(py))))+(((sj1)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x79=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x79;
evalcond[3]=x79;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((((IkReal(9.00000000000000))*((px)*(px))))+(((IkReal(9.00000000000000))*((py)*(py))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x80=((IkReal(110.000000000000))*(pz));
IkReal x81=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst5)*(((((IkReal(-1.00000000000000))*(px)*(x81)))+(((px)*(x80)))+(((IkReal(-21.2500000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((((py)*(x81)))+(((IkReal(-1.00000000000000))*(py)*(x80)))+(((IkReal(21.2500000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst5)*(((((IkReal(-1.00000000000000))*(px)*(x81)))+(((px)*(x80)))+(((IkReal(-21.2500000000000))*(px)))))), ((gconst5)*(((((py)*(x81)))+(((IkReal(-1.00000000000000))*(py)*(x80)))+(((IkReal(21.2500000000000))*(py)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x82=IKsin(j0);
IkReal x83=IKcos(j0);
IkReal x84=((px)*(x82));
IkReal x85=((py)*(x83));
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-0.0450000000000000))*(cj3)))+(x84)+(((IkReal(-1.00000000000000))*(x85))));
evalcond[1]=((((px)*(x83)))+(((py)*(x82))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x85)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(x84))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x248=((IkReal(0.0450000000000000))*(py));
IkReal x249=((IkReal(0.300000000000000))*(sj3));
IkReal x250=((IkReal(0.0450000000000000))*(px));
if( IKabs(((gconst4)*(((((IkReal(-1.00000000000000))*(cj3)*(x250)))+(x250)+(((px)*(x249))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((((IkReal(-1.00000000000000))*(py)*(x249)))+(((IkReal(-1.00000000000000))*(x248)))+(((cj3)*(x248))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst4)*(((((IkReal(-1.00000000000000))*(cj3)*(x250)))+(x250)+(((px)*(x249)))))), ((gconst4)*(((((IkReal(-1.00000000000000))*(py)*(x249)))+(((IkReal(-1.00000000000000))*(x248)))+(((cj3)*(x248)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x251=IKsin(j0);
IkReal x252=IKcos(j0);
IkReal x253=((px)*(x251));
IkReal x254=((py)*(x252));
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x254)))+(((IkReal(-0.0450000000000000))*(cj3)))+(x253));
evalcond[1]=((((py)*(x251)))+(((px)*(x252))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(x254)))+(((IkReal(-0.0900000000000000))*(x253))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x255=((IkReal(0.0450000000000000))*(sj3));
IkReal x256=((IkReal(0.300000000000000))*(cj3));
IkReal x257=((x255)+(x256));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x257))));
evalcond[3]=((IkReal(0.550000000000000))+(x257)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign(((((IkReal(9.00000000000000))*((px)*(px))))+(((IkReal(9.00000000000000))*((py)*(py))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x258=((IkReal(110.000000000000))*(pz));
IkReal x259=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst7)*(((((IkReal(-1.00000000000000))*(px)*(x258)))+(((IkReal(-1.00000000000000))*(px)*(x259)))+(((IkReal(-21.2500000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(((((IkReal(21.2500000000000))*(py)))+(((py)*(x258)))+(((py)*(x259))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst7)*(((((IkReal(-1.00000000000000))*(px)*(x258)))+(((IkReal(-1.00000000000000))*(px)*(x259)))+(((IkReal(-21.2500000000000))*(px)))))), ((gconst7)*(((((IkReal(21.2500000000000))*(py)))+(((py)*(x258)))+(((py)*(x259)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x260=IKcos(j0);
IkReal x261=IKsin(j0);
IkReal x262=((px)*(x261));
IkReal x263=((IkReal(1.00000000000000))*(x260));
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-0.0450000000000000))*(cj3)))+(x262)+(((IkReal(-1.00000000000000))*(py)*(x263))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x263)))+(((IkReal(-1.00000000000000))*(py)*(x261))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(py)*(x260)))+(((IkReal(-0.0900000000000000))*(x262))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x264=((IkReal(0.0450000000000000))*(py));
IkReal x265=((IkReal(0.300000000000000))*(sj3));
IkReal x266=((IkReal(0.0450000000000000))*(px));
if( IKabs(((gconst6)*(((((IkReal(-1.00000000000000))*(cj3)*(x266)))+(((px)*(x265)))+(x266))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((((cj3)*(x264)))+(((IkReal(-1.00000000000000))*(x264)))+(((IkReal(-1.00000000000000))*(py)*(x265))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst6)*(((((IkReal(-1.00000000000000))*(cj3)*(x266)))+(((px)*(x265)))+(x266)))), ((gconst6)*(((((cj3)*(x264)))+(((IkReal(-1.00000000000000))*(x264)))+(((IkReal(-1.00000000000000))*(py)*(x265)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x267=IKcos(j0);
IkReal x268=IKsin(j0);
IkReal x269=((px)*(x268));
IkReal x270=((IkReal(1.00000000000000))*(x267));
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(x270)))+(((IkReal(-0.0450000000000000))*(cj3)))+(x269));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x268)))+(((IkReal(-1.00000000000000))*(px)*(x270))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x269)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(py)*(x267))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-1.00000000000000))*(pz));
evalcond[3]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign(((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst9;
gconst9=IKsign(((((IkReal(0.0900000000000000))*((px)*(px))))+(((IkReal(0.0900000000000000))*((py)*(py))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x271=((IkReal(0.0270000000000000))*(cj3));
IkReal x272=((px)*(sj3));
IkReal x273=((py)*(sj3));
IkReal x274=((IkReal(0.330000000000000))*(cj3));
if( IKabs(((gconst9)*(((((IkReal(0.0495000000000000))*(py)))+(((IkReal(0.392500000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp)*(px)))+(((px)*(x274)))+(((py)*(x271)))+(((IkReal(0.0495000000000000))*(x272)))+(((IkReal(0.00405000000000000))*(x273))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst9)*(((((IkReal(-0.392500000000000))*(py)))+(((IkReal(-0.0495000000000000))*(x273)))+(((pp)*(py)))+(((px)*(x271)))+(((IkReal(0.00405000000000000))*(x272)))+(((IkReal(-1.00000000000000))*(py)*(x274)))+(((IkReal(0.0495000000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst9)*(((((IkReal(0.0495000000000000))*(py)))+(((IkReal(0.392500000000000))*(px)))+(((IkReal(-1.00000000000000))*(pp)*(px)))+(((px)*(x274)))+(((py)*(x271)))+(((IkReal(0.0495000000000000))*(x272)))+(((IkReal(0.00405000000000000))*(x273)))))), ((gconst9)*(((((IkReal(-0.392500000000000))*(py)))+(((IkReal(-0.0495000000000000))*(x273)))+(((pp)*(py)))+(((px)*(x271)))+(((IkReal(0.00405000000000000))*(x272)))+(((IkReal(-1.00000000000000))*(py)*(x274)))+(((IkReal(0.0495000000000000))*(px)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x275=IKsin(j0);
IkReal x276=IKcos(j0);
IkReal x277=((px)*(x275));
IkReal x278=((py)*(x276));
IkReal x279=((px)*(x276));
IkReal x280=((py)*(x275));
evalcond[0]=((IkReal(-0.550000000000000))+(x280)+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(x279));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x278)))+(x277));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x278)))+(((IkReal(-0.0900000000000000))*(x277)))+(((IkReal(1.10000000000000))*(x280)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x279))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x281=((px)*(sj3));
IkReal x282=((cj3)*(py));
IkReal x283=((py)*(sj3));
IkReal x284=((cj3)*(px));
if( IKabs(((gconst8)*(((((IkReal(0.0450000000000000))*(px)))+(((IkReal(-0.0450000000000000))*(x283)))+(((IkReal(0.300000000000000))*(x281)))+(((IkReal(-0.550000000000000))*(py)))+(((IkReal(-0.0450000000000000))*(x284)))+(((IkReal(-0.300000000000000))*(x282))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst8)*(((((IkReal(0.0450000000000000))*(x282)))+(((IkReal(-0.0450000000000000))*(py)))+(((IkReal(-0.550000000000000))*(px)))+(((IkReal(-0.300000000000000))*(x284)))+(((IkReal(-0.0450000000000000))*(x281)))+(((IkReal(-0.300000000000000))*(x283))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst8)*(((((IkReal(0.0450000000000000))*(px)))+(((IkReal(-0.0450000000000000))*(x283)))+(((IkReal(0.300000000000000))*(x281)))+(((IkReal(-0.550000000000000))*(py)))+(((IkReal(-0.0450000000000000))*(x284)))+(((IkReal(-0.300000000000000))*(x282)))))), ((gconst8)*(((((IkReal(0.0450000000000000))*(x282)))+(((IkReal(-0.0450000000000000))*(py)))+(((IkReal(-0.550000000000000))*(px)))+(((IkReal(-0.300000000000000))*(x284)))+(((IkReal(-0.0450000000000000))*(x281)))+(((IkReal(-0.300000000000000))*(x283)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x285=IKsin(j0);
IkReal x286=IKcos(j0);
IkReal x287=((px)*(x285));
IkReal x288=((py)*(x286));
IkReal x289=((px)*(x286));
IkReal x290=((py)*(x285));
evalcond[0]=((IkReal(-0.550000000000000))+(x289)+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(x290));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(0.300000000000000))*(sj3)))+(x287)+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x288))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x287)))+(((IkReal(1.10000000000000))*(x290)))+(((IkReal(0.0900000000000000))*(x288)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x289))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=pz;
evalcond[3]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst11;
gconst11=IKsign(((((IkReal(1.10000000000000))*((py)*(py))))+(((IkReal(1.10000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x291=((IkReal(0.0495000000000000))*(px));
IkReal x292=((px)*(sj3));
IkReal x293=((IkReal(1.00000000000000))*(pp));
IkReal x294=((IkReal(0.0495000000000000))*(py));
IkReal x295=((IkReal(0.00405000000000000))*(cj3));
IkReal x296=((py)*(sj3));
if( IKabs(((gconst11)*(((((cj3)*(x291)))+(((IkReal(-1.00000000000000))*(py)*(x293)))+(((IkReal(-1.00000000000000))*(x291)))+(((IkReal(-0.208450000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x295)))+(((IkReal(-0.330000000000000))*(x292)))+(((IkReal(0.0270000000000000))*(x296))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst11)*(((((IkReal(0.330000000000000))*(x296)))+(((IkReal(0.0270000000000000))*(x292)))+(((IkReal(-1.00000000000000))*(px)*(x293)))+(((IkReal(-1.00000000000000))*(cj3)*(x294)))+(((IkReal(-0.208450000000000))*(px)))+(x294)+(((IkReal(-1.00000000000000))*(px)*(x295))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst11)*(((((cj3)*(x291)))+(((IkReal(-1.00000000000000))*(py)*(x293)))+(((IkReal(-1.00000000000000))*(x291)))+(((IkReal(-0.208450000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x295)))+(((IkReal(-0.330000000000000))*(x292)))+(((IkReal(0.0270000000000000))*(x296)))))), ((gconst11)*(((((IkReal(0.330000000000000))*(x296)))+(((IkReal(0.0270000000000000))*(x292)))+(((IkReal(-1.00000000000000))*(px)*(x293)))+(((IkReal(-1.00000000000000))*(cj3)*(x294)))+(((IkReal(-0.208450000000000))*(px)))+(x294)+(((IkReal(-1.00000000000000))*(px)*(x295)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x297=IKsin(j0);
IkReal x298=IKcos(j0);
IkReal x299=((px)*(x297));
IkReal x300=((IkReal(1.00000000000000))*(x298));
IkReal x301=((py)*(x297));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x301)))+(((IkReal(-1.00000000000000))*(px)*(x300))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(x300)))+(((IkReal(-0.0450000000000000))*(cj3)))+(x299));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.10000000000000))*(x301)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(py)*(x298)))+(((IkReal(-1.10000000000000))*(px)*(x298)))+(((IkReal(-0.0900000000000000))*(x299))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x302=((IkReal(0.0450000000000000))*(px));
IkReal x303=((cj3)*(py));
IkReal x304=((IkReal(0.300000000000000))*(sj3));
IkReal x305=((IkReal(0.0450000000000000))*(py));
if( IKabs(((gconst10)*(((((IkReal(-1.00000000000000))*(x302)))+(((cj3)*(x302)))+(((IkReal(-1.00000000000000))*(px)*(x304)))+(((IkReal(-0.550000000000000))*(py)))+(((IkReal(-0.300000000000000))*(x303)))+(((IkReal(-1.00000000000000))*(sj3)*(x305))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst10)*(((x305)+(((IkReal(-0.550000000000000))*(px)))+(((IkReal(-0.300000000000000))*(cj3)*(px)))+(((py)*(x304)))+(((IkReal(-0.0450000000000000))*(x303)))+(((IkReal(-1.00000000000000))*(sj3)*(x302))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst10)*(((((IkReal(-1.00000000000000))*(x302)))+(((cj3)*(x302)))+(((IkReal(-1.00000000000000))*(px)*(x304)))+(((IkReal(-0.550000000000000))*(py)))+(((IkReal(-0.300000000000000))*(x303)))+(((IkReal(-1.00000000000000))*(sj3)*(x305)))))), ((gconst10)*(((x305)+(((IkReal(-0.550000000000000))*(px)))+(((IkReal(-0.300000000000000))*(cj3)*(px)))+(((py)*(x304)))+(((IkReal(-0.0450000000000000))*(x303)))+(((IkReal(-1.00000000000000))*(sj3)*(x302)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x306=IKsin(j0);
IkReal x307=IKcos(j0);
IkReal x308=((px)*(x306));
IkReal x309=((IkReal(1.00000000000000))*(x307));
IkReal x310=((py)*(x306));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x310)))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(px)*(x309))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-0.0450000000000000))*(cj3)))+(x308)+(((IkReal(-1.00000000000000))*(py)*(x309))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(py)*(x307)))+(((IkReal(-1.10000000000000))*(px)*(x307)))+(((IkReal(-0.0900000000000000))*(x308)))+(((IkReal(-1.10000000000000))*(x310)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x311=((px)*(sj3));
IkReal x312=((cj3)*(py));
IkReal x313=((IkReal(0.0450000000000000))*(sj1));
IkReal x314=((IkReal(0.300000000000000))*(sj1));
IkReal x315=((py)*(sj3));
IkReal x316=((cj3)*(px));
IkReal x317=((IkReal(1.00000000000000))*(cj1)*(pz));
if( IKabs(((gconst3)*(((((IkReal(0.550000000000000))*(py)))+(((IkReal(-1.00000000000000))*(x311)*(x314)))+(((x313)*(x316)))+(((IkReal(-1.00000000000000))*(py)*(x317)))+(((IkReal(0.300000000000000))*(x312)))+(((IkReal(0.0450000000000000))*(x315)))+(((IkReal(-1.00000000000000))*(px)*(x313))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((x314)*(x315)))+(((IkReal(0.550000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x317)))+(((IkReal(0.0450000000000000))*(x311)))+(((IkReal(0.300000000000000))*(x316)))+(((IkReal(-1.00000000000000))*(x312)*(x313)))+(((py)*(x313))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst3)*(((((IkReal(0.550000000000000))*(py)))+(((IkReal(-1.00000000000000))*(x311)*(x314)))+(((x313)*(x316)))+(((IkReal(-1.00000000000000))*(py)*(x317)))+(((IkReal(0.300000000000000))*(x312)))+(((IkReal(0.0450000000000000))*(x315)))+(((IkReal(-1.00000000000000))*(px)*(x313)))))), ((gconst3)*(((((x314)*(x315)))+(((IkReal(0.550000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x317)))+(((IkReal(0.0450000000000000))*(x311)))+(((IkReal(0.300000000000000))*(x316)))+(((IkReal(-1.00000000000000))*(x312)*(x313)))+(((py)*(x313)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x318=IKsin(j0);
IkReal x319=IKcos(j0);
IkReal x320=((IkReal(0.300000000000000))*(cj3));
IkReal x321=((IkReal(1.10000000000000))*(sj1));
IkReal x322=((IkReal(0.0450000000000000))*(sj3));
IkReal x323=((cj1)*(pz));
IkReal x324=((px)*(x318));
IkReal x325=((px)*(x319));
IkReal x326=((py)*(x319));
IkReal x327=((py)*(x318));
evalcond[0]=((IkReal(-0.550000000000000))+(((sj1)*(x327)))+(x323)+(((IkReal(-1.00000000000000))*(x320)))+(((sj1)*(x325)))+(((IkReal(-1.00000000000000))*(x322))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x326)))+(x324));
evalcond[2]=((((cj1)*(x325)))+(((cj1)*(x327)))+(((IkReal(-1.00000000000000))*(pz)*(sj1))));
evalcond[3]=((((sj1)*(x320)))+(((IkReal(-1.00000000000000))*(x327)))+(((IkReal(0.550000000000000))*(sj1)))+(((sj1)*(x322)))+(((IkReal(-1.00000000000000))*(x325))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x324)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x326)))+(((IkReal(1.10000000000000))*(x323)))+(((x321)*(x327)))+(((x321)*(x325))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x328=((cj1)*(py));
IkReal x329=((IkReal(0.300000000000000))*(sj3));
IkReal x330=((pz)*(sj1));
IkReal x331=((IkReal(0.0450000000000000))*(cj1)*(px));
if( IKabs(((gconst2)*(((((IkReal(-1.00000000000000))*(cj1)*(px)*(x329)))+(((cj3)*(x331)))+(((IkReal(-1.00000000000000))*(x331)))+(((py)*(x330))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((x328)*(x329)))+(((px)*(x330)))+(((IkReal(-0.0450000000000000))*(cj3)*(x328)))+(((IkReal(0.0450000000000000))*(x328))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst2)*(((((IkReal(-1.00000000000000))*(cj1)*(px)*(x329)))+(((cj3)*(x331)))+(((IkReal(-1.00000000000000))*(x331)))+(((py)*(x330)))))), ((gconst2)*(((((x328)*(x329)))+(((px)*(x330)))+(((IkReal(-0.0450000000000000))*(cj3)*(x328)))+(((IkReal(0.0450000000000000))*(x328)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x332=IKsin(j0);
IkReal x333=IKcos(j0);
IkReal x334=((IkReal(0.300000000000000))*(cj3));
IkReal x335=((IkReal(1.10000000000000))*(sj1));
IkReal x336=((IkReal(0.0450000000000000))*(sj3));
IkReal x337=((cj1)*(pz));
IkReal x338=((px)*(x332));
IkReal x339=((px)*(x333));
IkReal x340=((py)*(x333));
IkReal x341=((py)*(x332));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x334)))+(((sj1)*(x339)))+(((sj1)*(x341)))+(x337)+(((IkReal(-1.00000000000000))*(x336))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x340)))+(((IkReal(-0.0450000000000000))*(cj3)))+(x338));
evalcond[2]=((((cj1)*(x341)))+(((cj1)*(x339)))+(((IkReal(-1.00000000000000))*(pz)*(sj1))));
evalcond[3]=((((sj1)*(x334)))+(((IkReal(0.550000000000000))*(sj1)))+(((IkReal(-1.00000000000000))*(x341)))+(((IkReal(-1.00000000000000))*(x339)))+(((sj1)*(x336))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x340)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x338)))+(((x335)*(x339)))+(((x335)*(x341)))+(((IkReal(1.10000000000000))*(x337))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((((IkReal(-0.550000000000000))*(cj1)))+(((IkReal(-0.300000000000000))*(cj1)*(cj3)))+(pz)+(((IkReal(-0.0450000000000000))*(cj1)*(sj3))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign(((((cj1)*((py)*(py))))+(((cj1)*((px)*(px))))));
dummyeval[0]=((((cj1)*((py)*(py))))+(((cj1)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst13;
gconst13=IKsign(((((sj1)*((py)*(py))))+(((sj1)*((px)*(px))))));
dummyeval[0]=((((sj1)*((py)*(py))))+(((sj1)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x342=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x342;
evalcond[3]=x342;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign(((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst15;
gconst15=IKsign(((((IkReal(-9.00000000000000))*((px)*(px))))+(((IkReal(-9.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x343=((IkReal(110.000000000000))*(pz));
IkReal x344=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst15)*(((((px)*(x343)))+(((IkReal(-1.00000000000000))*(px)*(x344)))+(((IkReal(-21.2500000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst15)*(((((py)*(x344)))+(((IkReal(21.2500000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x343))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst15)*(((((px)*(x343)))+(((IkReal(-1.00000000000000))*(px)*(x344)))+(((IkReal(-21.2500000000000))*(px)))))), ((gconst15)*(((((py)*(x344)))+(((IkReal(21.2500000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x343)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x345=IKcos(j0);
IkReal x346=IKsin(j0);
IkReal x347=((px)*(x346));
IkReal x348=((IkReal(1.00000000000000))*(x345));
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(x348)))+(x347));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x346)))+(((IkReal(-1.00000000000000))*(px)*(x348))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(py)*(x345)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(x347))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x349=((IkReal(0.0450000000000000))*(py));
IkReal x350=((IkReal(0.300000000000000))*(sj3));
IkReal x351=((IkReal(0.0450000000000000))*(px));
if( IKabs(((gconst14)*(((((IkReal(-1.00000000000000))*(x351)))+(((IkReal(-1.00000000000000))*(px)*(x350)))+(((cj3)*(x351))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((((py)*(x350)))+(((IkReal(-1.00000000000000))*(cj3)*(x349)))+(x349))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst14)*(((((IkReal(-1.00000000000000))*(x351)))+(((IkReal(-1.00000000000000))*(px)*(x350)))+(((cj3)*(x351)))))), ((gconst14)*(((((py)*(x350)))+(((IkReal(-1.00000000000000))*(cj3)*(x349)))+(x349)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x352=IKcos(j0);
IkReal x353=IKsin(j0);
IkReal x354=((px)*(x353));
IkReal x355=((IkReal(1.00000000000000))*(x352));
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(0.0450000000000000))*(cj3)))+(x354)+(((IkReal(-1.00000000000000))*(py)*(x355))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x353)))+(((IkReal(-1.00000000000000))*(px)*(x355))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(x352)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x354)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x356=((IkReal(0.0450000000000000))*(sj3));
IkReal x357=((IkReal(0.300000000000000))*(cj3));
IkReal x358=((x357)+(x356));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x358))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x358));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst16;
gconst16=IKsign(((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst17;
gconst17=IKsign(((((IkReal(-9.00000000000000))*((px)*(px))))+(((IkReal(-9.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x359=((IkReal(110.000000000000))*(pz));
IkReal x360=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst17)*(((((IkReal(-1.00000000000000))*(px)*(x360)))+(((IkReal(-21.2500000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x359))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst17)*(((((IkReal(21.2500000000000))*(py)))+(((py)*(x360)))+(((py)*(x359))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst17)*(((((IkReal(-1.00000000000000))*(px)*(x360)))+(((IkReal(-21.2500000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x359)))))), ((gconst17)*(((((IkReal(21.2500000000000))*(py)))+(((py)*(x360)))+(((py)*(x359)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x361=IKsin(j0);
IkReal x362=IKcos(j0);
IkReal x363=((px)*(x361));
IkReal x364=((py)*(x362));
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(-0.300000000000000))*(sj3)))+(x363)+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x364))));
evalcond[1]=((((py)*(x361)))+(((px)*(x362))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x364)))+(((IkReal(0.0900000000000000))*(x363))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x365=((IkReal(0.0450000000000000))*(py));
IkReal x366=((IkReal(0.300000000000000))*(sj3));
IkReal x367=((IkReal(0.0450000000000000))*(px));
if( IKabs(((gconst16)*(((((cj3)*(x367)))+(((IkReal(-1.00000000000000))*(x367)))+(((IkReal(-1.00000000000000))*(px)*(x366))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst16)*(((((IkReal(-1.00000000000000))*(cj3)*(x365)))+(x365)+(((py)*(x366))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst16)*(((((cj3)*(x367)))+(((IkReal(-1.00000000000000))*(x367)))+(((IkReal(-1.00000000000000))*(px)*(x366)))))), ((gconst16)*(((((IkReal(-1.00000000000000))*(cj3)*(x365)))+(x365)+(((py)*(x366)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x368=IKsin(j0);
IkReal x369=IKcos(j0);
IkReal x370=((px)*(x368));
IkReal x371=((py)*(x369));
evalcond[0]=((IkReal(-0.0450000000000000))+(x370)+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x371))));
evalcond[1]=((((py)*(x368)))+(((px)*(x369))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x371)))+(((IkReal(0.0900000000000000))*(x370))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=pz;
evalcond[3]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst18;
gconst18=IKsign(((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst19;
gconst19=IKsign(((((IkReal(-0.0900000000000000))*((py)*(py))))+(((IkReal(-0.0900000000000000))*((px)*(px))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x372=((cj3)*(px));
IkReal x373=((IkReal(0.0495000000000000))*(px));
IkReal x374=((IkReal(0.00405000000000000))*(sj3));
IkReal x375=((IkReal(0.0495000000000000))*(py));
IkReal x376=((cj3)*(py));
if( IKabs(((gconst19)*(((((sj3)*(x373)))+(((IkReal(0.392500000000000))*(px)))+(((IkReal(-1.00000000000000))*(x375)))+(((IkReal(-1.00000000000000))*(py)*(x374)))+(((IkReal(-1.00000000000000))*(pp)*(px)))+(((IkReal(0.330000000000000))*(x372)))+(((IkReal(-0.0270000000000000))*(x376))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst19)*(((((IkReal(-0.392500000000000))*(py)))+(((IkReal(-0.0270000000000000))*(x372)))+(((IkReal(-0.330000000000000))*(x376)))+(((IkReal(-1.00000000000000))*(sj3)*(x375)))+(((pp)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x374)))+(((IkReal(-1.00000000000000))*(x373))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst19)*(((((sj3)*(x373)))+(((IkReal(0.392500000000000))*(px)))+(((IkReal(-1.00000000000000))*(x375)))+(((IkReal(-1.00000000000000))*(py)*(x374)))+(((IkReal(-1.00000000000000))*(pp)*(px)))+(((IkReal(0.330000000000000))*(x372)))+(((IkReal(-0.0270000000000000))*(x376)))))), ((gconst19)*(((((IkReal(-0.392500000000000))*(py)))+(((IkReal(-0.0270000000000000))*(x372)))+(((IkReal(-0.330000000000000))*(x376)))+(((IkReal(-1.00000000000000))*(sj3)*(x375)))+(((pp)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x374)))+(((IkReal(-1.00000000000000))*(x373)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x377=IKsin(j0);
IkReal x378=IKcos(j0);
IkReal x379=((px)*(x377));
IkReal x380=((py)*(x378));
IkReal x381=((px)*(x378));
IkReal x382=((py)*(x377));
evalcond[0]=((IkReal(-0.550000000000000))+(x382)+(x381)+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[1]=((IkReal(-0.0450000000000000))+(x379)+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x380))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x380)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x379)))+(((IkReal(1.10000000000000))*(x381)))+(((IkReal(1.10000000000000))*(x382))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x383=((IkReal(0.0450000000000000))*(px));
IkReal x384=((cj3)*(py));
IkReal x385=((IkReal(0.300000000000000))*(sj3));
IkReal x386=((IkReal(0.0450000000000000))*(py));
if( IKabs(((gconst18)*(((((IkReal(-0.300000000000000))*(x384)))+(((IkReal(-1.00000000000000))*(x383)))+(((cj3)*(x383)))+(((IkReal(-1.00000000000000))*(px)*(x385)))+(((IkReal(-0.550000000000000))*(py)))+(((IkReal(-1.00000000000000))*(sj3)*(x386))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst18)*(((((py)*(x385)))+(x386)+(((IkReal(-0.0450000000000000))*(x384)))+(((IkReal(-0.550000000000000))*(px)))+(((IkReal(-0.300000000000000))*(cj3)*(px)))+(((IkReal(-1.00000000000000))*(sj3)*(x383))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst18)*(((((IkReal(-0.300000000000000))*(x384)))+(((IkReal(-1.00000000000000))*(x383)))+(((cj3)*(x383)))+(((IkReal(-1.00000000000000))*(px)*(x385)))+(((IkReal(-0.550000000000000))*(py)))+(((IkReal(-1.00000000000000))*(sj3)*(x386)))))), ((gconst18)*(((((py)*(x385)))+(x386)+(((IkReal(-0.0450000000000000))*(x384)))+(((IkReal(-0.550000000000000))*(px)))+(((IkReal(-0.300000000000000))*(cj3)*(px)))+(((IkReal(-1.00000000000000))*(sj3)*(x383)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x387=IKsin(j0);
IkReal x388=IKcos(j0);
IkReal x389=((px)*(x387));
IkReal x390=((py)*(x388));
IkReal x391=((px)*(x388));
IkReal x392=((py)*(x387));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(x391)+(x392));
evalcond[1]=((IkReal(-0.0450000000000000))+(x389)+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x390)))+(((IkReal(0.0450000000000000))*(cj3))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x389)))+(((IkReal(1.10000000000000))*(x392)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x391)))+(((IkReal(-0.0900000000000000))*(x390))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-1.00000000000000))*(pz));
evalcond[3]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst20;
gconst20=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst21;
gconst21=IKsign(((((IkReal(1.10000000000000))*((py)*(py))))+(((IkReal(1.10000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x393=((IkReal(0.0495000000000000))*(px));
IkReal x394=((IkReal(0.330000000000000))*(sj3));
IkReal x395=((IkReal(1.00000000000000))*(pp));
IkReal x396=((IkReal(0.0495000000000000))*(py));
IkReal x397=((IkReal(0.00405000000000000))*(cj3));
IkReal x398=((IkReal(0.0270000000000000))*(sj3));
if( IKabs(((gconst21)*(((((IkReal(-0.208450000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x395)))+(((py)*(x398)))+(((IkReal(-1.00000000000000))*(cj3)*(x393)))+(((IkReal(-1.00000000000000))*(py)*(x397)))+(x393)+(((px)*(x394))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst21)*(((((IkReal(-1.00000000000000))*(px)*(x395)))+(((cj3)*(x396)))+(((IkReal(-0.208450000000000))*(px)))+(((px)*(x398)))+(((IkReal(-1.00000000000000))*(px)*(x397)))+(((IkReal(-1.00000000000000))*(x396)))+(((IkReal(-1.00000000000000))*(py)*(x394))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst21)*(((((IkReal(-0.208450000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x395)))+(((py)*(x398)))+(((IkReal(-1.00000000000000))*(cj3)*(x393)))+(((IkReal(-1.00000000000000))*(py)*(x397)))+(x393)+(((px)*(x394)))))), ((gconst21)*(((((IkReal(-1.00000000000000))*(px)*(x395)))+(((cj3)*(x396)))+(((IkReal(-0.208450000000000))*(px)))+(((px)*(x398)))+(((IkReal(-1.00000000000000))*(px)*(x397)))+(((IkReal(-1.00000000000000))*(x396)))+(((IkReal(-1.00000000000000))*(py)*(x394)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x399=IKsin(j0);
IkReal x400=IKcos(j0);
IkReal x401=((px)*(x399));
IkReal x402=((IkReal(1.00000000000000))*(x400));
IkReal x403=((py)*(x399));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x403)))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(px)*(x402)))+(((IkReal(-0.300000000000000))*(cj3))));
evalcond[1]=((IkReal(-0.0450000000000000))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(0.0450000000000000))*(cj3)))+(x401)+(((IkReal(-1.00000000000000))*(py)*(x402))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(x400)))+(((IkReal(-1.10000000000000))*(x403)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(px)*(x400)))+(((IkReal(0.0900000000000000))*(x401))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x404=((px)*(sj3));
IkReal x405=((IkReal(0.300000000000000))*(cj3));
IkReal x406=((IkReal(0.0450000000000000))*(py));
IkReal x407=((IkReal(0.0450000000000000))*(px));
if( IKabs(((gconst20)*(((((IkReal(-1.00000000000000))*(sj3)*(x406)))+(((IkReal(-0.550000000000000))*(py)))+(x407)+(((IkReal(-1.00000000000000))*(py)*(x405)))+(((IkReal(-1.00000000000000))*(cj3)*(x407)))+(((IkReal(0.300000000000000))*(x404))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst20)*(((((IkReal(-0.300000000000000))*(py)*(sj3)))+(((IkReal(-0.0450000000000000))*(x404)))+(((IkReal(-1.00000000000000))*(px)*(x405)))+(((IkReal(-0.550000000000000))*(px)))+(((IkReal(-1.00000000000000))*(x406)))+(((cj3)*(x406))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst20)*(((((IkReal(-1.00000000000000))*(sj3)*(x406)))+(((IkReal(-0.550000000000000))*(py)))+(x407)+(((IkReal(-1.00000000000000))*(py)*(x405)))+(((IkReal(-1.00000000000000))*(cj3)*(x407)))+(((IkReal(0.300000000000000))*(x404)))))), ((gconst20)*(((((IkReal(-0.300000000000000))*(py)*(sj3)))+(((IkReal(-0.0450000000000000))*(x404)))+(((IkReal(-1.00000000000000))*(px)*(x405)))+(((IkReal(-0.550000000000000))*(px)))+(((IkReal(-1.00000000000000))*(x406)))+(((cj3)*(x406)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x408=IKsin(j0);
IkReal x409=IKcos(j0);
IkReal x410=((px)*(x408));
IkReal x411=((IkReal(1.00000000000000))*(x409));
IkReal x412=((py)*(x408));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x412)))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(px)*(x411))));
evalcond[1]=((IkReal(-0.0450000000000000))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(x411)))+(x410));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(py)*(x409)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(x412)))+(((IkReal(0.0900000000000000))*(x410)))+(((IkReal(-1.10000000000000))*(px)*(x409))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x413=((px)*(sj3));
IkReal x414=((cj3)*(py));
IkReal x415=((IkReal(0.0450000000000000))*(sj1));
IkReal x416=((IkReal(0.300000000000000))*(sj1));
IkReal x417=((py)*(sj3));
IkReal x418=((cj3)*(px));
IkReal x419=((IkReal(1.00000000000000))*(cj1)*(pz));
if( IKabs(((gconst13)*(((((IkReal(0.0450000000000000))*(x417)))+(((IkReal(0.300000000000000))*(x414)))+(((IkReal(0.550000000000000))*(py)))+(((px)*(x415)))+(((IkReal(-1.00000000000000))*(py)*(x419)))+(((x413)*(x416)))+(((IkReal(-1.00000000000000))*(x415)*(x418))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst13)*(((((x414)*(x415)))+(((IkReal(-1.00000000000000))*(x416)*(x417)))+(((IkReal(0.550000000000000))*(px)))+(((IkReal(0.0450000000000000))*(x413)))+(((IkReal(-1.00000000000000))*(px)*(x419)))+(((IkReal(0.300000000000000))*(x418)))+(((IkReal(-1.00000000000000))*(py)*(x415))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst13)*(((((IkReal(0.0450000000000000))*(x417)))+(((IkReal(0.300000000000000))*(x414)))+(((IkReal(0.550000000000000))*(py)))+(((px)*(x415)))+(((IkReal(-1.00000000000000))*(py)*(x419)))+(((x413)*(x416)))+(((IkReal(-1.00000000000000))*(x415)*(x418)))))), ((gconst13)*(((((x414)*(x415)))+(((IkReal(-1.00000000000000))*(x416)*(x417)))+(((IkReal(0.550000000000000))*(px)))+(((IkReal(0.0450000000000000))*(x413)))+(((IkReal(-1.00000000000000))*(px)*(x419)))+(((IkReal(0.300000000000000))*(x418)))+(((IkReal(-1.00000000000000))*(py)*(x415)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x420=IKsin(j0);
IkReal x421=IKcos(j0);
IkReal x422=((IkReal(0.300000000000000))*(cj3));
IkReal x423=((IkReal(1.10000000000000))*(sj1));
IkReal x424=((IkReal(1.00000000000000))*(cj1));
IkReal x425=((IkReal(0.0450000000000000))*(sj3));
IkReal x426=((cj1)*(pz));
IkReal x427=((px)*(x420));
IkReal x428=((px)*(x421));
IkReal x429=((py)*(x421));
IkReal x430=((py)*(x420));
evalcond[0]=((IkReal(-0.550000000000000))+(x426)+(((IkReal(-1.00000000000000))*(x425)))+(((IkReal(-1.00000000000000))*(x422)))+(((sj1)*(x430)))+(((sj1)*(x428))));
evalcond[1]=((IkReal(-0.0450000000000000))+(((IkReal(-0.300000000000000))*(sj3)))+(x427)+(((IkReal(-1.00000000000000))*(x429)))+(((IkReal(0.0450000000000000))*(cj3))));
evalcond[2]=((((pz)*(sj1)))+(((IkReal(-1.00000000000000))*(x424)*(x430)))+(((IkReal(-1.00000000000000))*(x424)*(x428))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x430)))+(((IkReal(0.550000000000000))*(sj1)))+(((sj1)*(x425)))+(((IkReal(-1.00000000000000))*(x428)))+(((sj1)*(x422))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x423)*(x430)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x427)))+(((IkReal(1.10000000000000))*(x426)))+(((IkReal(-0.0900000000000000))*(x429)))+(((x423)*(x428))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x431=((cj1)*(py));
IkReal x432=((IkReal(0.300000000000000))*(sj3));
IkReal x433=((pz)*(sj1));
IkReal x434=((IkReal(0.0450000000000000))*(cj1)*(px));
if( IKabs(((gconst12)*(((x434)+(((py)*(x433)))+(((IkReal(-1.00000000000000))*(cj3)*(x434)))+(((cj1)*(px)*(x432))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst12)*(((((px)*(x433)))+(((IkReal(-0.0450000000000000))*(x431)))+(((IkReal(0.0450000000000000))*(cj3)*(x431)))+(((IkReal(-1.00000000000000))*(x431)*(x432))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst12)*(((x434)+(((py)*(x433)))+(((IkReal(-1.00000000000000))*(cj3)*(x434)))+(((cj1)*(px)*(x432)))))), ((gconst12)*(((((px)*(x433)))+(((IkReal(-0.0450000000000000))*(x431)))+(((IkReal(0.0450000000000000))*(cj3)*(x431)))+(((IkReal(-1.00000000000000))*(x431)*(x432)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x435=IKsin(j0);
IkReal x436=IKcos(j0);
IkReal x437=((IkReal(0.300000000000000))*(cj3));
IkReal x438=((IkReal(1.10000000000000))*(sj1));
IkReal x439=((IkReal(1.00000000000000))*(cj1));
IkReal x440=((IkReal(0.0450000000000000))*(sj3));
IkReal x441=((cj1)*(pz));
IkReal x442=((px)*(x435));
IkReal x443=((px)*(x436));
IkReal x444=((py)*(x436));
IkReal x445=((py)*(x435));
evalcond[0]=((IkReal(-0.550000000000000))+(x441)+(((sj1)*(x443)))+(((sj1)*(x445)))+(((IkReal(-1.00000000000000))*(x437)))+(((IkReal(-1.00000000000000))*(x440))));
evalcond[1]=((IkReal(-0.0450000000000000))+(((IkReal(-0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x444)))+(x442)+(((IkReal(0.0450000000000000))*(cj3))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x439)*(x443)))+(((pz)*(sj1)))+(((IkReal(-1.00000000000000))*(x439)*(x445))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x445)))+(((sj1)*(x440)))+(((IkReal(0.550000000000000))*(sj1)))+(((IkReal(-1.00000000000000))*(x443)))+(((sj1)*(x437))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x442)))+(((x438)*(x445)))+(((IkReal(-1.00000000000000))*(pp)))+(((x438)*(x443)))+(((IkReal(1.10000000000000))*(x441)))+(((IkReal(-0.0900000000000000))*(x444))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x446=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x446;
evalcond[3]=x446;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst23;
gconst23=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst22;
IkReal x447=((IkReal(1.00000000000000))*(sj2));
gconst22=IKsign(((((IkReal(-1.00000000000000))*(x447)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x447)*((py)*(py))))));
IkReal x448=((IkReal(1.00000000000000))*(sj2));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x448)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x448)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x449=x446;
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x449;
evalcond[3]=x449;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst24;
gconst24=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst25;
gconst25=IKsign(((((IkReal(-9.00000000000000))*((px)*(px))))+(((IkReal(-9.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x450=((IkReal(110.000000000000))*(pz));
IkReal x451=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst25)*(((((IkReal(-1.00000000000000))*(py)*(x451)))+(((IkReal(-21.2500000000000))*(py)))+(((py)*(x450))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst25)*(((((IkReal(-1.00000000000000))*(px)*(x451)))+(((IkReal(-21.2500000000000))*(px)))+(((px)*(x450))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst25)*(((((IkReal(-1.00000000000000))*(py)*(x451)))+(((IkReal(-21.2500000000000))*(py)))+(((py)*(x450)))))), ((gconst25)*(((((IkReal(-1.00000000000000))*(px)*(x451)))+(((IkReal(-21.2500000000000))*(px)))+(((px)*(x450)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x452=IKcos(j0);
IkReal x453=IKsin(j0);
IkReal x454=((IkReal(1.00000000000000))*(x452));
IkReal x455=((py)*(x453));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x454)))+(((px)*(x453))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(px)*(x454)))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x455))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(x452)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(x455))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x456=((IkReal(0.0450000000000000))*(py));
IkReal x457=((IkReal(0.300000000000000))*(sj3));
IkReal x458=((IkReal(0.0450000000000000))*(px));
if( IKabs(((gconst24)*(((x456)+(((IkReal(-1.00000000000000))*(cj3)*(x456)))+(((py)*(x457))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst24)*(((x458)+(((IkReal(-1.00000000000000))*(cj3)*(x458)))+(((px)*(x457))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst24)*(((x456)+(((IkReal(-1.00000000000000))*(cj3)*(x456)))+(((py)*(x457)))))), ((gconst24)*(((x458)+(((IkReal(-1.00000000000000))*(cj3)*(x458)))+(((px)*(x457)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x459=IKcos(j0);
IkReal x460=IKsin(j0);
IkReal x461=((IkReal(1.00000000000000))*(x459));
IkReal x462=((py)*(x460));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x461)))+(((px)*(x460))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(px)*(x461)))+(((IkReal(-1.00000000000000))*(x462)))+(((IkReal(-0.0450000000000000))*(cj3))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x462)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(px)*(x459)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x463=x446;
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j2, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x463;
evalcond[3]=x463;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst26;
gconst26=IKsign(((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst27;
gconst27=IKsign(((((IkReal(9.00000000000000))*((px)*(px))))+(((IkReal(9.00000000000000))*((py)*(py))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x464=((IkReal(110.000000000000))*(pz));
IkReal x465=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst27)*(((((IkReal(-1.00000000000000))*(py)*(x465)))+(((IkReal(-21.2500000000000))*(py)))+(((py)*(x464))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst27)*(((((px)*(x464)))+(((IkReal(-1.00000000000000))*(px)*(x465)))+(((IkReal(-21.2500000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst27)*(((((IkReal(-1.00000000000000))*(py)*(x465)))+(((IkReal(-21.2500000000000))*(py)))+(((py)*(x464)))))), ((gconst27)*(((((px)*(x464)))+(((IkReal(-1.00000000000000))*(px)*(x465)))+(((IkReal(-21.2500000000000))*(px)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x466=IKsin(j0);
IkReal x467=IKcos(j0);
IkReal x468=((px)*(x467));
IkReal x469=((py)*(x466));
evalcond[0]=((((px)*(x466)))+(((IkReal(-1.00000000000000))*(py)*(x467))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-0.0450000000000000))*(cj3)))+(x469)+(x468));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x468)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(x469))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x470=((IkReal(0.0450000000000000))*(cj3));
IkReal x471=((IkReal(0.300000000000000))*(sj3));
if( IKabs(((gconst26)*(((((IkReal(-1.00000000000000))*(py)*(x470)))+(((py)*(x471)))+(((IkReal(0.0450000000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst26)*(((((px)*(x471)))+(((IkReal(0.0450000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x470))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst26)*(((((IkReal(-1.00000000000000))*(py)*(x470)))+(((py)*(x471)))+(((IkReal(0.0450000000000000))*(py)))))), ((gconst26)*(((((px)*(x471)))+(((IkReal(0.0450000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x470)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x472=IKsin(j0);
IkReal x473=IKcos(j0);
IkReal x474=((px)*(x473));
IkReal x475=((py)*(x472));
evalcond[0]=((((px)*(x472)))+(((IkReal(-1.00000000000000))*(py)*(x473))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(0.300000000000000))*(sj3)))+(x474)+(x475)+(((IkReal(-0.0450000000000000))*(cj3))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(x474)))+(((IkReal(-0.0900000000000000))*(x475))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x476=(sj2)*(sj2);
IkReal x477=((cj2)*(sj2));
IkReal x478=((IkReal(0.0450000000000000))*(cj3));
IkReal x479=((IkReal(0.300000000000000))*(sj3));
IkReal x480=((px)*(x479));
IkReal x481=((py)*(x476));
IkReal x482=((px)*(x476));
if( IKabs(((gconst22)*(((((x476)*(x480)))+(((IkReal(0.0450000000000000))*(x482)))+(((IkReal(-1.00000000000000))*(x478)*(x482)))+(((IkReal(-1.00000000000000))*(py)*(x477)*(x479)))+(((IkReal(-0.0450000000000000))*(py)*(x477)))+(((py)*(x477)*(x478))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst22)*(((((IkReal(-1.00000000000000))*(x477)*(x480)))+(((IkReal(-0.0450000000000000))*(px)*(x477)))+(((px)*(x477)*(x478)))+(((IkReal(-0.0450000000000000))*(x481)))+(((x478)*(x481)))+(((IkReal(-1.00000000000000))*(x479)*(x481))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst22)*(((((x476)*(x480)))+(((IkReal(0.0450000000000000))*(x482)))+(((IkReal(-1.00000000000000))*(x478)*(x482)))+(((IkReal(-1.00000000000000))*(py)*(x477)*(x479)))+(((IkReal(-0.0450000000000000))*(py)*(x477)))+(((py)*(x477)*(x478)))))), ((gconst22)*(((((IkReal(-1.00000000000000))*(x477)*(x480)))+(((IkReal(-0.0450000000000000))*(px)*(x477)))+(((px)*(x477)*(x478)))+(((IkReal(-0.0450000000000000))*(x481)))+(((x478)*(x481)))+(((IkReal(-1.00000000000000))*(x479)*(x481)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x483=IKcos(j0);
IkReal x484=IKsin(j0);
IkReal x485=((IkReal(0.0450000000000000))*(sj2));
IkReal x486=((IkReal(0.300000000000000))*(sj3));
IkReal x487=((IkReal(0.0900000000000000))*(sj2));
IkReal x488=((IkReal(1.00000000000000))*(cj2));
IkReal x489=((IkReal(0.0900000000000000))*(cj2));
IkReal x490=((IkReal(0.0450000000000000))*(cj3));
IkReal x491=((px)*(x484));
IkReal x492=((px)*(x483));
IkReal x493=((py)*(x483));
IkReal x494=((py)*(x484));
evalcond[0]=((((IkReal(-1.00000000000000))*(x493)))+(((sj2)*(x486)))+(((IkReal(-1.00000000000000))*(cj3)*(x485)))+(x491)+(x485));
evalcond[1]=((((sj2)*(x494)))+(((IkReal(-1.00000000000000))*(x488)*(x493)))+(((sj2)*(x492)))+(((cj2)*(x491))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x488)*(x494)))+(((IkReal(-1.00000000000000))*(x490)))+(((sj2)*(x491)))+(((IkReal(-1.00000000000000))*(x488)*(x492)))+(x486)+(((IkReal(-1.00000000000000))*(sj2)*(x493))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x492)))+(((cj2)*(x486)))+(((IkReal(-1.00000000000000))*(x494)))+(((IkReal(-1.00000000000000))*(cj2)*(x490)))+(((IkReal(0.0450000000000000))*(cj2))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x487)*(x493)))+(((x489)*(x494)))+(((IkReal(-1.00000000000000))*(pp)))+(((x489)*(x492)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x487)*(x491))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x495=((IkReal(0.0450000000000000))*(py));
IkReal x496=((cj3)*(sj2));
IkReal x497=((IkReal(0.300000000000000))*(sj3));
IkReal x498=((IkReal(0.0450000000000000))*(px));
IkReal x499=((cj2)*(cj3));
if( IKabs(((gconst23)*(((((IkReal(-1.00000000000000))*(sj2)*(x498)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x497)))+(((cj2)*(py)*(x497)))+(((IkReal(-1.00000000000000))*(x495)*(x499)))+(((cj2)*(x495)))+(((x496)*(x498))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst23)*(((((cj2)*(x498)))+(((sj2)*(x495)))+(((py)*(sj2)*(x497)))+(((cj2)*(px)*(x497)))+(((IkReal(-1.00000000000000))*(x495)*(x496)))+(((IkReal(-1.00000000000000))*(x498)*(x499))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst23)*(((((IkReal(-1.00000000000000))*(sj2)*(x498)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x497)))+(((cj2)*(py)*(x497)))+(((IkReal(-1.00000000000000))*(x495)*(x499)))+(((cj2)*(x495)))+(((x496)*(x498)))))), ((gconst23)*(((((cj2)*(x498)))+(((sj2)*(x495)))+(((py)*(sj2)*(x497)))+(((cj2)*(px)*(x497)))+(((IkReal(-1.00000000000000))*(x495)*(x496)))+(((IkReal(-1.00000000000000))*(x498)*(x499)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x500=IKcos(j0);
IkReal x501=IKsin(j0);
IkReal x502=((IkReal(0.0450000000000000))*(sj2));
IkReal x503=((IkReal(0.300000000000000))*(sj3));
IkReal x504=((IkReal(0.0900000000000000))*(sj2));
IkReal x505=((IkReal(1.00000000000000))*(cj2));
IkReal x506=((IkReal(0.0900000000000000))*(cj2));
IkReal x507=((IkReal(0.0450000000000000))*(cj3));
IkReal x508=((px)*(x501));
IkReal x509=((px)*(x500));
IkReal x510=((py)*(x500));
IkReal x511=((py)*(x501));
evalcond[0]=((((sj2)*(x503)))+(((IkReal(-1.00000000000000))*(x510)))+(((IkReal(-1.00000000000000))*(cj3)*(x502)))+(x508)+(x502));
evalcond[1]=((((sj2)*(x511)))+(((IkReal(-1.00000000000000))*(x505)*(x510)))+(((sj2)*(x509)))+(((cj2)*(x508))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x505)*(x509)))+(((IkReal(-1.00000000000000))*(sj2)*(x510)))+(((IkReal(-1.00000000000000))*(x507)))+(((IkReal(-1.00000000000000))*(x505)*(x511)))+(((sj2)*(x508)))+(x503));
evalcond[3]=((((cj2)*(x503)))+(((IkReal(-1.00000000000000))*(cj2)*(x507)))+(((IkReal(-1.00000000000000))*(x509)))+(((IkReal(-1.00000000000000))*(x511)))+(((IkReal(0.0450000000000000))*(cj2))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x504)*(x510)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x504)*(x508)))+(((x506)*(x511)))+(((x506)*(x509))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x512=((IkReal(0.0450000000000000))*(sj3));
IkReal x513=((IkReal(0.300000000000000))*(cj3));
IkReal x514=((x513)+(x512));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x514))));
evalcond[3]=((IkReal(0.550000000000000))+(x514)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst28;
gconst28=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst29;
gconst29=IKsign(((((sj2)*((px)*(px))))+(((sj2)*((py)*(py))))));
dummyeval[0]=((((sj2)*((px)*(px))))+(((sj2)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x515=((IkReal(0.0450000000000000))*(sj3));
IkReal x516=((IkReal(0.300000000000000))*(cj3));
IkReal x517=((x516)+(x515));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x517)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(x517)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst30;
gconst30=IKsign(((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst31;
gconst31=IKsign(((((IkReal(9.00000000000000))*((px)*(px))))+(((IkReal(9.00000000000000))*((py)*(py))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x518=((IkReal(110.000000000000))*(pz));
IkReal x519=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst31)*(((((IkReal(-21.2500000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x519)))+(((IkReal(-1.00000000000000))*(py)*(x518))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst31)*(((((IkReal(-1.00000000000000))*(px)*(x518)))+(((IkReal(-1.00000000000000))*(px)*(x519)))+(((IkReal(-21.2500000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst31)*(((((IkReal(-21.2500000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x519)))+(((IkReal(-1.00000000000000))*(py)*(x518)))))), ((gconst31)*(((((IkReal(-1.00000000000000))*(px)*(x518)))+(((IkReal(-1.00000000000000))*(px)*(x519)))+(((IkReal(-21.2500000000000))*(px)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x520=IKsin(j0);
IkReal x521=IKcos(j0);
IkReal x522=((px)*(x521));
IkReal x523=((py)*(x520));
evalcond[0]=((((px)*(x520)))+(((IkReal(-1.00000000000000))*(py)*(x521))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-0.0450000000000000))*(cj3)))+(x522)+(x523));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x522)))+(((IkReal(-0.0900000000000000))*(x523))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x524=((IkReal(0.0450000000000000))*(py));
IkReal x525=((IkReal(0.300000000000000))*(sj3));
IkReal x526=((IkReal(0.0450000000000000))*(px));
if( IKabs(((gconst30)*(((((py)*(x525)))+(((IkReal(-1.00000000000000))*(cj3)*(x524)))+(x524))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst30)*(((((IkReal(-1.00000000000000))*(cj3)*(x526)))+(((px)*(x525)))+(x526))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst30)*(((((py)*(x525)))+(((IkReal(-1.00000000000000))*(cj3)*(x524)))+(x524)))), ((gconst30)*(((((IkReal(-1.00000000000000))*(cj3)*(x526)))+(((px)*(x525)))+(x526)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x527=IKsin(j0);
IkReal x528=IKcos(j0);
IkReal x529=((px)*(x528));
IkReal x530=((py)*(x527));
evalcond[0]=((((px)*(x527)))+(((IkReal(-1.00000000000000))*(py)*(x528))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-0.0450000000000000))*(cj3)))+(x529)+(x530));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x529)))+(((IkReal(-0.0900000000000000))*(x530))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x531=((IkReal(0.0450000000000000))*(sj3));
IkReal x532=((IkReal(0.300000000000000))*(cj3));
IkReal x533=((x531)+(x532));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j2, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x533)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x533));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst32;
gconst32=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst33;
gconst33=IKsign(((((IkReal(-9.00000000000000))*((px)*(px))))+(((IkReal(-9.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((py)*(py))))+(((IkReal(-1.00000000000000))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x534=((IkReal(110.000000000000))*(pz));
IkReal x535=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst33)*(((((IkReal(-1.00000000000000))*(py)*(x535)))+(((IkReal(-21.2500000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x534))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst33)*(((((IkReal(-1.00000000000000))*(px)*(x535)))+(((IkReal(-1.00000000000000))*(px)*(x534)))+(((IkReal(-21.2500000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst33)*(((((IkReal(-1.00000000000000))*(py)*(x535)))+(((IkReal(-21.2500000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x534)))))), ((gconst33)*(((((IkReal(-1.00000000000000))*(px)*(x535)))+(((IkReal(-1.00000000000000))*(px)*(x534)))+(((IkReal(-21.2500000000000))*(px)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x536=IKcos(j0);
IkReal x537=IKsin(j0);
IkReal x538=((IkReal(1.00000000000000))*(x536));
IkReal x539=((py)*(x537));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x538)))+(((px)*(x537))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x539)))+(((IkReal(-1.00000000000000))*(px)*(x538))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(px)*(x536)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x539))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x540=((IkReal(0.0450000000000000))*(py));
IkReal x541=((IkReal(0.300000000000000))*(sj3));
IkReal x542=((IkReal(0.0450000000000000))*(px));
if( IKabs(((gconst32)*(((((IkReal(-1.00000000000000))*(cj3)*(x540)))+(x540)+(((py)*(x541))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst32)*(((x542)+(((px)*(x541)))+(((IkReal(-1.00000000000000))*(cj3)*(x542))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst32)*(((((IkReal(-1.00000000000000))*(cj3)*(x540)))+(x540)+(((py)*(x541)))))), ((gconst32)*(((x542)+(((px)*(x541)))+(((IkReal(-1.00000000000000))*(cj3)*(x542)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x543=IKcos(j0);
IkReal x544=IKsin(j0);
IkReal x545=((IkReal(1.00000000000000))*(x543));
IkReal x546=((py)*(x544));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x545)))+(((px)*(x544))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x546)))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(px)*(x545))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x546)))+(((IkReal(0.0900000000000000))*(px)*(x543))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x547=(sj2)*(sj2);
IkReal x548=((IkReal(0.300000000000000))*(sj3));
IkReal x549=((IkReal(0.0450000000000000))*(cj3));
IkReal x550=((cj2)*(px)*(sj2));
IkReal x551=((py)*(x547));
IkReal x552=((px)*(x547));
IkReal x553=((cj2)*(py)*(sj2));
if( IKabs(((gconst29)*(((((IkReal(-1.00000000000000))*(x548)*(x552)))+(((x549)*(x553)))+(((IkReal(-1.00000000000000))*(x548)*(x553)))+(((IkReal(-0.0450000000000000))*(x552)))+(((x549)*(x552)))+(((IkReal(-0.0450000000000000))*(x553))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst29)*(((((x549)*(x550)))+(((IkReal(-1.00000000000000))*(x548)*(x550)))+(((x548)*(x551)))+(((IkReal(-0.0450000000000000))*(x550)))+(((IkReal(0.0450000000000000))*(x551)))+(((IkReal(-1.00000000000000))*(x549)*(x551))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst29)*(((((IkReal(-1.00000000000000))*(x548)*(x552)))+(((x549)*(x553)))+(((IkReal(-1.00000000000000))*(x548)*(x553)))+(((IkReal(-0.0450000000000000))*(x552)))+(((x549)*(x552)))+(((IkReal(-0.0450000000000000))*(x553)))))), ((gconst29)*(((((x549)*(x550)))+(((IkReal(-1.00000000000000))*(x548)*(x550)))+(((x548)*(x551)))+(((IkReal(-0.0450000000000000))*(x550)))+(((IkReal(0.0450000000000000))*(x551)))+(((IkReal(-1.00000000000000))*(x549)*(x551)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x554=IKsin(j0);
IkReal x555=IKcos(j0);
IkReal x556=((IkReal(0.0450000000000000))*(sj2));
IkReal x557=((IkReal(0.300000000000000))*(sj3));
IkReal x558=((IkReal(0.0900000000000000))*(sj2));
IkReal x559=((py)*(sj2));
IkReal x560=((cj2)*(py));
IkReal x561=((IkReal(0.0450000000000000))*(cj3));
IkReal x562=((px)*(x554));
IkReal x563=((IkReal(1.00000000000000))*(x555));
IkReal x564=((IkReal(1.00000000000000))*(x554));
IkReal x565=((cj2)*(px)*(x555));
evalcond[0]=((x562)+(((IkReal(-1.00000000000000))*(cj3)*(x556)))+(((sj2)*(x557)))+(((IkReal(-1.00000000000000))*(py)*(x563)))+(x556));
evalcond[1]=((((IkReal(-1.00000000000000))*(x560)*(x563)))+(((cj2)*(x562)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x563)))+(((IkReal(-1.00000000000000))*(x559)*(x564))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x559)*(x563)))+(x565)+(((IkReal(-1.00000000000000))*(x561)))+(((sj2)*(x562)))+(((x554)*(x560)))+(x557));
evalcond[3]=((((IkReal(-0.0450000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(cj2)*(x557)))+(((IkReal(-1.00000000000000))*(px)*(x563)))+(((IkReal(-1.00000000000000))*(py)*(x564)))+(((cj2)*(x561))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x554)*(x560)))+(((IkReal(-0.0900000000000000))*(x565)))+(((IkReal(-1.10000000000000))*(pz)))+(((py)*(x555)*(x558)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x558)*(x562))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x566=((IkReal(0.0450000000000000))*(py));
IkReal x567=((cj3)*(sj2));
IkReal x568=((IkReal(0.300000000000000))*(sj3));
IkReal x569=((IkReal(0.0450000000000000))*(px));
IkReal x570=((cj2)*(cj3));
if( IKabs(((gconst28)*(((((x567)*(x569)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x568)))+(((x566)*(x570)))+(((IkReal(-1.00000000000000))*(sj2)*(x569)))+(((IkReal(-1.00000000000000))*(cj2)*(x566)))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x568))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst28)*(((((IkReal(-1.00000000000000))*(cj2)*(px)*(x568)))+(((x569)*(x570)))+(((IkReal(-1.00000000000000))*(cj2)*(x569)))+(((py)*(sj2)*(x568)))+(((sj2)*(x566)))+(((IkReal(-1.00000000000000))*(x566)*(x567))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst28)*(((((x567)*(x569)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x568)))+(((x566)*(x570)))+(((IkReal(-1.00000000000000))*(sj2)*(x569)))+(((IkReal(-1.00000000000000))*(cj2)*(x566)))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x568)))))), ((gconst28)*(((((IkReal(-1.00000000000000))*(cj2)*(px)*(x568)))+(((x569)*(x570)))+(((IkReal(-1.00000000000000))*(cj2)*(x569)))+(((py)*(sj2)*(x568)))+(((sj2)*(x566)))+(((IkReal(-1.00000000000000))*(x566)*(x567)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x571=IKsin(j0);
IkReal x572=IKcos(j0);
IkReal x573=((IkReal(0.0450000000000000))*(sj2));
IkReal x574=((IkReal(0.300000000000000))*(sj3));
IkReal x575=((IkReal(0.0900000000000000))*(sj2));
IkReal x576=((py)*(sj2));
IkReal x577=((cj2)*(py));
IkReal x578=((IkReal(0.0450000000000000))*(cj3));
IkReal x579=((px)*(x571));
IkReal x580=((IkReal(1.00000000000000))*(x572));
IkReal x581=((IkReal(1.00000000000000))*(x571));
IkReal x582=((cj2)*(px)*(x572));
evalcond[0]=((x579)+(x573)+(((sj2)*(x574)))+(((IkReal(-1.00000000000000))*(cj3)*(x573)))+(((IkReal(-1.00000000000000))*(py)*(x580))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x576)*(x581)))+(((IkReal(-1.00000000000000))*(x577)*(x580)))+(((cj2)*(x579)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x580))));
evalcond[2]=((IkReal(0.0450000000000000))+(x574)+(((x571)*(x577)))+(((sj2)*(x579)))+(((IkReal(-1.00000000000000))*(x578)))+(((IkReal(-1.00000000000000))*(x576)*(x580)))+(x582));
evalcond[3]=((((IkReal(-1.00000000000000))*(px)*(x580)))+(((IkReal(-1.00000000000000))*(py)*(x581)))+(((IkReal(-0.0450000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(cj2)*(x574)))+(((cj2)*(x578))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x571)*(x577)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x582)))+(((py)*(x572)*(x575)))+(((IkReal(-1.00000000000000))*(x575)*(x579))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x583=(cj1)*(cj1);
IkReal x584=(sj1)*(sj1);
IkReal x585=((py)*(sj2));
IkReal x586=((IkReal(0.550000000000000))*(cj1));
IkReal x587=((cj2)*(px));
IkReal x588=((IkReal(0.0450000000000000))*(sj3));
IkReal x589=((px)*(sj2));
IkReal x590=((cj1)*(pz));
IkReal x591=((cj2)*(py));
IkReal x592=((IkReal(0.300000000000000))*(cj2)*(cj3));
IkReal x593=((IkReal(0.300000000000000))*(cj1)*(cj3));
IkReal x594=((IkReal(1.00000000000000))*(pz)*(x589));
if( IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(x584)*(x594)))+(((IkReal(-1.00000000000000))*(x588)*(x591)))+(((x590)*(x591)))+(((IkReal(-0.550000000000000))*(x591)))+(((IkReal(-0.300000000000000))*(cj3)*(x591)))+(((cj1)*(x588)*(x589)))+(((x589)*(x593)))+(((IkReal(-1.00000000000000))*(x583)*(x594)))+(((x586)*(x589))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((IkReal(-0.550000000000000))*(x587)))+(((IkReal(-1.00000000000000))*(cj1)*(x585)*(x588)))+(((IkReal(-1.00000000000000))*(x585)*(x593)))+(((pz)*(x584)*(x585)))+(((IkReal(-1.00000000000000))*(x585)*(x586)))+(((IkReal(-1.00000000000000))*(x587)*(x588)))+(((x587)*(x590)))+(((IkReal(-0.300000000000000))*(cj3)*(x587)))+(((pz)*(x583)*(x585))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst1)*(((((IkReal(-1.00000000000000))*(x584)*(x594)))+(((IkReal(-1.00000000000000))*(x588)*(x591)))+(((x590)*(x591)))+(((IkReal(-0.550000000000000))*(x591)))+(((IkReal(-0.300000000000000))*(cj3)*(x591)))+(((cj1)*(x588)*(x589)))+(((x589)*(x593)))+(((IkReal(-1.00000000000000))*(x583)*(x594)))+(((x586)*(x589)))))), ((gconst1)*(((((IkReal(-0.550000000000000))*(x587)))+(((IkReal(-1.00000000000000))*(cj1)*(x585)*(x588)))+(((IkReal(-1.00000000000000))*(x585)*(x593)))+(((pz)*(x584)*(x585)))+(((IkReal(-1.00000000000000))*(x585)*(x586)))+(((IkReal(-1.00000000000000))*(x587)*(x588)))+(((x587)*(x590)))+(((IkReal(-0.300000000000000))*(cj3)*(x587)))+(((pz)*(x583)*(x585)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x595=IKsin(j0);
IkReal x596=IKcos(j0);
IkReal x597=((IkReal(0.0450000000000000))*(sj2));
IkReal x598=((cj1)*(sj2));
IkReal x599=((IkReal(0.300000000000000))*(cj3));
IkReal x600=((IkReal(0.0900000000000000))*(sj2));
IkReal x601=((cj1)*(cj2));
IkReal x602=((IkReal(0.300000000000000))*(sj3));
IkReal x603=((IkReal(0.0450000000000000))*(cj3));
IkReal x604=((IkReal(1.10000000000000))*(sj1));
IkReal x605=((IkReal(0.0450000000000000))*(sj3));
IkReal x606=((cj1)*(pz));
IkReal x607=((px)*(x595));
IkReal x608=((px)*(x596));
IkReal x609=((py)*(x595));
IkReal x610=((cj2)*(pz)*(sj1));
IkReal x611=((IkReal(1.00000000000000))*(py)*(x596));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x605)))+(((IkReal(-1.00000000000000))*(x599)))+(((sj1)*(x608)))+(((sj1)*(x609)))+(x606));
evalcond[1]=((((sj2)*(x602)))+(((IkReal(-1.00000000000000))*(x611)))+(x597)+(((IkReal(-1.00000000000000))*(cj3)*(x597)))+(x607));
evalcond[2]=((((x598)*(x608)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(sj2)))+(((x598)*(x609)))+(((IkReal(-1.00000000000000))*(cj2)*(x611)))+(((cj2)*(x607))));
evalcond[3]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(sj2)*(x611)))+(((sj2)*(x607)))+(((IkReal(-1.00000000000000))*(x603)))+(((IkReal(-1.00000000000000))*(x601)*(x608)))+(((IkReal(-1.00000000000000))*(x601)*(x609)))+(x610)+(x602));
evalcond[4]=((((IkReal(-1.00000000000000))*(x608)))+(((IkReal(-1.00000000000000))*(x609)))+(((sj1)*(x599)))+(((IkReal(-1.00000000000000))*(x601)*(x603)))+(((sj1)*(x605)))+(((IkReal(0.550000000000000))*(sj1)))+(((x601)*(x602)))+(((IkReal(0.0450000000000000))*(x601))));
evalcond[5]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x601)*(x608)))+(((IkReal(-0.0900000000000000))*(x610)))+(((x604)*(x609)))+(((x604)*(x608)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x600)*(x607)))+(((IkReal(0.0900000000000000))*(x601)*(x609)))+(((IkReal(1.10000000000000))*(x606)))+(((py)*(x596)*(x600))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x612=((IkReal(0.0450000000000000))*(px));
IkReal x613=((IkReal(0.300000000000000))*(cj3));
IkReal x614=((sj1)*(sj2));
IkReal x615=((IkReal(0.300000000000000))*(sj3));
IkReal x616=((IkReal(1.00000000000000))*(cj1)*(pz));
IkReal x617=((IkReal(0.0450000000000000))*(py)*(x614));
if( IKabs(((gconst0)*(((((cj3)*(x612)*(x614)))+(((IkReal(0.550000000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x616)))+(((IkReal(0.0450000000000000))*(py)*(sj3)))+(((py)*(x613)))+(((IkReal(-1.00000000000000))*(px)*(x614)*(x615)))+(((IkReal(-1.00000000000000))*(x612)*(x614))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((sj3)*(x612)))+(((IkReal(0.550000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x616)))+(((py)*(x614)*(x615)))+(x617)+(((px)*(x613)))+(((IkReal(-1.00000000000000))*(cj3)*(x617))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst0)*(((((cj3)*(x612)*(x614)))+(((IkReal(0.550000000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x616)))+(((IkReal(0.0450000000000000))*(py)*(sj3)))+(((py)*(x613)))+(((IkReal(-1.00000000000000))*(px)*(x614)*(x615)))+(((IkReal(-1.00000000000000))*(x612)*(x614)))))), ((gconst0)*(((((sj3)*(x612)))+(((IkReal(0.550000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x616)))+(((py)*(x614)*(x615)))+(x617)+(((px)*(x613)))+(((IkReal(-1.00000000000000))*(cj3)*(x617)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x618=IKsin(j0);
IkReal x619=IKcos(j0);
IkReal x620=((IkReal(0.0450000000000000))*(sj2));
IkReal x621=((cj1)*(sj2));
IkReal x622=((IkReal(0.300000000000000))*(cj3));
IkReal x623=((IkReal(0.0900000000000000))*(sj2));
IkReal x624=((cj1)*(cj2));
IkReal x625=((IkReal(0.300000000000000))*(sj3));
IkReal x626=((IkReal(0.0450000000000000))*(cj3));
IkReal x627=((IkReal(1.10000000000000))*(sj1));
IkReal x628=((IkReal(0.0450000000000000))*(sj3));
IkReal x629=((cj1)*(pz));
IkReal x630=((px)*(x618));
IkReal x631=((px)*(x619));
IkReal x632=((py)*(x618));
IkReal x633=((cj2)*(pz)*(sj1));
IkReal x634=((IkReal(1.00000000000000))*(py)*(x619));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x622)))+(((sj1)*(x632)))+(((sj1)*(x631)))+(((IkReal(-1.00000000000000))*(x628)))+(x629));
evalcond[1]=((((sj2)*(x625)))+(((IkReal(-1.00000000000000))*(cj3)*(x620)))+(x630)+(((IkReal(-1.00000000000000))*(x634)))+(x620));
evalcond[2]=((((IkReal(-1.00000000000000))*(pz)*(sj1)*(sj2)))+(((x621)*(x632)))+(((cj2)*(x630)))+(((x621)*(x631)))+(((IkReal(-1.00000000000000))*(cj2)*(x634))));
evalcond[3]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(sj2)*(x634)))+(((IkReal(-1.00000000000000))*(x624)*(x632)))+(((IkReal(-1.00000000000000))*(x626)))+(((IkReal(-1.00000000000000))*(x624)*(x631)))+(((sj2)*(x630)))+(x633)+(x625));
evalcond[4]=((((sj1)*(x622)))+(((IkReal(0.550000000000000))*(sj1)))+(((x624)*(x625)))+(((IkReal(-1.00000000000000))*(x632)))+(((IkReal(-1.00000000000000))*(x631)))+(((sj1)*(x628)))+(((IkReal(0.0450000000000000))*(x624)))+(((IkReal(-1.00000000000000))*(x624)*(x626))));
evalcond[5]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x624)*(x631)))+(((IkReal(-1.00000000000000))*(pp)))+(((x627)*(x631)))+(((IkReal(1.10000000000000))*(x629)))+(((IkReal(-1.00000000000000))*(x623)*(x630)))+(((IkReal(-0.0900000000000000))*(x633)))+(((py)*(x619)*(x623)))+(((x627)*(x632)))+(((IkReal(0.0900000000000000))*(x624)*(x632))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x635=((IkReal(0.0450000000000000))*(sj2));
if( IKabs(((IkReal(-1.00000000000000))*(py))) < IKFAST_ATAN2_MAGTHRESH && IKabs(px) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x636=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-1.00000000000000))*(py)), px)));
if( ((((px)*(px))+((py)*(py)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(0.300000000000000))*(sj2)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x635)))+(x635))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(0.300000000000000))*(sj2)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x635)))+(x635))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x637=IKasin(((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(0.300000000000000))*(sj2)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x635)))+(x635)))));
j0array[0]=((((IkReal(-1.00000000000000))*(x637)))+(((IkReal(-1.00000000000000))*(x636))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x636)))+(x637));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x638=(cj2)*(cj2);
IkReal x639=(py)*(py);
IkReal x640=(sj2)*(sj2);
IkReal x641=IKcos(j0);
IkReal x642=IKsin(j0);
IkReal x643=(px)*(px);
IkReal x644=((IkReal(0.0450000000000000))*(sj2));
IkReal x645=((IkReal(1.00000000000000))*(x643));
IkReal x646=((IkReal(0.300000000000000))*(sj2)*(sj3));
IkReal x647=((px)*(py)*(x640));
IkReal x648=((px)*(py)*(x638));
evalcond[0]=((((x642)*(((((IkReal(-1.00000000000000))*(x647)))+(((IkReal(-1.00000000000000))*(x648)))))))+(((cj3)*(py)*(x644)))+(((IkReal(-1.00000000000000))*(py)*(x644)))+(((x641)*(((((x639)*(x640)))+(((x638)*(x639)))))))+(((IkReal(-1.00000000000000))*(py)*(x646))));
evalcond[1]=((((cj3)*(px)*(x644)))+(((IkReal(-1.00000000000000))*(px)*(x646)))+(((x641)*(((x647)+(x648)))))+(((x642)*(((((IkReal(-1.00000000000000))*(x640)*(x645)))+(((IkReal(-1.00000000000000))*(x638)*(x645)))))))+(((IkReal(-1.00000000000000))*(px)*(x644))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst34;
IkReal x649=((cj2)*(pz));
IkReal x650=((py)*(sj0));
IkReal x651=((IkReal(0.300000000000000))*(cj3));
IkReal x652=((IkReal(0.0450000000000000))*(sj3));
IkReal x653=((cj0)*(px));
gconst34=IKsign(((((IkReal(-0.0450000000000000))*(x649)))+(((IkReal(-0.300000000000000))*(sj3)*(x649)))+(((IkReal(0.0450000000000000))*(cj3)*(x649)))+(((IkReal(-0.550000000000000))*(x650)))+(((IkReal(-1.00000000000000))*(x652)*(x653)))+(((IkReal(-1.00000000000000))*(x650)*(x652)))+(((IkReal(-1.00000000000000))*(x650)*(x651)))+(((IkReal(-0.550000000000000))*(x653)))+(((IkReal(-1.00000000000000))*(x651)*(x653)))));
IkReal x654=((cj0)*(px));
IkReal x655=((IkReal(6.66666666666667))*(cj3));
IkReal x656=((py)*(sj0));
IkReal x657=((cj2)*(pz));
IkReal x658=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-6.66666666666667))*(sj3)*(x657)))+(((cj3)*(x657)))+(((IkReal(-1.00000000000000))*(x655)*(x656)))+(((IkReal(-12.2222222222222))*(x656)))+(((IkReal(-12.2222222222222))*(x654)))+(((IkReal(-1.00000000000000))*(x657)))+(((IkReal(-1.00000000000000))*(x656)*(x658)))+(((IkReal(-1.00000000000000))*(x654)*(x658)))+(((IkReal(-1.00000000000000))*(x654)*(x655))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst35;
gconst35=IKsign(((((sj2)*((py)*(py))*((sj0)*(sj0))))+(((sj2)*((pz)*(pz))))+(((sj2)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0)*(sj2)))));
dummyeval[0]=((((sj2)*((py)*(py))*((sj0)*(sj0))))+(((sj2)*((pz)*(pz))))+(((sj2)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0)*(sj2))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x659=((((IkReal(-1.00000000000000))*(cj0)*(py)))+(((px)*(sj0))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x659;
evalcond[3]=x659;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst36;
IkReal x660=((IkReal(0.0450000000000000))*(pz));
IkReal x661=((IkReal(0.300000000000000))*(cj3));
IkReal x662=((cj0)*(px));
IkReal x663=((py)*(sj0));
IkReal x664=((IkReal(0.0450000000000000))*(sj3));
gconst36=IKsign(((((IkReal(-1.00000000000000))*(x661)*(x663)))+(((IkReal(-1.00000000000000))*(x660)))+(((IkReal(-1.00000000000000))*(x663)*(x664)))+(((IkReal(-1.00000000000000))*(x662)*(x664)))+(((IkReal(-0.550000000000000))*(x663)))+(((IkReal(-1.00000000000000))*(x661)*(x662)))+(((IkReal(-0.300000000000000))*(pz)*(sj3)))+(((cj3)*(x660)))+(((IkReal(-0.550000000000000))*(x662)))));
IkReal x665=((cj0)*(px));
IkReal x666=((IkReal(6.66666666666667))*(cj3));
IkReal x667=((py)*(sj0));
IkReal x668=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x667)*(x668)))+(((IkReal(-1.00000000000000))*(x666)*(x667)))+(((IkReal(-1.00000000000000))*(x665)*(x666)))+(((IkReal(-1.00000000000000))*(pz)))+(((cj3)*(pz)))+(((IkReal(-6.66666666666667))*(pz)*(sj3)))+(((IkReal(-12.2222222222222))*(x667)))+(((IkReal(-12.2222222222222))*(x665)))+(((IkReal(-1.00000000000000))*(x665)*(x668))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst37;
gconst37=IKsign(((((IkReal(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-1.00000000000000))*((cj0)*(cj0))*((px)*(px))))));
dummyeval[0]=((((IkReal(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-1.00000000000000))*((cj0)*(cj0))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x669=((cj0)*(px));
IkReal x670=((IkReal(0.300000000000000))*(sj3));
IkReal x671=((IkReal(0.0450000000000000))*(pz));
IkReal x672=((IkReal(0.0450000000000000))*(cj3));
IkReal x673=((py)*(sj0));
IkReal x674=((IkReal(0.300000000000000))*(cj3));
IkReal x675=((IkReal(0.0450000000000000))*(sj3));
if( IKabs(((gconst37)*(((((IkReal(-1.00000000000000))*(x669)*(x675)))+(((IkReal(-0.550000000000000))*(x669)))+(((IkReal(-1.00000000000000))*(x673)*(x675)))+(((IkReal(-1.00000000000000))*(x669)*(x674)))+(((IkReal(-0.550000000000000))*(x673)))+(((IkReal(-1.00000000000000))*(x673)*(x674)))+(((IkReal(-1.00000000000000))*(cj3)*(x671)))+(((pz)*(x670)))+(x671))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst37)*(((((x672)*(x673)))+(((IkReal(-1.00000000000000))*(sj3)*(x671)))+(((IkReal(-1.00000000000000))*(pz)*(x674)))+(((IkReal(-1.00000000000000))*(x669)*(x670)))+(((IkReal(-1.00000000000000))*(x670)*(x673)))+(((IkReal(-0.550000000000000))*(pz)))+(((IkReal(-0.0450000000000000))*(x673)))+(((x669)*(x672)))+(((IkReal(-0.0450000000000000))*(x669))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst37)*(((((IkReal(-1.00000000000000))*(x669)*(x675)))+(((IkReal(-0.550000000000000))*(x669)))+(((IkReal(-1.00000000000000))*(x673)*(x675)))+(((IkReal(-1.00000000000000))*(x669)*(x674)))+(((IkReal(-0.550000000000000))*(x673)))+(((IkReal(-1.00000000000000))*(x673)*(x674)))+(((IkReal(-1.00000000000000))*(cj3)*(x671)))+(((pz)*(x670)))+(x671)))), ((gconst37)*(((((x672)*(x673)))+(((IkReal(-1.00000000000000))*(sj3)*(x671)))+(((IkReal(-1.00000000000000))*(pz)*(x674)))+(((IkReal(-1.00000000000000))*(x669)*(x670)))+(((IkReal(-1.00000000000000))*(x670)*(x673)))+(((IkReal(-0.550000000000000))*(pz)))+(((IkReal(-0.0450000000000000))*(x673)))+(((x669)*(x672)))+(((IkReal(-0.0450000000000000))*(x669)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x676=IKsin(j1);
IkReal x677=IKcos(j1);
IkReal x678=((IkReal(0.300000000000000))*(cj3));
IkReal x679=((cj0)*(px));
IkReal x680=((py)*(sj0));
IkReal x681=((IkReal(0.0450000000000000))*(cj3));
IkReal x682=((IkReal(0.300000000000000))*(sj3));
IkReal x683=((sj3)*(x677));
IkReal x684=((pz)*(x676));
IkReal x685=((IkReal(1.00000000000000))*(x677));
IkReal x686=((IkReal(0.0450000000000000))*(x676));
IkReal x687=((pz)*(x677));
IkReal x688=((IkReal(0.0900000000000000))*(x677));
IkReal x689=((IkReal(1.10000000000000))*(x676));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((x676)*(x680)))+(((x676)*(x679)))+(((IkReal(-1.00000000000000))*(x678)))+(x687));
evalcond[1]=((((IkReal(-1.00000000000000))*(x677)*(x678)))+(((IkReal(-0.550000000000000))*(x677)))+(((IkReal(-0.0450000000000000))*(x683)))+(((IkReal(-1.00000000000000))*(x676)*(x681)))+(pz)+(((x676)*(x682)))+(x686));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x681)))+(((IkReal(-1.00000000000000))*(x680)*(x685)))+(((IkReal(-1.00000000000000))*(x679)*(x685)))+(x682)+(x684));
evalcond[3]=((((x677)*(x682)))+(((x676)*(x678)))+(((IkReal(0.550000000000000))*(x676)))+(((IkReal(0.0450000000000000))*(x677)))+(((IkReal(-1.00000000000000))*(x679)))+(((IkReal(-1.00000000000000))*(x680)))+(((sj3)*(x686)))+(((IkReal(-1.00000000000000))*(x677)*(x681))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x687)))+(((IkReal(-0.0900000000000000))*(x684)))+(((x679)*(x688)))+(((x680)*(x688)))+(((x679)*(x689)))+(((IkReal(-1.00000000000000))*(pp)))+(((x680)*(x689))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x690=(cj3)*(cj3);
IkReal x691=(sj3)*(sj3);
IkReal x692=((cj3)*(sj3));
IkReal x693=((IkReal(1.00000000000000))*(pz));
if( IKabs(((gconst36)*(((IkReal(-0.302500000000000))+(((IkReal(-0.330000000000000))*(cj3)))+(((IkReal(-0.0270000000000000))*(x692)))+(((IkReal(-0.0900000000000000))*(x690)))+((pz)*(pz))+(((IkReal(-0.00202500000000000))*(x691)))+(((IkReal(-0.0495000000000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst36)*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x693)))+(((IkReal(-0.0135000000000000))*(x691)))+(((IkReal(-0.0879750000000000))*(x692)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x693)))+(((IkReal(0.0135000000000000))*(x690))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst36)*(((IkReal(-0.302500000000000))+(((IkReal(-0.330000000000000))*(cj3)))+(((IkReal(-0.0270000000000000))*(x692)))+(((IkReal(-0.0900000000000000))*(x690)))+((pz)*(pz))+(((IkReal(-0.00202500000000000))*(x691)))+(((IkReal(-0.0495000000000000))*(sj3)))))), ((gconst36)*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x693)))+(((IkReal(-0.0135000000000000))*(x691)))+(((IkReal(-0.0879750000000000))*(x692)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x693)))+(((IkReal(0.0135000000000000))*(x690)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x694=IKsin(j1);
IkReal x695=IKcos(j1);
IkReal x696=((IkReal(0.300000000000000))*(cj3));
IkReal x697=((cj0)*(px));
IkReal x698=((py)*(sj0));
IkReal x699=((IkReal(0.0450000000000000))*(cj3));
IkReal x700=((IkReal(0.300000000000000))*(sj3));
IkReal x701=((sj3)*(x695));
IkReal x702=((pz)*(x694));
IkReal x703=((IkReal(1.00000000000000))*(x695));
IkReal x704=((IkReal(0.0450000000000000))*(x694));
IkReal x705=((pz)*(x695));
IkReal x706=((IkReal(0.0900000000000000))*(x695));
IkReal x707=((IkReal(1.10000000000000))*(x694));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((x694)*(x697)))+(((x694)*(x698)))+(x705)+(((IkReal(-1.00000000000000))*(x696))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x695)*(x696)))+(((IkReal(-0.550000000000000))*(x695)))+(pz)+(((IkReal(-1.00000000000000))*(x694)*(x699)))+(x704)+(((IkReal(-0.0450000000000000))*(x701)))+(((x694)*(x700))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x698)*(x703)))+(((IkReal(-1.00000000000000))*(x697)*(x703)))+(x702)+(x700)+(((IkReal(-1.00000000000000))*(x699))));
evalcond[3]=((((x694)*(x696)))+(((IkReal(0.550000000000000))*(x694)))+(((sj3)*(x704)))+(((IkReal(0.0450000000000000))*(x695)))+(((IkReal(-1.00000000000000))*(x698)))+(((x695)*(x700)))+(((IkReal(-1.00000000000000))*(x697)))+(((IkReal(-1.00000000000000))*(x695)*(x699))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((x698)*(x706)))+(((IkReal(1.10000000000000))*(x705)))+(((IkReal(-0.0900000000000000))*(x702)))+(((x698)*(x707)))+(((x697)*(x706)))+(((x697)*(x707))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x708=((px)*(sj0));
IkReal x709=((cj0)*(py));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j2, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x709)))+(x708));
evalcond[3]=((((IkReal(-1.00000000000000))*(x708)))+(x709));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst38;
IkReal x710=((IkReal(0.0450000000000000))*(pz));
IkReal x711=((IkReal(0.300000000000000))*(cj3));
IkReal x712=((cj0)*(px));
IkReal x713=((py)*(sj0));
IkReal x714=((IkReal(0.0450000000000000))*(sj3));
gconst38=IKsign(((((IkReal(-0.550000000000000))*(x712)))+(((IkReal(-1.00000000000000))*(x712)*(x714)))+(((IkReal(-1.00000000000000))*(x711)*(x713)))+(((IkReal(0.300000000000000))*(pz)*(sj3)))+(((IkReal(-0.550000000000000))*(x713)))+(((IkReal(-1.00000000000000))*(cj3)*(x710)))+(((IkReal(-1.00000000000000))*(x713)*(x714)))+(x710)+(((IkReal(-1.00000000000000))*(x711)*(x712)))));
IkReal x715=((cj0)*(px));
IkReal x716=((IkReal(6.66666666666667))*(cj3));
IkReal x717=((py)*(sj0));
IkReal x718=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x716)*(x717)))+(((IkReal(-1.00000000000000))*(x715)*(x718)))+(((IkReal(-12.2222222222222))*(x717)))+(((IkReal(-12.2222222222222))*(x715)))+(((IkReal(6.66666666666667))*(pz)*(sj3)))+(((IkReal(-1.00000000000000))*(x715)*(x716)))+(pz)+(((IkReal(-1.00000000000000))*(x717)*(x718)))+(((IkReal(-1.00000000000000))*(cj3)*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst39;
gconst39=IKsign((((((py)*(py))*((sj0)*(sj0))))+((((cj0)*(cj0))*((px)*(px))))+((pz)*(pz))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0)))));
dummyeval[0]=(((((py)*(py))*((sj0)*(sj0))))+((((cj0)*(cj0))*((px)*(px))))+((pz)*(pz))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x719=((IkReal(0.0450000000000000))*(pz));
IkReal x720=((py)*(sj0));
IkReal x721=((IkReal(0.300000000000000))*(sj3));
IkReal x722=((cj0)*(px));
IkReal x723=((IkReal(0.0450000000000000))*(sj3));
IkReal x724=((IkReal(0.300000000000000))*(x722));
IkReal x725=((cj3)*(x720));
if( IKabs(((gconst39)*(((((x720)*(x723)))+(((IkReal(-1.00000000000000))*(cj3)*(x719)))+(((IkReal(0.550000000000000))*(x720)))+(((x722)*(x723)))+(((IkReal(0.550000000000000))*(x722)))+(((pz)*(x721)))+(((IkReal(0.300000000000000))*(x725)))+(x719)+(((cj3)*(x724))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst39)*(((((IkReal(0.300000000000000))*(cj3)*(pz)))+(((IkReal(-0.0450000000000000))*(x722)))+(((IkReal(-0.0450000000000000))*(x720)))+(((IkReal(-1.00000000000000))*(x720)*(x721)))+(((IkReal(0.0450000000000000))*(cj3)*(x722)))+(((IkReal(0.550000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x721)*(x722)))+(((IkReal(0.0450000000000000))*(x725)))+(((sj3)*(x719))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst39)*(((((x720)*(x723)))+(((IkReal(-1.00000000000000))*(cj3)*(x719)))+(((IkReal(0.550000000000000))*(x720)))+(((x722)*(x723)))+(((IkReal(0.550000000000000))*(x722)))+(((pz)*(x721)))+(((IkReal(0.300000000000000))*(x725)))+(x719)+(((cj3)*(x724)))))), ((gconst39)*(((((IkReal(0.300000000000000))*(cj3)*(pz)))+(((IkReal(-0.0450000000000000))*(x722)))+(((IkReal(-0.0450000000000000))*(x720)))+(((IkReal(-1.00000000000000))*(x720)*(x721)))+(((IkReal(0.0450000000000000))*(cj3)*(x722)))+(((IkReal(0.550000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x721)*(x722)))+(((IkReal(0.0450000000000000))*(x725)))+(((sj3)*(x719)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x726=IKsin(j1);
IkReal x727=IKcos(j1);
IkReal x728=((IkReal(0.300000000000000))*(cj3));
IkReal x729=((cj0)*(px));
IkReal x730=((py)*(sj0));
IkReal x731=((IkReal(0.0450000000000000))*(cj3));
IkReal x732=((IkReal(0.300000000000000))*(sj3));
IkReal x733=((sj3)*(x727));
IkReal x734=((pz)*(x726));
IkReal x735=((IkReal(0.0450000000000000))*(x726));
IkReal x736=((IkReal(1.10000000000000))*(x726));
IkReal x737=((pz)*(x727));
IkReal x738=((IkReal(0.0900000000000000))*(x727));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((x726)*(x729)))+(x737)+(((x726)*(x730)))+(((IkReal(-1.00000000000000))*(x728))));
evalcond[1]=((((IkReal(-0.550000000000000))*(x727)))+(((IkReal(-0.0450000000000000))*(x733)))+(pz)+(((IkReal(-1.00000000000000))*(x727)*(x728)))+(((IkReal(-1.00000000000000))*(x735)))+(((IkReal(-1.00000000000000))*(x726)*(x732)))+(((x726)*(x731))));
evalcond[2]=((IkReal(0.0450000000000000))+(((x727)*(x729)))+(x732)+(((IkReal(-1.00000000000000))*(x734)))+(((IkReal(-1.00000000000000))*(x731)))+(((x727)*(x730))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x727)*(x732)))+(((IkReal(-0.0450000000000000))*(x727)))+(((x726)*(x728)))+(((IkReal(0.550000000000000))*(x726)))+(((IkReal(-1.00000000000000))*(x730)))+(((x727)*(x731)))+(((sj3)*(x735)))+(((IkReal(-1.00000000000000))*(x729))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x734)))+(((IkReal(-1.00000000000000))*(x730)*(x738)))+(((IkReal(-1.00000000000000))*(pp)))+(((x730)*(x736)))+(((IkReal(1.10000000000000))*(x737)))+(((IkReal(-1.00000000000000))*(x729)*(x738)))+(((x729)*(x736))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x739=(sj3)*(sj3);
IkReal x740=(cj3)*(cj3);
IkReal x741=((cj3)*(sj3));
IkReal x742=((IkReal(1.00000000000000))*(pz));
if( IKabs(((gconst38)*(((IkReal(-0.302500000000000))+(((IkReal(-0.330000000000000))*(cj3)))+(((IkReal(-0.00202500000000000))*(x739)))+((pz)*(pz))+(((IkReal(-0.0900000000000000))*(x740)))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.0270000000000000))*(x741))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst38)*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(0.0135000000000000))*(x739)))+(((IkReal(0.0879750000000000))*(x741)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x742)))+(((IkReal(-0.0135000000000000))*(x740)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x742)))+(((IkReal(0.167025000000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst38)*(((IkReal(-0.302500000000000))+(((IkReal(-0.330000000000000))*(cj3)))+(((IkReal(-0.00202500000000000))*(x739)))+((pz)*(pz))+(((IkReal(-0.0900000000000000))*(x740)))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.0270000000000000))*(x741)))))), ((gconst38)*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(0.0135000000000000))*(x739)))+(((IkReal(0.0879750000000000))*(x741)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x742)))+(((IkReal(-0.0135000000000000))*(x740)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x742)))+(((IkReal(0.167025000000000))*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x743=IKsin(j1);
IkReal x744=IKcos(j1);
IkReal x745=((IkReal(0.300000000000000))*(cj3));
IkReal x746=((cj0)*(px));
IkReal x747=((py)*(sj0));
IkReal x748=((IkReal(0.0450000000000000))*(cj3));
IkReal x749=((IkReal(0.300000000000000))*(sj3));
IkReal x750=((sj3)*(x744));
IkReal x751=((pz)*(x743));
IkReal x752=((IkReal(0.0450000000000000))*(x743));
IkReal x753=((IkReal(1.10000000000000))*(x743));
IkReal x754=((pz)*(x744));
IkReal x755=((IkReal(0.0900000000000000))*(x744));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x745)))+(((x743)*(x747)))+(x754)+(((x743)*(x746))));
evalcond[1]=((((IkReal(-0.550000000000000))*(x744)))+(((IkReal(-0.0450000000000000))*(x750)))+(((IkReal(-1.00000000000000))*(x752)))+(((IkReal(-1.00000000000000))*(x743)*(x749)))+(pz)+(((x743)*(x748)))+(((IkReal(-1.00000000000000))*(x744)*(x745))));
evalcond[2]=((IkReal(0.0450000000000000))+(x749)+(((IkReal(-1.00000000000000))*(x751)))+(((IkReal(-1.00000000000000))*(x748)))+(((x744)*(x747)))+(((x744)*(x746))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x746)))+(((IkReal(-1.00000000000000))*(x747)))+(((x743)*(x745)))+(((sj3)*(x752)))+(((IkReal(0.550000000000000))*(x743)))+(((IkReal(-1.00000000000000))*(x744)*(x749)))+(((x744)*(x748)))+(((IkReal(-0.0450000000000000))*(x744))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x746)*(x755)))+(((IkReal(1.10000000000000))*(x754)))+(((IkReal(-1.00000000000000))*(x747)*(x755)))+(((x747)*(x753)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x751)))+(((x746)*(x753))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x756=((cj2)*(pz));
IkReal x757=((IkReal(1.00000000000000))*(cj0));
IkReal x758=((pz)*(sj2));
IkReal x759=((IkReal(0.0450000000000000))*(sj3));
IkReal x760=((IkReal(0.550000000000000))*(sj2));
IkReal x761=((py)*(sj0));
IkReal x762=((IkReal(0.300000000000000))*(cj3));
IkReal x763=((cj2)*(sj0));
IkReal x764=((cj2)*(px)*(py));
IkReal x765=((cj0)*(px)*(sj2));
if( IKabs(((gconst35)*(((((sj2)*(x761)*(x762)))+(((IkReal(-1.00000000000000))*(py)*(x756)*(x757)))+(((px)*(sj0)*(x756)))+(((cj0)*(px)*(x760)))+(((x762)*(x765)))+(((sj2)*(x759)*(x761)))+(((x760)*(x761)))+(((x759)*(x765))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst35)*(((((cj0)*(cj2)*(py)*(x761)))+(((x764)*((cj0)*(cj0))))+(((IkReal(-1.00000000000000))*(x757)*(x763)*((px)*(px))))+(((x758)*(x762)))+(((IkReal(-1.00000000000000))*(px)*(x761)*(x763)))+(((x758)*(x759)))+(((IkReal(0.550000000000000))*(x758))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst35)*(((((sj2)*(x761)*(x762)))+(((IkReal(-1.00000000000000))*(py)*(x756)*(x757)))+(((px)*(sj0)*(x756)))+(((cj0)*(px)*(x760)))+(((x762)*(x765)))+(((sj2)*(x759)*(x761)))+(((x760)*(x761)))+(((x759)*(x765)))))), ((gconst35)*(((((cj0)*(cj2)*(py)*(x761)))+(((x764)*((cj0)*(cj0))))+(((IkReal(-1.00000000000000))*(x757)*(x763)*((px)*(px))))+(((x758)*(x762)))+(((IkReal(-1.00000000000000))*(px)*(x761)*(x763)))+(((x758)*(x759)))+(((IkReal(0.550000000000000))*(x758)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x766=IKsin(j1);
IkReal x767=IKcos(j1);
IkReal x768=((px)*(sj2));
IkReal x769=((IkReal(0.300000000000000))*(cj3));
IkReal x770=((IkReal(0.0900000000000000))*(cj2));
IkReal x771=((IkReal(0.0450000000000000))*(cj2));
IkReal x772=((IkReal(0.0450000000000000))*(sj3));
IkReal x773=((py)*(sj0));
IkReal x774=((cj0)*(px));
IkReal x775=((IkReal(1.00000000000000))*(cj2));
IkReal x776=((cj0)*(x767));
IkReal x777=((IkReal(1.00000000000000))*(cj0)*(py));
IkReal x778=((IkReal(1.10000000000000))*(x766));
IkReal x779=((pz)*(x767));
IkReal x780=((pz)*(x766));
IkReal x781=((IkReal(0.300000000000000))*(cj2)*(sj3));
IkReal x782=((x767)*(x773));
evalcond[0]=((IkReal(-0.550000000000000))+(((x766)*(x774)))+(((IkReal(-1.00000000000000))*(x769)))+(((x766)*(x773)))+(x779)+(((IkReal(-1.00000000000000))*(x772))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj2)*(x780)))+(((x768)*(x776)))+(((sj2)*(x782)))+(((IkReal(-1.00000000000000))*(cj0)*(py)*(x775)))+(((cj2)*(px)*(sj0))));
evalcond[2]=((((x766)*(x781)))+(((IkReal(-1.00000000000000))*(cj3)*(x766)*(x771)))+(pz)+(((IkReal(-0.550000000000000))*(x767)))+(((IkReal(-1.00000000000000))*(x767)*(x772)))+(((IkReal(-1.00000000000000))*(x767)*(x769)))+(((x766)*(x771))));
evalcond[3]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x775)*(x782)))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-0.0450000000000000))*(cj3)))+(((cj2)*(x780)))+(((IkReal(-1.00000000000000))*(x767)*(x774)*(x775)))+(((IkReal(-1.00000000000000))*(sj2)*(x777)))+(((sj0)*(x768))));
evalcond[4]=((((x766)*(x772)))+(((IkReal(-1.00000000000000))*(x773)))+(((IkReal(-1.00000000000000))*(x774)))+(((x766)*(x769)))+(((x767)*(x781)))+(((x767)*(x771)))+(((IkReal(-1.00000000000000))*(cj3)*(x767)*(x771)))+(((IkReal(0.550000000000000))*(x766))));
evalcond[5]=((IkReal(-0.212500000000000))+(((x774)*(x778)))+(((IkReal(-0.0900000000000000))*(sj0)*(x768)))+(((IkReal(0.0900000000000000))*(cj0)*(py)*(sj2)))+(((IkReal(1.10000000000000))*(x779)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x770)*(x780)))+(((x770)*(x782)))+(((x767)*(x770)*(x774)))+(((x773)*(x778))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x783=(cj3)*(cj3);
IkReal x784=(sj3)*(sj3);
IkReal x785=((cj2)*(cj3));
IkReal x786=((IkReal(0.0135000000000000))*(cj2));
IkReal x787=((IkReal(1.00000000000000))*(pz));
if( IKabs(((gconst34)*(((IkReal(-0.302500000000000))+(((IkReal(-0.330000000000000))*(cj3)))+(((IkReal(-0.0900000000000000))*(x783)))+(((IkReal(-0.00202500000000000))*(x784)))+((pz)*(pz))+(((IkReal(-0.0270000000000000))*(cj3)*(sj3)))+(((IkReal(-0.0495000000000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst34)*(((((IkReal(-1.00000000000000))*(x784)*(x786)))+(((x783)*(x786)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x787)))+(((IkReal(-0.0247500000000000))*(cj2)))+(((IkReal(-0.167025000000000))*(cj2)*(sj3)))+(((IkReal(-0.0879750000000000))*(sj3)*(x785)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x787)))+(((IkReal(0.0112500000000000))*(x785))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst34)*(((IkReal(-0.302500000000000))+(((IkReal(-0.330000000000000))*(cj3)))+(((IkReal(-0.0900000000000000))*(x783)))+(((IkReal(-0.00202500000000000))*(x784)))+((pz)*(pz))+(((IkReal(-0.0270000000000000))*(cj3)*(sj3)))+(((IkReal(-0.0495000000000000))*(sj3)))))), ((gconst34)*(((((IkReal(-1.00000000000000))*(x784)*(x786)))+(((x783)*(x786)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x787)))+(((IkReal(-0.0247500000000000))*(cj2)))+(((IkReal(-0.167025000000000))*(cj2)*(sj3)))+(((IkReal(-0.0879750000000000))*(sj3)*(x785)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x787)))+(((IkReal(0.0112500000000000))*(x785)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x788=IKsin(j1);
IkReal x789=IKcos(j1);
IkReal x790=((px)*(sj2));
IkReal x791=((IkReal(0.300000000000000))*(cj3));
IkReal x792=((IkReal(0.0900000000000000))*(cj2));
IkReal x793=((IkReal(0.0450000000000000))*(cj2));
IkReal x794=((IkReal(0.0450000000000000))*(sj3));
IkReal x795=((py)*(sj0));
IkReal x796=((cj0)*(px));
IkReal x797=((IkReal(1.00000000000000))*(cj2));
IkReal x798=((cj0)*(x789));
IkReal x799=((IkReal(1.00000000000000))*(cj0)*(py));
IkReal x800=((IkReal(1.10000000000000))*(x788));
IkReal x801=((pz)*(x789));
IkReal x802=((pz)*(x788));
IkReal x803=((IkReal(0.300000000000000))*(cj2)*(sj3));
IkReal x804=((x789)*(x795));
evalcond[0]=((IkReal(-0.550000000000000))+(x801)+(((IkReal(-1.00000000000000))*(x794)))+(((x788)*(x795)))+(((x788)*(x796)))+(((IkReal(-1.00000000000000))*(x791))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj0)*(py)*(x797)))+(((IkReal(-1.00000000000000))*(sj2)*(x802)))+(((sj2)*(x804)))+(((cj2)*(px)*(sj0)))+(((x790)*(x798))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj3)*(x788)*(x793)))+(((x788)*(x803)))+(((IkReal(-1.00000000000000))*(x789)*(x794)))+(((IkReal(-1.00000000000000))*(x789)*(x791)))+(((x788)*(x793)))+(((IkReal(-0.550000000000000))*(x789)))+(pz));
evalcond[3]=((IkReal(0.0450000000000000))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x797)*(x804)))+(((IkReal(-1.00000000000000))*(x789)*(x796)*(x797)))+(((IkReal(-0.0450000000000000))*(cj3)))+(((sj0)*(x790)))+(((cj2)*(x802)))+(((IkReal(-1.00000000000000))*(sj2)*(x799))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj3)*(x789)*(x793)))+(((IkReal(0.550000000000000))*(x788)))+(((x788)*(x791)))+(((IkReal(-1.00000000000000))*(x796)))+(((x789)*(x803)))+(((x788)*(x794)))+(((x789)*(x793)))+(((IkReal(-1.00000000000000))*(x795))));
evalcond[5]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x792)*(x802)))+(((IkReal(1.10000000000000))*(x801)))+(((IkReal(0.0900000000000000))*(cj0)*(py)*(sj2)))+(((IkReal(-0.0900000000000000))*(sj0)*(x790)))+(((x792)*(x804)))+(((IkReal(-1.00000000000000))*(pp)))+(((x795)*(x800)))+(((x796)*(x800)))+(((x789)*(x792)*(x796))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x805=((IkReal(0.0450000000000000))*(sj2));
if( IKabs(((IkReal(-1.00000000000000))*(py))) < IKFAST_ATAN2_MAGTHRESH && IKabs(px) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x806=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-1.00000000000000))*(py)), px)));
if( ((((px)*(px))+((py)*(py)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(0.300000000000000))*(sj2)*(sj3)))+(x805)+(((IkReal(-1.00000000000000))*(cj3)*(x805))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(0.300000000000000))*(sj2)*(sj3)))+(x805)+(((IkReal(-1.00000000000000))*(cj3)*(x805))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x807=IKasin(((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(0.300000000000000))*(sj2)*(sj3)))+(x805)+(((IkReal(-1.00000000000000))*(cj3)*(x805)))))));
j0array[0]=((((IkReal(-1.00000000000000))*(x806)))+(((IkReal(-1.00000000000000))*(x807))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(x807)+(((IkReal(-1.00000000000000))*(x806))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal dummyeval[1];
IkReal gconst34;
IkReal x808=((cj2)*(pz));
IkReal x809=((py)*(sj0));
IkReal x810=((IkReal(0.300000000000000))*(cj3));
IkReal x811=((IkReal(0.0450000000000000))*(sj3));
IkReal x812=((cj0)*(px));
gconst34=IKsign(((((IkReal(-0.300000000000000))*(sj3)*(x808)))+(((IkReal(-0.550000000000000))*(x812)))+(((IkReal(-0.550000000000000))*(x809)))+(((IkReal(-1.00000000000000))*(x809)*(x810)))+(((IkReal(-1.00000000000000))*(x810)*(x812)))+(((IkReal(-1.00000000000000))*(x811)*(x812)))+(((IkReal(-0.0450000000000000))*(x808)))+(((IkReal(-1.00000000000000))*(x809)*(x811)))+(((IkReal(0.0450000000000000))*(cj3)*(x808)))));
IkReal x813=((cj0)*(px));
IkReal x814=((IkReal(6.66666666666667))*(cj3));
IkReal x815=((py)*(sj0));
IkReal x816=((cj2)*(pz));
IkReal x817=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-12.2222222222222))*(x815)))+(((IkReal(-6.66666666666667))*(sj3)*(x816)))+(((IkReal(-1.00000000000000))*(x813)*(x814)))+(((cj3)*(x816)))+(((IkReal(-1.00000000000000))*(x813)*(x817)))+(((IkReal(-1.00000000000000))*(x814)*(x815)))+(((IkReal(-1.00000000000000))*(x815)*(x817)))+(((IkReal(-1.00000000000000))*(x816)))+(((IkReal(-12.2222222222222))*(x813))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst35;
gconst35=IKsign(((((sj2)*((py)*(py))*((sj0)*(sj0))))+(((sj2)*((pz)*(pz))))+(((sj2)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0)*(sj2)))));
dummyeval[0]=((((sj2)*((py)*(py))*((sj0)*(sj0))))+(((sj2)*((pz)*(pz))))+(((sj2)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0)*(sj2))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x818=((((IkReal(-1.00000000000000))*(cj0)*(py)))+(((px)*(sj0))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x818;
evalcond[3]=x818;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst36;
IkReal x819=((IkReal(0.0450000000000000))*(pz));
IkReal x820=((IkReal(0.300000000000000))*(cj3));
IkReal x821=((cj0)*(px));
IkReal x822=((py)*(sj0));
IkReal x823=((IkReal(0.0450000000000000))*(sj3));
gconst36=IKsign(((((IkReal(-1.00000000000000))*(x820)*(x822)))+(((IkReal(-1.00000000000000))*(x822)*(x823)))+(((IkReal(-0.550000000000000))*(x822)))+(((IkReal(-0.550000000000000))*(x821)))+(((cj3)*(x819)))+(((IkReal(-1.00000000000000))*(x819)))+(((IkReal(-0.300000000000000))*(pz)*(sj3)))+(((IkReal(-1.00000000000000))*(x821)*(x823)))+(((IkReal(-1.00000000000000))*(x820)*(x821)))));
IkReal x824=((cj0)*(px));
IkReal x825=((IkReal(6.66666666666667))*(cj3));
IkReal x826=((py)*(sj0));
IkReal x827=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x825)*(x826)))+(((IkReal(-1.00000000000000))*(x826)*(x827)))+(((IkReal(-1.00000000000000))*(pz)))+(((cj3)*(pz)))+(((IkReal(-1.00000000000000))*(x824)*(x827)))+(((IkReal(-12.2222222222222))*(x824)))+(((IkReal(-6.66666666666667))*(pz)*(sj3)))+(((IkReal(-12.2222222222222))*(x826)))+(((IkReal(-1.00000000000000))*(x824)*(x825))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst37;
gconst37=IKsign(((((IkReal(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-1.00000000000000))*((cj0)*(cj0))*((px)*(px))))));
dummyeval[0]=((((IkReal(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*((py)*(py))*((sj0)*(sj0))))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-1.00000000000000))*((cj0)*(cj0))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x828=((cj0)*(px));
IkReal x829=((IkReal(0.300000000000000))*(sj3));
IkReal x830=((IkReal(0.0450000000000000))*(pz));
IkReal x831=((IkReal(0.0450000000000000))*(cj3));
IkReal x832=((py)*(sj0));
IkReal x833=((IkReal(0.300000000000000))*(cj3));
IkReal x834=((IkReal(0.0450000000000000))*(sj3));
if( IKabs(((gconst37)*(((((pz)*(x829)))+(((IkReal(-0.550000000000000))*(x828)))+(((IkReal(-1.00000000000000))*(x832)*(x834)))+(((IkReal(-0.550000000000000))*(x832)))+(x830)+(((IkReal(-1.00000000000000))*(x832)*(x833)))+(((IkReal(-1.00000000000000))*(x828)*(x834)))+(((IkReal(-1.00000000000000))*(cj3)*(x830)))+(((IkReal(-1.00000000000000))*(x828)*(x833))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst37)*(((((IkReal(-1.00000000000000))*(x828)*(x829)))+(((IkReal(-1.00000000000000))*(pz)*(x833)))+(((IkReal(-1.00000000000000))*(x829)*(x832)))+(((IkReal(-1.00000000000000))*(sj3)*(x830)))+(((IkReal(-0.550000000000000))*(pz)))+(((x831)*(x832)))+(((x828)*(x831)))+(((IkReal(-0.0450000000000000))*(x828)))+(((IkReal(-0.0450000000000000))*(x832))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst37)*(((((pz)*(x829)))+(((IkReal(-0.550000000000000))*(x828)))+(((IkReal(-1.00000000000000))*(x832)*(x834)))+(((IkReal(-0.550000000000000))*(x832)))+(x830)+(((IkReal(-1.00000000000000))*(x832)*(x833)))+(((IkReal(-1.00000000000000))*(x828)*(x834)))+(((IkReal(-1.00000000000000))*(cj3)*(x830)))+(((IkReal(-1.00000000000000))*(x828)*(x833)))))), ((gconst37)*(((((IkReal(-1.00000000000000))*(x828)*(x829)))+(((IkReal(-1.00000000000000))*(pz)*(x833)))+(((IkReal(-1.00000000000000))*(x829)*(x832)))+(((IkReal(-1.00000000000000))*(sj3)*(x830)))+(((IkReal(-0.550000000000000))*(pz)))+(((x831)*(x832)))+(((x828)*(x831)))+(((IkReal(-0.0450000000000000))*(x828)))+(((IkReal(-0.0450000000000000))*(x832)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x835=IKsin(j1);
IkReal x836=IKcos(j1);
IkReal x837=((IkReal(0.300000000000000))*(cj3));
IkReal x838=((cj0)*(px));
IkReal x839=((py)*(sj0));
IkReal x840=((IkReal(0.0450000000000000))*(cj3));
IkReal x841=((IkReal(0.300000000000000))*(sj3));
IkReal x842=((sj3)*(x836));
IkReal x843=((pz)*(x835));
IkReal x844=((IkReal(1.00000000000000))*(x836));
IkReal x845=((IkReal(0.0450000000000000))*(x835));
IkReal x846=((pz)*(x836));
IkReal x847=((IkReal(0.0900000000000000))*(x836));
IkReal x848=((IkReal(1.10000000000000))*(x835));
evalcond[0]=((IkReal(-0.550000000000000))+(((x835)*(x838)))+(((IkReal(-0.0450000000000000))*(sj3)))+(((x835)*(x839)))+(x846)+(((IkReal(-1.00000000000000))*(x837))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x836)*(x837)))+(((IkReal(-1.00000000000000))*(x835)*(x840)))+(((IkReal(-0.0450000000000000))*(x842)))+(x845)+(((IkReal(-0.550000000000000))*(x836)))+(pz)+(((x835)*(x841))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x840)))+(((IkReal(-1.00000000000000))*(x838)*(x844)))+(x841)+(x843)+(((IkReal(-1.00000000000000))*(x839)*(x844))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x839)))+(((IkReal(-1.00000000000000))*(x838)))+(((IkReal(-1.00000000000000))*(x836)*(x840)))+(((sj3)*(x845)))+(((x835)*(x837)))+(((IkReal(0.0450000000000000))*(x836)))+(((x836)*(x841)))+(((IkReal(0.550000000000000))*(x835))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x843)))+(((IkReal(-1.00000000000000))*(pp)))+(((x838)*(x847)))+(((x838)*(x848)))+(((x839)*(x848)))+(((x839)*(x847)))+(((IkReal(1.10000000000000))*(x846))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x849=(cj3)*(cj3);
IkReal x850=(sj3)*(sj3);
IkReal x851=((cj3)*(sj3));
IkReal x852=((IkReal(1.00000000000000))*(pz));
if( IKabs(((gconst36)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0270000000000000))*(x851)))+(((IkReal(-0.330000000000000))*(cj3)))+((pz)*(pz))+(((IkReal(-0.00202500000000000))*(x850)))+(((IkReal(-0.0900000000000000))*(x849)))+(((IkReal(-0.0495000000000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst36)*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x852)))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(-0.0879750000000000))*(x851)))+(((IkReal(0.0135000000000000))*(x849)))+(((IkReal(-0.0135000000000000))*(x850)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x852))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst36)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0270000000000000))*(x851)))+(((IkReal(-0.330000000000000))*(cj3)))+((pz)*(pz))+(((IkReal(-0.00202500000000000))*(x850)))+(((IkReal(-0.0900000000000000))*(x849)))+(((IkReal(-0.0495000000000000))*(sj3)))))), ((gconst36)*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x852)))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(-0.0879750000000000))*(x851)))+(((IkReal(0.0135000000000000))*(x849)))+(((IkReal(-0.0135000000000000))*(x850)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x852)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x853=IKsin(j1);
IkReal x854=IKcos(j1);
IkReal x855=((IkReal(0.300000000000000))*(cj3));
IkReal x856=((cj0)*(px));
IkReal x857=((py)*(sj0));
IkReal x858=((IkReal(0.0450000000000000))*(cj3));
IkReal x859=((IkReal(0.300000000000000))*(sj3));
IkReal x860=((sj3)*(x854));
IkReal x861=((pz)*(x853));
IkReal x862=((IkReal(1.00000000000000))*(x854));
IkReal x863=((IkReal(0.0450000000000000))*(x853));
IkReal x864=((pz)*(x854));
IkReal x865=((IkReal(0.0900000000000000))*(x854));
IkReal x866=((IkReal(1.10000000000000))*(x853));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(x864)+(((x853)*(x857)))+(((IkReal(-1.00000000000000))*(x855)))+(((x853)*(x856))));
evalcond[1]=((((IkReal(-0.550000000000000))*(x854)))+(((x853)*(x859)))+(x863)+(pz)+(((IkReal(-1.00000000000000))*(x853)*(x858)))+(((IkReal(-1.00000000000000))*(x854)*(x855)))+(((IkReal(-0.0450000000000000))*(x860))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x856)*(x862)))+(((IkReal(-1.00000000000000))*(x857)*(x862)))+(x861)+(x859)+(((IkReal(-1.00000000000000))*(x858))));
evalcond[3]=((((sj3)*(x863)))+(((x854)*(x859)))+(((IkReal(0.550000000000000))*(x853)))+(((IkReal(0.0450000000000000))*(x854)))+(((IkReal(-1.00000000000000))*(x857)))+(((IkReal(-1.00000000000000))*(x856)))+(((x853)*(x855)))+(((IkReal(-1.00000000000000))*(x854)*(x858))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x864)))+(((x857)*(x865)))+(((IkReal(-0.0900000000000000))*(x861)))+(((IkReal(-1.00000000000000))*(pp)))+(((x856)*(x866)))+(((x856)*(x865)))+(((x857)*(x866))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x867=((px)*(sj0));
IkReal x868=((cj0)*(py));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j2, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x868)))+(x867));
evalcond[3]=((((IkReal(-1.00000000000000))*(x867)))+(x868));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst38;
IkReal x869=((IkReal(0.0450000000000000))*(pz));
IkReal x870=((IkReal(0.300000000000000))*(cj3));
IkReal x871=((cj0)*(px));
IkReal x872=((py)*(sj0));
IkReal x873=((IkReal(0.0450000000000000))*(sj3));
gconst38=IKsign(((((IkReal(-1.00000000000000))*(x870)*(x871)))+(((IkReal(-1.00000000000000))*(cj3)*(x869)))+(((IkReal(-0.550000000000000))*(x872)))+(((IkReal(-1.00000000000000))*(x871)*(x873)))+(x869)+(((IkReal(0.300000000000000))*(pz)*(sj3)))+(((IkReal(-1.00000000000000))*(x870)*(x872)))+(((IkReal(-1.00000000000000))*(x872)*(x873)))+(((IkReal(-0.550000000000000))*(x871)))));
IkReal x874=((cj0)*(px));
IkReal x875=((IkReal(6.66666666666667))*(cj3));
IkReal x876=((py)*(sj0));
IkReal x877=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x874)*(x877)))+(((IkReal(-12.2222222222222))*(x876)))+(((IkReal(-12.2222222222222))*(x874)))+(((IkReal(6.66666666666667))*(pz)*(sj3)))+(((IkReal(-1.00000000000000))*(x874)*(x875)))+(pz)+(((IkReal(-1.00000000000000))*(x875)*(x876)))+(((IkReal(-1.00000000000000))*(x876)*(x877)))+(((IkReal(-1.00000000000000))*(cj3)*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst39;
gconst39=IKsign((((((py)*(py))*((sj0)*(sj0))))+((((cj0)*(cj0))*((px)*(px))))+((pz)*(pz))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0)))));
dummyeval[0]=(((((py)*(py))*((sj0)*(sj0))))+((((cj0)*(cj0))*((px)*(px))))+((pz)*(pz))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x878=((IkReal(0.0450000000000000))*(pz));
IkReal x879=((py)*(sj0));
IkReal x880=((IkReal(0.300000000000000))*(sj3));
IkReal x881=((cj0)*(px));
IkReal x882=((IkReal(0.0450000000000000))*(sj3));
IkReal x883=((IkReal(0.300000000000000))*(x881));
IkReal x884=((cj3)*(x879));
if( IKabs(((gconst39)*(((((cj3)*(x883)))+(((IkReal(0.550000000000000))*(x879)))+(((x879)*(x882)))+(((IkReal(0.300000000000000))*(x884)))+(((pz)*(x880)))+(((IkReal(-1.00000000000000))*(cj3)*(x878)))+(x878)+(((IkReal(0.550000000000000))*(x881)))+(((x881)*(x882))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst39)*(((((IkReal(0.300000000000000))*(cj3)*(pz)))+(((IkReal(-0.0450000000000000))*(x879)))+(((IkReal(-1.00000000000000))*(x879)*(x880)))+(((IkReal(0.550000000000000))*(pz)))+(((sj3)*(x878)))+(((IkReal(0.0450000000000000))*(cj3)*(x881)))+(((IkReal(-0.0450000000000000))*(x881)))+(((IkReal(0.0450000000000000))*(x884)))+(((IkReal(-1.00000000000000))*(x880)*(x881))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst39)*(((((cj3)*(x883)))+(((IkReal(0.550000000000000))*(x879)))+(((x879)*(x882)))+(((IkReal(0.300000000000000))*(x884)))+(((pz)*(x880)))+(((IkReal(-1.00000000000000))*(cj3)*(x878)))+(x878)+(((IkReal(0.550000000000000))*(x881)))+(((x881)*(x882)))))), ((gconst39)*(((((IkReal(0.300000000000000))*(cj3)*(pz)))+(((IkReal(-0.0450000000000000))*(x879)))+(((IkReal(-1.00000000000000))*(x879)*(x880)))+(((IkReal(0.550000000000000))*(pz)))+(((sj3)*(x878)))+(((IkReal(0.0450000000000000))*(cj3)*(x881)))+(((IkReal(-0.0450000000000000))*(x881)))+(((IkReal(0.0450000000000000))*(x884)))+(((IkReal(-1.00000000000000))*(x880)*(x881)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x885=IKsin(j1);
IkReal x886=IKcos(j1);
IkReal x887=((IkReal(0.300000000000000))*(cj3));
IkReal x888=((cj0)*(px));
IkReal x889=((py)*(sj0));
IkReal x890=((IkReal(0.0450000000000000))*(cj3));
IkReal x891=((IkReal(0.300000000000000))*(sj3));
IkReal x892=((sj3)*(x886));
IkReal x893=((pz)*(x885));
IkReal x894=((IkReal(0.0450000000000000))*(x885));
IkReal x895=((IkReal(1.10000000000000))*(x885));
IkReal x896=((pz)*(x886));
IkReal x897=((IkReal(0.0900000000000000))*(x886));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((x885)*(x888)))+(((x885)*(x889)))+(((IkReal(-1.00000000000000))*(x887)))+(x896));
evalcond[1]=((((IkReal(-1.00000000000000))*(x885)*(x891)))+(((IkReal(-0.550000000000000))*(x886)))+(((IkReal(-1.00000000000000))*(x894)))+(((IkReal(-1.00000000000000))*(x886)*(x887)))+(((x885)*(x890)))+(pz)+(((IkReal(-0.0450000000000000))*(x892))));
evalcond[2]=((IkReal(0.0450000000000000))+(((x886)*(x889)))+(((IkReal(-1.00000000000000))*(x890)))+(((IkReal(-1.00000000000000))*(x893)))+(x891)+(((x886)*(x888))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x888)))+(((IkReal(-1.00000000000000))*(x889)))+(((sj3)*(x894)))+(((x885)*(x887)))+(((IkReal(-1.00000000000000))*(x886)*(x891)))+(((x886)*(x890)))+(((IkReal(-0.0450000000000000))*(x886)))+(((IkReal(0.550000000000000))*(x885))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x888)*(x897)))+(((x888)*(x895)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x893)))+(((x889)*(x895)))+(((IkReal(1.10000000000000))*(x896)))+(((IkReal(-1.00000000000000))*(x889)*(x897))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x898=(sj3)*(sj3);
IkReal x899=(cj3)*(cj3);
IkReal x900=((cj3)*(sj3));
IkReal x901=((IkReal(1.00000000000000))*(pz));
if( IKabs(((gconst38)*(((IkReal(-0.302500000000000))+(((IkReal(-0.330000000000000))*(cj3)))+(((IkReal(-0.0270000000000000))*(x900)))+((pz)*(pz))+(((IkReal(-0.0900000000000000))*(x899)))+(((IkReal(-0.00202500000000000))*(x898)))+(((IkReal(-0.0495000000000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst38)*(((IkReal(0.0247500000000000))+(((IkReal(0.0135000000000000))*(x898)))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(0.0879750000000000))*(x900)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x901)))+(((IkReal(-0.0135000000000000))*(x899)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x901))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst38)*(((IkReal(-0.302500000000000))+(((IkReal(-0.330000000000000))*(cj3)))+(((IkReal(-0.0270000000000000))*(x900)))+((pz)*(pz))+(((IkReal(-0.0900000000000000))*(x899)))+(((IkReal(-0.00202500000000000))*(x898)))+(((IkReal(-0.0495000000000000))*(sj3)))))), ((gconst38)*(((IkReal(0.0247500000000000))+(((IkReal(0.0135000000000000))*(x898)))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(0.0879750000000000))*(x900)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x901)))+(((IkReal(-0.0135000000000000))*(x899)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x901)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x902=IKsin(j1);
IkReal x903=IKcos(j1);
IkReal x904=((IkReal(0.300000000000000))*(cj3));
IkReal x905=((cj0)*(px));
IkReal x906=((py)*(sj0));
IkReal x907=((IkReal(0.0450000000000000))*(cj3));
IkReal x908=((IkReal(0.300000000000000))*(sj3));
IkReal x909=((sj3)*(x903));
IkReal x910=((pz)*(x902));
IkReal x911=((IkReal(0.0450000000000000))*(x902));
IkReal x912=((IkReal(1.10000000000000))*(x902));
IkReal x913=((pz)*(x903));
IkReal x914=((IkReal(0.0900000000000000))*(x903));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((x902)*(x906)))+(((x902)*(x905)))+(x913)+(((IkReal(-1.00000000000000))*(x904))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x902)*(x908)))+(((IkReal(-1.00000000000000))*(x903)*(x904)))+(((IkReal(-1.00000000000000))*(x911)))+(((x902)*(x907)))+(pz)+(((IkReal(-0.0450000000000000))*(x909)))+(((IkReal(-0.550000000000000))*(x903))));
evalcond[2]=((IkReal(0.0450000000000000))+(((x903)*(x906)))+(((x903)*(x905)))+(((IkReal(-1.00000000000000))*(x907)))+(x908)+(((IkReal(-1.00000000000000))*(x910))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x906)))+(((sj3)*(x911)))+(((IkReal(-0.0450000000000000))*(x903)))+(((IkReal(-1.00000000000000))*(x905)))+(((x902)*(x904)))+(((x903)*(x907)))+(((IkReal(0.550000000000000))*(x902)))+(((IkReal(-1.00000000000000))*(x903)*(x908))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x906)*(x914)))+(((IkReal(-1.00000000000000))*(x905)*(x914)))+(((IkReal(1.10000000000000))*(x913)))+(((IkReal(-1.00000000000000))*(pp)))+(((x905)*(x912)))+(((x906)*(x912)))+(((IkReal(0.0900000000000000))*(x910))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x915=((cj2)*(pz));
IkReal x916=((IkReal(1.00000000000000))*(cj0));
IkReal x917=((pz)*(sj2));
IkReal x918=((IkReal(0.0450000000000000))*(sj3));
IkReal x919=((IkReal(0.550000000000000))*(sj2));
IkReal x920=((py)*(sj0));
IkReal x921=((IkReal(0.300000000000000))*(cj3));
IkReal x922=((cj2)*(sj0));
IkReal x923=((cj2)*(px)*(py));
IkReal x924=((cj0)*(px)*(sj2));
if( IKabs(((gconst35)*(((((cj0)*(px)*(x919)))+(((IkReal(-1.00000000000000))*(py)*(x915)*(x916)))+(((x918)*(x924)))+(((x921)*(x924)))+(((x919)*(x920)))+(((sj2)*(x918)*(x920)))+(((sj2)*(x920)*(x921)))+(((px)*(sj0)*(x915))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst35)*(((((IkReal(0.550000000000000))*(x917)))+(((x923)*((cj0)*(cj0))))+(((IkReal(-1.00000000000000))*(px)*(x920)*(x922)))+(((x917)*(x918)))+(((cj0)*(cj2)*(py)*(x920)))+(((x917)*(x921)))+(((IkReal(-1.00000000000000))*(x916)*(x922)*((px)*(px)))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst35)*(((((cj0)*(px)*(x919)))+(((IkReal(-1.00000000000000))*(py)*(x915)*(x916)))+(((x918)*(x924)))+(((x921)*(x924)))+(((x919)*(x920)))+(((sj2)*(x918)*(x920)))+(((sj2)*(x920)*(x921)))+(((px)*(sj0)*(x915)))))), ((gconst35)*(((((IkReal(0.550000000000000))*(x917)))+(((x923)*((cj0)*(cj0))))+(((IkReal(-1.00000000000000))*(px)*(x920)*(x922)))+(((x917)*(x918)))+(((cj0)*(cj2)*(py)*(x920)))+(((x917)*(x921)))+(((IkReal(-1.00000000000000))*(x916)*(x922)*((px)*(px))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x925=IKsin(j1);
IkReal x926=IKcos(j1);
IkReal x927=((px)*(sj2));
IkReal x928=((IkReal(0.300000000000000))*(cj3));
IkReal x929=((IkReal(0.0900000000000000))*(cj2));
IkReal x930=((IkReal(0.0450000000000000))*(cj2));
IkReal x931=((IkReal(0.0450000000000000))*(sj3));
IkReal x932=((py)*(sj0));
IkReal x933=((cj0)*(px));
IkReal x934=((IkReal(1.00000000000000))*(cj2));
IkReal x935=((cj0)*(x926));
IkReal x936=((IkReal(1.00000000000000))*(cj0)*(py));
IkReal x937=((IkReal(1.10000000000000))*(x925));
IkReal x938=((pz)*(x926));
IkReal x939=((pz)*(x925));
IkReal x940=((IkReal(0.300000000000000))*(cj2)*(sj3));
IkReal x941=((x926)*(x932));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x931)))+(((IkReal(-1.00000000000000))*(x928)))+(((x925)*(x932)))+(((x925)*(x933)))+(x938));
evalcond[1]=((((x927)*(x935)))+(((IkReal(-1.00000000000000))*(sj2)*(x939)))+(((IkReal(-1.00000000000000))*(cj0)*(py)*(x934)))+(((cj2)*(px)*(sj0)))+(((sj2)*(x941))));
evalcond[2]=((((IkReal(-0.550000000000000))*(x926)))+(((IkReal(-1.00000000000000))*(cj3)*(x925)*(x930)))+(((IkReal(-1.00000000000000))*(x926)*(x928)))+(((IkReal(-1.00000000000000))*(x926)*(x931)))+(((x925)*(x930)))+(pz)+(((x925)*(x940))));
evalcond[3]=((IkReal(0.0450000000000000))+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-0.0450000000000000))*(cj3)))+(((sj0)*(x927)))+(((cj2)*(x939)))+(((IkReal(-1.00000000000000))*(x926)*(x933)*(x934)))+(((IkReal(-1.00000000000000))*(sj2)*(x936)))+(((IkReal(-1.00000000000000))*(x934)*(x941))));
evalcond[4]=((((x925)*(x928)))+(((IkReal(-1.00000000000000))*(cj3)*(x926)*(x930)))+(((IkReal(-1.00000000000000))*(x933)))+(((IkReal(0.550000000000000))*(x925)))+(((x926)*(x940)))+(((x926)*(x930)))+(((x925)*(x931)))+(((IkReal(-1.00000000000000))*(x932))));
evalcond[5]=((IkReal(-0.212500000000000))+(((x932)*(x937)))+(((x929)*(x941)))+(((IkReal(0.0900000000000000))*(cj0)*(py)*(sj2)))+(((x933)*(x937)))+(((IkReal(1.10000000000000))*(x938)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x929)*(x939)))+(((x926)*(x929)*(x933)))+(((IkReal(-0.0900000000000000))*(sj0)*(x927))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x942=(cj3)*(cj3);
IkReal x943=(sj3)*(sj3);
IkReal x944=((cj2)*(cj3));
IkReal x945=((IkReal(0.0135000000000000))*(cj2));
IkReal x946=((IkReal(1.00000000000000))*(pz));
if( IKabs(((gconst34)*(((IkReal(-0.302500000000000))+(((IkReal(-0.330000000000000))*(cj3)))+(((IkReal(-0.0900000000000000))*(x942)))+((pz)*(pz))+(((IkReal(-0.0270000000000000))*(cj3)*(sj3)))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.00202500000000000))*(x943))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst34)*(((((IkReal(-0.0879750000000000))*(sj3)*(x944)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x946)))+(((IkReal(-0.0247500000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(x943)*(x945)))+(((IkReal(-0.167025000000000))*(cj2)*(sj3)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x946)))+(((IkReal(0.0112500000000000))*(x944)))+(((x942)*(x945))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst34)*(((IkReal(-0.302500000000000))+(((IkReal(-0.330000000000000))*(cj3)))+(((IkReal(-0.0900000000000000))*(x942)))+((pz)*(pz))+(((IkReal(-0.0270000000000000))*(cj3)*(sj3)))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.00202500000000000))*(x943)))))), ((gconst34)*(((((IkReal(-0.0879750000000000))*(sj3)*(x944)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x946)))+(((IkReal(-0.0247500000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(x943)*(x945)))+(((IkReal(-0.167025000000000))*(cj2)*(sj3)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x946)))+(((IkReal(0.0112500000000000))*(x944)))+(((x942)*(x945)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x947=IKsin(j1);
IkReal x948=IKcos(j1);
IkReal x949=((px)*(sj2));
IkReal x950=((IkReal(0.300000000000000))*(cj3));
IkReal x951=((IkReal(0.0900000000000000))*(cj2));
IkReal x952=((IkReal(0.0450000000000000))*(cj2));
IkReal x953=((IkReal(0.0450000000000000))*(sj3));
IkReal x954=((py)*(sj0));
IkReal x955=((cj0)*(px));
IkReal x956=((IkReal(1.00000000000000))*(cj2));
IkReal x957=((cj0)*(x948));
IkReal x958=((IkReal(1.00000000000000))*(cj0)*(py));
IkReal x959=((IkReal(1.10000000000000))*(x947));
IkReal x960=((pz)*(x948));
IkReal x961=((pz)*(x947));
IkReal x962=((IkReal(0.300000000000000))*(cj2)*(sj3));
IkReal x963=((x948)*(x954));
evalcond[0]=((IkReal(-0.550000000000000))+(((x947)*(x955)))+(((IkReal(-1.00000000000000))*(x953)))+(((x947)*(x954)))+(x960)+(((IkReal(-1.00000000000000))*(x950))));
evalcond[1]=((((cj2)*(px)*(sj0)))+(((x949)*(x957)))+(((IkReal(-1.00000000000000))*(sj2)*(x961)))+(((sj2)*(x963)))+(((IkReal(-1.00000000000000))*(cj0)*(py)*(x956))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj3)*(x947)*(x952)))+(((IkReal(-0.550000000000000))*(x948)))+(((x947)*(x962)))+(((IkReal(-1.00000000000000))*(x948)*(x953)))+(((IkReal(-1.00000000000000))*(x948)*(x950)))+(pz)+(((x947)*(x952))));
evalcond[3]=((IkReal(0.0450000000000000))+(((IkReal(0.300000000000000))*(sj3)))+(((sj0)*(x949)))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(sj2)*(x958)))+(((cj2)*(x961)))+(((IkReal(-1.00000000000000))*(x956)*(x963)))+(((IkReal(-1.00000000000000))*(x948)*(x955)*(x956))));
evalcond[4]=((((IkReal(0.550000000000000))*(x947)))+(((IkReal(-1.00000000000000))*(x955)))+(((IkReal(-1.00000000000000))*(cj3)*(x948)*(x952)))+(((x948)*(x952)))+(((x947)*(x950)))+(((IkReal(-1.00000000000000))*(x954)))+(((x947)*(x953)))+(((x948)*(x962))));
evalcond[5]=((IkReal(-0.212500000000000))+(((x955)*(x959)))+(((x948)*(x951)*(x955)))+(((x954)*(x959)))+(((IkReal(0.0900000000000000))*(cj0)*(py)*(sj2)))+(((IkReal(-1.00000000000000))*(x951)*(x961)))+(((IkReal(1.10000000000000))*(x960)))+(((IkReal(-1.00000000000000))*(pp)))+(((x951)*(x963)))+(((IkReal(-0.0900000000000000))*(sj0)*(x949))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x86=((IkReal(1.00000000000000))*(cj3));
IkReal x87=((sj0)*(sj2));
IkReal x88=((cj2)*(sj1));
IkReal x89=((IkReal(1.00000000000000))*(sj3));
IkReal x90=((cj1)*(cj2));
IkReal x91=((sj1)*(sj2));
IkReal x92=((cj0)*(sj2));
IkReal x93=((IkReal(1.00000000000000))*(cj1));
IkReal x94=((((IkReal(-1.00000000000000))*(sj1)*(x89)))+(((cj3)*(x90))));
IkReal x95=((((IkReal(-1.00000000000000))*(x87)*(x93)))+(((cj0)*(cj2))));
IkReal x96=((((cj3)*(sj1)))+(((sj3)*(x90))));
IkReal x97=((((IkReal(-1.00000000000000))*(x88)*(x89)))+(((cj1)*(cj3))));
IkReal x98=((cj0)*(x94));
IkReal x99=((((IkReal(-1.00000000000000))*(x86)*(x88)))+(((IkReal(-1.00000000000000))*(cj1)*(x89))));
IkReal x100=((((IkReal(-1.00000000000000))*(x92)*(x93)))+(((IkReal(-1.00000000000000))*(cj2)*(sj0))));
IkReal x101=((((sj0)*(x94)))+(((cj3)*(x92))));
IkReal x102=((x98)+(((IkReal(-1.00000000000000))*(x86)*(x87))));
IkReal x103=((((sj0)*(x96)))+(((sj3)*(x92))));
IkReal x104=((((cj0)*(x96)))+(((IkReal(-1.00000000000000))*(x87)*(x89))));
new_r00=((((r20)*(x99)))+(((r00)*(x102)))+(((r10)*(x101))));
new_r01=((((r01)*(x102)))+(((r11)*(x101)))+(((r21)*(x99))));
new_r02=((((r12)*(x101)))+(((r02)*(((((IkReal(-1.00000000000000))*(cj3)*(x87)))+(x98)))))+(((r22)*(x99))));
new_r10=((((r20)*(x91)))+(((r00)*(x100)))+(((r10)*(x95))));
new_r11=((((r21)*(x91)))+(((r01)*(x100)))+(((r11)*(x95))));
new_r12=((((r22)*(x91)))+(((r02)*(x100)))+(((r12)*(x95))));
new_r20=((((r10)*(x103)))+(((r20)*(x97)))+(((r00)*(x104))));
new_r21=((((r21)*(x97)))+(((r11)*(x103)))+(((r01)*(x104))));
new_r22=((((r02)*(x104)))+(((r22)*(x97)))+(((r12)*(x103))));
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
cj5array[0]=new_r22;
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal dummyeval[1];
IkReal gconst42;
gconst42=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst40;
gconst40=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst41;
gconst41=IKsign(((((cj5)*((new_r12)*(new_r12))))+(((cj5)*((new_r02)*(new_r02))))));
dummyeval[0]=((((cj5)*((new_r12)*(new_r12))))+(((cj5)*((new_r02)*(new_r02)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=((new_r20)+(IKcos(j6)));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(IKsin(j6)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst48;
gconst48=IKsign(((((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))+(((new_r01)*(new_r12)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))+(((new_r01)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst49;
gconst49=IKsign(((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10)))));
dummyeval[0]=((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst49)*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst49)*(new_r10))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst49)*(new_r00)), ((IkReal(-1.00000000000000))*(gconst49)*(new_r10)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x105=IKsin(j4);
IkReal x106=IKcos(j4);
IkReal x107=((IkReal(1.00000000000000))*(x105));
evalcond[0]=((((new_r12)*(x106)))+(((IkReal(-1.00000000000000))*(new_r02)*(x107))));
evalcond[1]=((IkReal(-1.00000000000000))+(((new_r12)*(x105)))+(((new_r02)*(x106))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)))+(((IkReal(-1.00000000000000))*(new_r00)*(x107)))+(((new_r10)*(x106))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x107)))+(((IkReal(-1.00000000000000))*(cj6)))+(((new_r11)*(x106))));
evalcond[4]=((((new_r11)*(x105)))+(((new_r01)*(x106))));
evalcond[5]=((((new_r10)*(x105)))+(((new_r00)*(x106))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst48)*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst48)*(new_r11))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst48)*(new_r01)), ((IkReal(-1.00000000000000))*(gconst48)*(new_r11)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x108=IKsin(j4);
IkReal x109=IKcos(j4);
IkReal x110=((IkReal(1.00000000000000))*(x108));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x110)))+(((new_r12)*(x109))));
evalcond[1]=((IkReal(-1.00000000000000))+(((new_r02)*(x109)))+(((new_r12)*(x108))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)))+(((new_r10)*(x109)))+(((IkReal(-1.00000000000000))*(new_r00)*(x110))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x110)))+(((new_r11)*(x109)))+(((IkReal(-1.00000000000000))*(cj6))));
evalcond[4]=((((new_r01)*(x109)))+(((new_r11)*(x108))));
evalcond[5]=((((new_r00)*(x109)))+(((new_r10)*(x108))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=((new_r20)+(((IkReal(-1.00000000000000))*(IKcos(j6)))));
evalcond[1]=((new_r21)+(IKsin(j6)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst52;
gconst52=IKsign(((((IkReal(-1.00000000000000))*(new_r01)*(new_r12)))+(((new_r02)*(new_r11)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r01)*(new_r12)))+(((new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst53;
gconst53=IKsign(((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst53)*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst53)*(new_r10))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst53)*(new_r00)), ((IkReal(-1.00000000000000))*(gconst53)*(new_r10)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x111=IKsin(j4);
IkReal x112=IKcos(j4);
IkReal x113=((IkReal(1.00000000000000))*(x111));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x113)))+(((new_r12)*(x112))));
evalcond[1]=((IkReal(1.00000000000000))+(((new_r12)*(x111)))+(((new_r02)*(x112))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)))+(((new_r10)*(x112)))+(((IkReal(-1.00000000000000))*(new_r00)*(x113))));
evalcond[3]=((((new_r11)*(x112)))+(((IkReal(-1.00000000000000))*(cj6)))+(((IkReal(-1.00000000000000))*(new_r01)*(x113))));
evalcond[4]=((((new_r11)*(x111)))+(((new_r01)*(x112))));
evalcond[5]=((((new_r00)*(x112)))+(((new_r10)*(x111))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst52)*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst52)*(new_r11))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst52)*(new_r01)), ((IkReal(-1.00000000000000))*(gconst52)*(new_r11)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x114=IKsin(j4);
IkReal x115=IKcos(j4);
IkReal x116=((IkReal(1.00000000000000))*(x114));
evalcond[0]=((((new_r12)*(x115)))+(((IkReal(-1.00000000000000))*(new_r02)*(x116))));
evalcond[1]=((IkReal(1.00000000000000))+(((new_r02)*(x115)))+(((new_r12)*(x114))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)))+(((new_r10)*(x115)))+(((IkReal(-1.00000000000000))*(new_r00)*(x116))));
evalcond[3]=((((new_r11)*(x115)))+(((IkReal(-1.00000000000000))*(new_r01)*(x116)))+(((IkReal(-1.00000000000000))*(cj6))));
evalcond[4]=((((new_r01)*(x115)))+(((new_r11)*(x114))));
evalcond[5]=((((new_r10)*(x114)))+(((new_r00)*(x115))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[5]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[6]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x117=IKatan2(new_r02, new_r12);
j4array[0]=((IkReal(-1.00000000000000))*(x117));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x117))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((((new_r12)*(IKcos(j4))))+(((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj4)*(new_r00)))+(((new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))))+IKsqr(((((cj4)*(new_r00)))+(((new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x118=IKsin(j6);
IkReal x119=((IkReal(1.00000000000000))*(sj4));
IkReal x120=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x118)))+(((IkReal(-1.00000000000000))*(new_r00)*(x119))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x119)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x120))));
evalcond[2]=((((new_r11)*(sj4)))+(((cj4)*(new_r01)))+(x118));
evalcond[3]=((((cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(x120)))+(((new_r10)*(sj4))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
IkReal x121=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j5, IkReal(6.28318530717959))));
evalcond[1]=x121;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x121;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x122=IKatan2(new_r02, new_r12);
j4array[0]=((IkReal(-1.00000000000000))*(x122));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x122))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((((new_r12)*(IKcos(j4))))+(((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((new_r11)*(sj4)))+(((cj4)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r11)*(sj4)))+(((cj4)*(new_r01)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((new_r11)*(sj4)))+(((cj4)*(new_r01)))), ((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x123=IKcos(j6);
IkReal x124=((IkReal(1.00000000000000))*(sj4));
IkReal x125=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x125)))+(((IkReal(-1.00000000000000))*(new_r00)*(x124))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x123)))+(((IkReal(-1.00000000000000))*(new_r01)*(x124)))+(((cj4)*(new_r11))));
evalcond[2]=((((new_r11)*(sj4)))+(((cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(x125))));
evalcond[3]=((x123)+(((cj4)*(new_r00)))+(((new_r10)*(sj4))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x126=((gconst41)*(new_r22)*(sj5));
if( IKabs(((new_r12)*(x126))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x126))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((new_r12)*(x126)), ((new_r02)*(x126)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x127=IKsin(j4);
IkReal x128=IKcos(j4);
IkReal x129=((IkReal(1.00000000000000))*(sj5));
IkReal x130=((IkReal(1.00000000000000))*(cj5));
IkReal x131=((new_r12)*(x127));
IkReal x132=((new_r02)*(x128));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x127)))+(((new_r12)*(x128))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x129)))+(x131)+(x132));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r22)*(x129)))+(((cj5)*(x132)))+(((cj5)*(x131))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r00)*(x128)*(x129)))+(((IkReal(-1.00000000000000))*(new_r20)*(x130)))+(((IkReal(-1.00000000000000))*(new_r10)*(x127)*(x129))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r21)*(x130)))+(((IkReal(-1.00000000000000))*(new_r11)*(x127)*(x129)))+(((IkReal(-1.00000000000000))*(new_r01)*(x128)*(x129))));
evalcond[5]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x129)*(x132)))+(((IkReal(-1.00000000000000))*(new_r22)*(x130)))+(((IkReal(-1.00000000000000))*(x129)*(x131))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst43;
gconst43=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x133=((((IkReal(-1.00000000000000))*(new_r02)*(sj4)))+(((cj4)*(new_r12))));
IkReal x134=((((cj4)*(new_r02)))+(((new_r12)*(sj4))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x133;
evalcond[5]=x133;
evalcond[6]=x134;
evalcond[7]=x134;
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj4)*(new_r00)))+(((new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))))+IKsqr(((((cj4)*(new_r00)))+(((new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x135=IKsin(j6);
IkReal x136=((IkReal(1.00000000000000))*(sj4));
IkReal x137=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x135)))+(((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x136))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x137)))+(((IkReal(-1.00000000000000))*(new_r01)*(x136)))+(((cj4)*(new_r11))));
evalcond[2]=((((new_r11)*(sj4)))+(((cj4)*(new_r01)))+(x135));
evalcond[3]=((((IkReal(-1.00000000000000))*(x137)))+(((cj4)*(new_r00)))+(((new_r10)*(sj4))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x138=((IkReal(1.00000000000000))+(new_r22));
IkReal x139=((cj4)*(new_r02));
IkReal x140=((new_r12)*(sj4));
IkReal x141=((((IkReal(-1.00000000000000))*(new_r02)*(sj4)))+(((cj4)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j5, IkReal(6.28318530717959))));
evalcond[1]=x138;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x141;
evalcond[5]=x141;
evalcond[6]=((x139)+(x140));
evalcond[7]=((((IkReal(-1.00000000000000))*(x140)))+(((IkReal(-1.00000000000000))*(x139))));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x138;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((new_r11)*(sj4)))+(((cj4)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r11)*(sj4)))+(((cj4)*(new_r01)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((new_r11)*(sj4)))+(((cj4)*(new_r01)))), ((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x142=IKcos(j6);
IkReal x143=((IkReal(1.00000000000000))*(sj4));
IkReal x144=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x143)))+(((IkReal(-1.00000000000000))*(x144))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x143)))+(((IkReal(-1.00000000000000))*(x142)))+(((cj4)*(new_r11))));
evalcond[2]=((((new_r11)*(sj4)))+(((cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(x144))));
evalcond[3]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(x142));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj4)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj4)))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x145=IKsin(j6);
IkReal x146=IKcos(j6);
IkReal x147=((cj4)*(new_r01));
IkReal x148=((IkReal(1.00000000000000))*(sj5));
IkReal x149=((new_r10)*(sj4));
IkReal x150=((new_r11)*(sj4));
IkReal x151=((cj4)*(new_r00));
IkReal x152=((IkReal(1.00000000000000))*(sj4));
IkReal x153=((IkReal(1.00000000000000))*(x146));
evalcond[0]=((new_r20)+(((sj5)*(x146))));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x145)*(x148))));
evalcond[2]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x152)))+(((IkReal(-1.00000000000000))*(x145))));
evalcond[3]=((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x153)))+(((IkReal(-1.00000000000000))*(new_r01)*(x152))));
evalcond[4]=((x150)+(((cj5)*(x145)))+(x147));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x153)))+(x151)+(x149));
evalcond[6]=((((cj5)*(x150)))+(((IkReal(-1.00000000000000))*(new_r21)*(x148)))+(((cj5)*(x147)))+(x145));
evalcond[7]=((((cj5)*(x149)))+(((IkReal(-1.00000000000000))*(x153)))+(((IkReal(-1.00000000000000))*(new_r20)*(x148)))+(((cj5)*(x151))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((new_r21)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r21)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))))+IKsqr(((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((new_r21)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))), ((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x154=IKsin(j6);
IkReal x155=IKcos(j6);
IkReal x156=((cj4)*(new_r01));
IkReal x157=((IkReal(1.00000000000000))*(sj5));
IkReal x158=((new_r10)*(sj4));
IkReal x159=((new_r11)*(sj4));
IkReal x160=((cj4)*(new_r00));
IkReal x161=((IkReal(1.00000000000000))*(sj4));
IkReal x162=((IkReal(1.00000000000000))*(x155));
evalcond[0]=((((sj5)*(x155)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x154)*(x157)))+(new_r21));
evalcond[2]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x161)))+(((IkReal(-1.00000000000000))*(x154))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x161)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x162))));
evalcond[4]=((x156)+(x159)+(((cj5)*(x154))));
evalcond[5]=((x158)+(((IkReal(-1.00000000000000))*(cj5)*(x162)))+(x160));
evalcond[6]=((((cj5)*(x159)))+(x154)+(((cj5)*(x156)))+(((IkReal(-1.00000000000000))*(new_r21)*(x157))));
evalcond[7]=((((cj5)*(x160)))+(((IkReal(-1.00000000000000))*(new_r20)*(x157)))+(((IkReal(-1.00000000000000))*(x162)))+(((cj5)*(x158))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((gconst43)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst43)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst43)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst43)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x163=IKsin(j6);
IkReal x164=IKcos(j6);
IkReal x165=((cj4)*(new_r01));
IkReal x166=((IkReal(1.00000000000000))*(sj5));
IkReal x167=((new_r10)*(sj4));
IkReal x168=((new_r11)*(sj4));
IkReal x169=((cj4)*(new_r00));
IkReal x170=((IkReal(1.00000000000000))*(sj4));
IkReal x171=((IkReal(1.00000000000000))*(x164));
evalcond[0]=((new_r20)+(((sj5)*(x164))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x163)*(x166)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x163)))+(((IkReal(-1.00000000000000))*(new_r00)*(x170)))+(((cj4)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x171)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x170))));
evalcond[4]=((((cj5)*(x163)))+(x168)+(x165));
evalcond[5]=((x169)+(x167)+(((IkReal(-1.00000000000000))*(cj5)*(x171))));
evalcond[6]=((x163)+(((IkReal(-1.00000000000000))*(new_r21)*(x166)))+(((cj5)*(x168)))+(((cj5)*(x165))));
evalcond[7]=((((cj5)*(x167)))+(((IkReal(-1.00000000000000))*(x171)))+(((IkReal(-1.00000000000000))*(new_r20)*(x166)))+(((cj5)*(x169))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x172=((gconst40)*(sj5));
if( IKabs(((new_r12)*(x172))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x172))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((new_r12)*(x172)), ((new_r02)*(x172)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x173=IKsin(j4);
IkReal x174=IKcos(j4);
IkReal x175=((IkReal(1.00000000000000))*(sj5));
IkReal x176=((IkReal(1.00000000000000))*(cj5));
IkReal x177=((new_r12)*(x173));
IkReal x178=((new_r02)*(x174));
evalcond[0]=((((new_r12)*(x174)))+(((IkReal(-1.00000000000000))*(new_r02)*(x173))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x175)))+(x178)+(x177));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r22)*(x175)))+(((cj5)*(x177)))+(((cj5)*(x178))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r20)*(x176)))+(((IkReal(-1.00000000000000))*(new_r00)*(x174)*(x175)))+(((IkReal(-1.00000000000000))*(new_r10)*(x173)*(x175))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r11)*(x173)*(x175)))+(((IkReal(-1.00000000000000))*(new_r01)*(x174)*(x175)))+(((IkReal(-1.00000000000000))*(new_r21)*(x176))));
evalcond[5]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x175)*(x177)))+(((IkReal(-1.00000000000000))*(new_r22)*(x176)))+(((IkReal(-1.00000000000000))*(x175)*(x178))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst43;
gconst43=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x179=((((IkReal(-1.00000000000000))*(new_r02)*(sj4)))+(((cj4)*(new_r12))));
IkReal x180=((((cj4)*(new_r02)))+(((new_r12)*(sj4))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x179;
evalcond[5]=x179;
evalcond[6]=x180;
evalcond[7]=x180;
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj4)*(new_r00)))+(((new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))))+IKsqr(((((cj4)*(new_r00)))+(((new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x181=IKsin(j6);
IkReal x182=((IkReal(1.00000000000000))*(sj4));
IkReal x183=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x181)))+(((IkReal(-1.00000000000000))*(new_r00)*(x182))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x183)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x182))));
evalcond[2]=((x181)+(((new_r11)*(sj4)))+(((cj4)*(new_r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x183)))+(((cj4)*(new_r00)))+(((new_r10)*(sj4))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x184=((IkReal(1.00000000000000))+(new_r22));
IkReal x185=((cj4)*(new_r02));
IkReal x186=((new_r12)*(sj4));
IkReal x187=((((IkReal(-1.00000000000000))*(new_r02)*(sj4)))+(((cj4)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j5, IkReal(6.28318530717959))));
evalcond[1]=x184;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x187;
evalcond[5]=x187;
evalcond[6]=((x185)+(x186));
evalcond[7]=((((IkReal(-1.00000000000000))*(x185)))+(((IkReal(-1.00000000000000))*(x186))));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x184;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((new_r11)*(sj4)))+(((cj4)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r11)*(sj4)))+(((cj4)*(new_r01)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((new_r11)*(sj4)))+(((cj4)*(new_r01)))), ((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x188=IKcos(j6);
IkReal x189=((IkReal(1.00000000000000))*(sj4));
IkReal x190=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x189)))+(((IkReal(-1.00000000000000))*(x190))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x188)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x189))));
evalcond[2]=((((new_r11)*(sj4)))+(((cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(x190))));
evalcond[3]=((x188)+(((cj4)*(new_r00)))+(((new_r10)*(sj4))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj4)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj4)))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x191=IKsin(j6);
IkReal x192=IKcos(j6);
IkReal x193=((cj4)*(new_r01));
IkReal x194=((IkReal(1.00000000000000))*(sj5));
IkReal x195=((new_r10)*(sj4));
IkReal x196=((new_r11)*(sj4));
IkReal x197=((cj4)*(new_r00));
IkReal x198=((IkReal(1.00000000000000))*(sj4));
IkReal x199=((IkReal(1.00000000000000))*(x192));
evalcond[0]=((new_r20)+(((sj5)*(x192))));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x191)*(x194))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x198)))+(((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x191))));
evalcond[3]=((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x198)))+(((IkReal(-1.00000000000000))*(x199))));
evalcond[4]=((x193)+(x196)+(((cj5)*(x191))));
evalcond[5]=((x197)+(x195)+(((IkReal(-1.00000000000000))*(cj5)*(x199))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x194)))+(((cj5)*(x193)))+(x191)+(((cj5)*(x196))));
evalcond[7]=((((cj5)*(x197)))+(((IkReal(-1.00000000000000))*(x199)))+(((IkReal(-1.00000000000000))*(new_r20)*(x194)))+(((cj5)*(x195))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((new_r21)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r21)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))))+IKsqr(((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((new_r21)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))), ((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x200=IKsin(j6);
IkReal x201=IKcos(j6);
IkReal x202=((cj4)*(new_r01));
IkReal x203=((IkReal(1.00000000000000))*(sj5));
IkReal x204=((new_r10)*(sj4));
IkReal x205=((new_r11)*(sj4));
IkReal x206=((cj4)*(new_r00));
IkReal x207=((IkReal(1.00000000000000))*(sj4));
IkReal x208=((IkReal(1.00000000000000))*(x201));
evalcond[0]=((((sj5)*(x201)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x200)*(x203))));
evalcond[2]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x200)))+(((IkReal(-1.00000000000000))*(new_r00)*(x207))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x207)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x208))));
evalcond[4]=((x205)+(x202)+(((cj5)*(x200))));
evalcond[5]=((x206)+(x204)+(((IkReal(-1.00000000000000))*(cj5)*(x208))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x203)))+(x200)+(((cj5)*(x205)))+(((cj5)*(x202))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x203)))+(((cj5)*(x206)))+(((IkReal(-1.00000000000000))*(x208)))+(((cj5)*(x204))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((gconst43)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst43)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst43)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst43)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x209=IKsin(j6);
IkReal x210=IKcos(j6);
IkReal x211=((cj4)*(new_r01));
IkReal x212=((IkReal(1.00000000000000))*(sj5));
IkReal x213=((new_r10)*(sj4));
IkReal x214=((new_r11)*(sj4));
IkReal x215=((cj4)*(new_r00));
IkReal x216=((IkReal(1.00000000000000))*(sj4));
IkReal x217=((IkReal(1.00000000000000))*(x210));
evalcond[0]=((new_r20)+(((sj5)*(x210))));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x209)*(x212))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x209)))+(((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x216))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x217)))+(((IkReal(-1.00000000000000))*(new_r01)*(x216)))+(((cj4)*(new_r11))));
evalcond[4]=((((cj5)*(x209)))+(x211)+(x214));
evalcond[5]=((x213)+(x215)+(((IkReal(-1.00000000000000))*(cj5)*(x217))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x212)))+(x209)+(((cj5)*(x211)))+(((cj5)*(x214))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x217)))+(((cj5)*(x213)))+(((IkReal(-1.00000000000000))*(new_r20)*(x212)))+(((cj5)*(x215))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((gconst42)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst42)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst42)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst42)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=((new_r20)+(((sj5)*(IKcos(j6)))));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(sj5)*(IKsin(j6)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst44;
gconst44=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst45;
gconst45=IKsign(((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x218=((gconst45)*(sj6));
if( IKabs(((new_r12)*(x218))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x218))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((new_r12)*(x218)), ((new_r02)*(x218)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[12];
IkReal x219=IKsin(j4);
IkReal x220=IKcos(j4);
IkReal x221=((IkReal(1.00000000000000))*(cj6));
IkReal x222=((IkReal(1.00000000000000))*(sj5));
IkReal x223=((IkReal(1.00000000000000))*(cj5));
IkReal x224=((new_r00)*(x220));
IkReal x225=((cj5)*(x219));
IkReal x226=((new_r11)*(x219));
IkReal x227=((cj5)*(x220));
IkReal x228=((new_r02)*(x220));
IkReal x229=((new_r12)*(x219));
IkReal x230=((new_r10)*(x219));
IkReal x231=((IkReal(1.00000000000000))*(x219));
IkReal x232=((new_r01)*(x220));
evalcond[0]=((((new_r12)*(x220)))+(((IkReal(-1.00000000000000))*(new_r02)*(x231))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x222)))+(x229)+(x228));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)))+(((IkReal(-1.00000000000000))*(new_r00)*(x231)))+(((new_r10)*(x220))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x221)))+(((IkReal(-1.00000000000000))*(new_r01)*(x231)))+(((new_r11)*(x220))));
evalcond[4]=((x232)+(((cj5)*(sj6)))+(x226));
evalcond[5]=((x230)+(((IkReal(-1.00000000000000))*(cj5)*(x221)))+(x224));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r22)*(x222)))+(((new_r12)*(x225)))+(((new_r02)*(x227))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x223)))+(((IkReal(-1.00000000000000))*(x222)*(x230)))+(((IkReal(-1.00000000000000))*(x222)*(x224))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x222)*(x232)))+(((IkReal(-1.00000000000000))*(x222)*(x226)))+(((IkReal(-1.00000000000000))*(new_r21)*(x223))));
evalcond[9]=((((new_r01)*(x227)))+(((new_r11)*(x225)))+(sj6)+(((IkReal(-1.00000000000000))*(new_r21)*(x222))));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x222)*(x229)))+(((IkReal(-1.00000000000000))*(new_r22)*(x223)))+(((IkReal(-1.00000000000000))*(x222)*(x228))));
evalcond[11]=((((IkReal(-1.00000000000000))*(x221)))+(((IkReal(-1.00000000000000))*(new_r20)*(x222)))+(((new_r10)*(x225)))+(((cj5)*(x224))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x233=((gconst44)*(sj5));
if( IKabs(((new_r12)*(x233))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x233))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((new_r12)*(x233)), ((new_r02)*(x233)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[12];
IkReal x234=IKsin(j4);
IkReal x235=IKcos(j4);
IkReal x236=((IkReal(1.00000000000000))*(cj6));
IkReal x237=((IkReal(1.00000000000000))*(sj5));
IkReal x238=((IkReal(1.00000000000000))*(cj5));
IkReal x239=((new_r00)*(x235));
IkReal x240=((cj5)*(x234));
IkReal x241=((new_r11)*(x234));
IkReal x242=((cj5)*(x235));
IkReal x243=((new_r02)*(x235));
IkReal x244=((new_r12)*(x234));
IkReal x245=((new_r10)*(x234));
IkReal x246=((IkReal(1.00000000000000))*(x234));
IkReal x247=((new_r01)*(x235));
evalcond[0]=((((new_r12)*(x235)))+(((IkReal(-1.00000000000000))*(new_r02)*(x246))));
evalcond[1]=((x243)+(x244)+(((IkReal(-1.00000000000000))*(x237))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)))+(((IkReal(-1.00000000000000))*(new_r00)*(x246)))+(((new_r10)*(x235))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x236)))+(((new_r11)*(x235)))+(((IkReal(-1.00000000000000))*(new_r01)*(x246))));
evalcond[4]=((((cj5)*(sj6)))+(x241)+(x247));
evalcond[5]=((x239)+(((IkReal(-1.00000000000000))*(cj5)*(x236)))+(x245));
evalcond[6]=((((new_r12)*(x240)))+(((new_r02)*(x242)))+(((IkReal(-1.00000000000000))*(new_r22)*(x237))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x237)*(x245)))+(((IkReal(-1.00000000000000))*(new_r20)*(x238)))+(((IkReal(-1.00000000000000))*(x237)*(x239))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x237)*(x241)))+(((IkReal(-1.00000000000000))*(new_r21)*(x238)))+(((IkReal(-1.00000000000000))*(x237)*(x247))));
evalcond[9]=((((new_r01)*(x242)))+(((IkReal(-1.00000000000000))*(new_r21)*(x237)))+(sj6)+(((new_r11)*(x240))));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x237)*(x243)))+(((IkReal(-1.00000000000000))*(x237)*(x244)))+(((IkReal(-1.00000000000000))*(new_r22)*(x238))));
evalcond[11]=((((cj5)*(x239)))+(((IkReal(-1.00000000000000))*(x236)))+(((new_r10)*(x240)))+(((IkReal(-1.00000000000000))*(new_r20)*(x237))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "c9e5215735aecb79c5312f66d75d8bff"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
