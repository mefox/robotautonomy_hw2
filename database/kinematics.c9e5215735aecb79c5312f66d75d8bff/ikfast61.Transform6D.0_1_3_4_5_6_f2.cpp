/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2013-02-24 13:57:49.759214
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66;
x0=IKsin(j[1]);
x1=IKcos(j[2]);
x2=IKsin(j[3]);
x3=IKcos(j[1]);
x4=IKcos(j[3]);
x5=IKsin(j[4]);
x6=IKcos(j[4]);
x7=IKsin(j[2]);
x8=IKcos(j[6]);
x9=IKsin(j[6]);
x10=IKsin(j[5]);
x11=IKcos(j[5]);
x12=IKsin(j[0]);
x13=IKcos(j[0]);
x14=((IkReal(0.0450000000000000))*(x3));
x15=((IkReal(0.300000000000000))*(x3));
x16=((IkReal(1.00000000000000))*(x11));
x17=((IkReal(1.00000000000000))*(x3));
x18=((IkReal(1.00000000000000))*(x10));
x19=((IkReal(0.550000000000000))*(x0));
x20=((IkReal(1.00000000000000))*(x6));
x21=((IkReal(0.0450000000000000))*(x1));
x22=((IkReal(1.00000000000000))*(x5));
x23=((x13)*(x7));
x24=((x1)*(x13));
x25=((x0)*(x7));
x26=((x12)*(x7));
x27=((x0)*(x2));
x28=((x1)*(x12));
x29=((x0)*(x4));
x30=((x17)*(x4));
x31=((IkReal(0.0450000000000000))*(x23));
x32=((IkReal(1.00000000000000))*(x26));
x33=((IkReal(0.0450000000000000))*(x26));
x34=((IkReal(1.00000000000000))*(x27));
x35=((IkReal(1.00000000000000))*(x29));
x36=((x12)*(x29));
x37=((x12)*(x34));
x38=((x14)*(x28));
x39=((x13)*(x34));
x40=((x13)*(x35));
x41=((x14)*(x24));
x42=((((IkReal(-1.00000000000000))*(x30)))+(((x1)*(x27))));
x43=((x23)+(((x28)*(x3))));
x44=((((IkReal(-1.00000000000000))*(x17)*(x26)))+(x24));
x45=((((IkReal(-1.00000000000000))*(x32)))+(((x24)*(x3))));
x46=((((IkReal(-1.00000000000000))*(x17)*(x24)))+(x32));
x47=((((x17)*(x2)))+(((x1)*(x35))));
x48=((((IkReal(-1.00000000000000))*(x28)))+(((IkReal(-1.00000000000000))*(x17)*(x23))));
x49=((x38)+(x31));
x50=((x10)*(x42));
x51=((x4)*(x45));
x52=((x44)*(x6));
x53=((x4)*(x43));
x54=((x44)*(x5));
x55=((x2)*(x46));
x56=((((IkReal(-1.00000000000000))*(x37)))+(x53));
x57=((x37)+(((IkReal(-1.00000000000000))*(x53))));
x58=((((IkReal(-1.00000000000000))*(x40)))+(x55));
x59=((((x47)*(x5)))+(((x25)*(x6))));
x60=((((IkReal(-1.00000000000000))*(x47)*(x6)))+(((x25)*(x5))));
x61=((((x2)*(((((IkReal(-1.00000000000000))*(x23)))+(((IkReal(-1.00000000000000))*(x17)*(x28)))))))+(((IkReal(-1.00000000000000))*(x12)*(x35))));
x62=((x5)*(x57));
x63=((((x56)*(x6)))+(x54));
x64=((((x48)*(x5)))+(((x6)*(((((IkReal(-1.00000000000000))*(x39)))+(x51))))));
x65=((x11)*(x63));
x66=((((x5)*(((x39)+(((IkReal(-1.00000000000000))*(x51)))))))+(((x48)*(x6))));
eerot[0]=((((x8)*(((((x11)*(x60)))+(x50)))))+(((x59)*(x9))));
eerot[1]=((((x9)*(((((IkReal(-1.00000000000000))*(x18)*(x42)))+(((IkReal(-1.00000000000000))*(x16)*(x60)))))))+(((x59)*(x8))));
eerot[2]=((((x11)*(((((IkReal(-1.00000000000000))*(x1)*(x34)))+(x30)))))+(((x10)*(x60))));
eetrans[0]=((IkReal(0.0790000000000000))+(((x21)*(x29)))+(((IkReal(-1.00000000000000))*(x0)*(x21)))+(((x14)*(x2)))+(((IkReal(-0.300000000000000))*(x1)*(x27)))+(((IkReal(0.550000000000000))*(x3)))+(((x15)*(x4))));
eerot[3]=((((x8)*(((((IkReal(-1.00000000000000))*(x18)*(x61)))+(((IkReal(-1.00000000000000))*(x16)*(x63)))))))+(((x9)*(((((IkReal(-1.00000000000000))*(x52)))+(((IkReal(-1.00000000000000))*(x62))))))));
eerot[4]=((((x9)*(((((x10)*(x61)))+(x65)))))+(((x8)*(((((IkReal(-1.00000000000000))*(x20)*(x44)))+(((IkReal(-1.00000000000000))*(x22)*(x57))))))));
eerot[5]=((((x10)*(((((IkReal(-1.00000000000000))*(x20)*(x56)))+(((IkReal(-1.00000000000000))*(x22)*(x44)))))))+(((x11)*(x61))));
eetrans[1]=((IkReal(-0.191000000000000))+(((IkReal(-1.00000000000000))*(x49)))+(((IkReal(-1.00000000000000))*(x12)*(x19)))+(((x2)*(((((IkReal(-1.00000000000000))*(x15)*(x28)))+(((IkReal(-0.300000000000000))*(x23)))))))+(((IkReal(-0.300000000000000))*(x36)))+(((IkReal(-0.0450000000000000))*(x12)*(x27)))+(((x4)*(x49))));
eerot[6]=((((x8)*(((((x11)*(x64)))+(((x10)*(x58)))))))+(((x66)*(x9))));
eerot[7]=((((x9)*(((((IkReal(-1.00000000000000))*(x18)*(x58)))+(((IkReal(-1.00000000000000))*(x16)*(x64)))))))+(((x66)*(x8))));
eerot[8]=((((x11)*(((x40)+(((IkReal(-1.00000000000000))*(x55)))))))+(((x10)*(x64))));
eetrans[2]=((IkReal(0.905000000000000))+(((IkReal(-1.00000000000000))*(x33)))+(((IkReal(0.0450000000000000))*(x13)*(x27)))+(((IkReal(0.300000000000000))*(x13)*(x29)))+(((x2)*(((((IkReal(-0.300000000000000))*(x26)))+(((x15)*(x24)))))))+(x41)+(((x4)*(((((IkReal(-1.00000000000000))*(x41)))+(x33)))))+(((x13)*(x19))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,j6,cj6,sj6,htj6,j2,cj2,sj2,htj2,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij2[2], _nj2;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij2[0] = -1; _ij2[1] = -1; _nj2 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r20;
new_r01=r21;
new_r02=r22;
new_px=((IkReal(-0.905000000000000))+(pz));
new_r10=((IkReal(-1.00000000000000))*(r10));
new_r11=((IkReal(-1.00000000000000))*(r11));
new_r12=((IkReal(-1.00000000000000))*(r12));
new_py=((IkReal(-0.191000000000000))+(((IkReal(-1.00000000000000))*(py))));
new_r20=r00;
new_r21=r01;
new_r22=r02;
new_pz=((IkReal(-0.0790000000000000))+(px));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
if( (((IkReal(1.18441410190393))+(((IkReal(-2.98679637348110))*(pp))))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(1.18441410190393))+(((IkReal(-2.98679637348110))*(pp))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x67=IKasin(((IkReal(1.18441410190393))+(((IkReal(-2.98679637348110))*(pp)))));
j3array[0]=((IkReal(-1.34027003705633))+(((IkReal(-1.00000000000000))*(x67))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((IkReal(1.80132261653346))+(x67));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x68=(cj2)*(cj2);
IkReal x69=(sj3)*(sj3);
IkReal x70=(cj3)*(cj3);
IkReal x71=((IkReal(13.3333333333333))*(cj3)*(sj3));
dummyeval[0]=((IkReal(149.382716049383))+(((IkReal(44.4444444444444))*(x70)))+(((IkReal(24.4444444444444))*(sj3)))+(((x68)*(x70)))+(((IkReal(13.3333333333333))*(sj3)*(x68)))+(((IkReal(-2.00000000000000))*(cj3)*(x68)))+(x71)+(x68)+(x69)+(((IkReal(-1.00000000000000))*(x68)*(x71)))+(((IkReal(162.962962962963))*(cj3)))+(((IkReal(44.4444444444444))*(x68)*(x69))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x72=((IkReal(0.0450000000000000))*(cj2));
IkReal x73=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3))));
IkReal x74=((((IkReal(-1.00000000000000))*(cj3)*(x72)))+(((IkReal(0.300000000000000))*(cj2)*(sj3)))+(x72));
if( IKabs(x73) < IKFAST_ATAN2_MAGTHRESH && IKabs(x74) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x75=((IkReal(1.00000000000000))*(IKatan2(x73, x74)));
if( ((((x73)*(x73))+((x74)*(x74)))) < (IkReal)-0.00001 )
    continue;
if( (((pz)*(((IKabs(IKabs(IKsqrt((((x73)*(x73))+((x74)*(x74)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x73)*(x73))+((x74)*(x74))))))):(IkReal)1.0e30)))) < -1-IKFAST_SINCOS_THRESH || (((pz)*(((IKabs(IKabs(IKsqrt((((x73)*(x73))+((x74)*(x74)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x73)*(x73))+((x74)*(x74))))))):(IkReal)1.0e30)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x76=IKasin(((pz)*(((IKabs(IKabs(IKsqrt((((x73)*(x73))+((x74)*(x74)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x73)*(x73))+((x74)*(x74))))))):(IkReal)1.0e30))));
j1array[0]=((((IkReal(-1.00000000000000))*(x75)))+(((IkReal(-1.00000000000000))*(x76))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x75)))+(x76));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(((((sj1)*((py)*(py))))+(((sj1)*((px)*(px))))));
dummyeval[0]=((((sj1)*((py)*(py))))+(((sj1)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
IkReal x77=((IkReal(1.00000000000000))*(cj2)*(sj1));
gconst1=IKsign(((((IkReal(-1.00000000000000))*(x77)*((py)*(py))))+(((IkReal(-1.00000000000000))*(x77)*((px)*(px))))));
IkReal x78=((IkReal(1.00000000000000))*(cj2)*(sj1));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x78)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x78)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((((IkReal(-0.0450000000000000))*(cj1)*(sj3)))+(((IkReal(-0.550000000000000))*(cj1)))+(pz)+(((IkReal(-0.300000000000000))*(cj1)*(cj3))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(((((cj1)*((px)*(px))))+(((cj1)*((py)*(py))))));
dummyeval[0]=((((cj1)*((px)*(px))))+(((cj1)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((((sj1)*((py)*(py))))+(((sj1)*((px)*(px))))));
dummyeval[0]=((((sj1)*((py)*(py))))+(((sj1)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x79=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x79;
evalcond[3]=x79;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((((IkReal(9.00000000000000))*((px)*(px))))+(((IkReal(9.00000000000000))*((py)*(py))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x80=((IkReal(110.000000000000))*(pz));
IkReal x81=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst5)*(((((px)*(x80)))+(((IkReal(-21.2500000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x81))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((((IkReal(-1.00000000000000))*(py)*(x80)))+(((IkReal(21.2500000000000))*(py)))+(((py)*(x81))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst5)*(((((px)*(x80)))+(((IkReal(-21.2500000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x81)))))), ((gconst5)*(((((IkReal(-1.00000000000000))*(py)*(x80)))+(((IkReal(21.2500000000000))*(py)))+(((py)*(x81)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x82=IKsin(j0);
IkReal x83=IKcos(j0);
IkReal x84=((px)*(x82));
IkReal x85=((py)*(x83));
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(x84)+(((IkReal(-1.00000000000000))*(x85)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[1]=((((py)*(x82)))+(((px)*(x83))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x84)))+(((IkReal(0.0900000000000000))*(x85)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x248=((IkReal(0.300000000000000))*(sj3));
IkReal x249=((IkReal(0.0450000000000000))*(px));
IkReal x250=((IkReal(0.0450000000000000))*(py));
if( IKabs(((gconst4)*(((((px)*(x248)))+(x249)+(((IkReal(-1.00000000000000))*(cj3)*(x249))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((((cj3)*(x250)))+(((IkReal(-1.00000000000000))*(py)*(x248)))+(((IkReal(-1.00000000000000))*(x250))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst4)*(((((px)*(x248)))+(x249)+(((IkReal(-1.00000000000000))*(cj3)*(x249)))))), ((gconst4)*(((((cj3)*(x250)))+(((IkReal(-1.00000000000000))*(py)*(x248)))+(((IkReal(-1.00000000000000))*(x250)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x251=IKsin(j0);
IkReal x252=IKcos(j0);
IkReal x253=((px)*(x251));
IkReal x254=((py)*(x252));
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(x253)+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x254))));
evalcond[1]=((((py)*(x251)))+(((px)*(x252))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x253)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(x254))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x255=((IkReal(0.0450000000000000))*(sj3));
IkReal x256=((IkReal(0.300000000000000))*(cj3));
IkReal x257=((x255)+(x256));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x257))));
evalcond[3]=((IkReal(0.550000000000000))+(x257)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign(((((IkReal(9.00000000000000))*((px)*(px))))+(((IkReal(9.00000000000000))*((py)*(py))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x258=((IkReal(110.000000000000))*(pz));
IkReal x259=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst7)*(((((IkReal(-21.2500000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x258)))+(((IkReal(-1.00000000000000))*(px)*(x259))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(((((IkReal(21.2500000000000))*(py)))+(((py)*(x258)))+(((py)*(x259))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst7)*(((((IkReal(-21.2500000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x258)))+(((IkReal(-1.00000000000000))*(px)*(x259)))))), ((gconst7)*(((((IkReal(21.2500000000000))*(py)))+(((py)*(x258)))+(((py)*(x259)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x260=IKcos(j0);
IkReal x261=IKsin(j0);
IkReal x262=((px)*(x261));
IkReal x263=((IkReal(1.00000000000000))*(x260));
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(x262)+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(x263))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x261)))+(((IkReal(-1.00000000000000))*(px)*(x263))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x262)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(x260))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x264=((IkReal(0.300000000000000))*(sj3));
IkReal x265=((IkReal(0.0450000000000000))*(px));
IkReal x266=((IkReal(0.0450000000000000))*(py));
if( IKabs(((gconst6)*(((((IkReal(-1.00000000000000))*(cj3)*(x265)))+(x265)+(((px)*(x264))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((((IkReal(-1.00000000000000))*(x266)))+(((cj3)*(x266)))+(((IkReal(-1.00000000000000))*(py)*(x264))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst6)*(((((IkReal(-1.00000000000000))*(cj3)*(x265)))+(x265)+(((px)*(x264)))))), ((gconst6)*(((((IkReal(-1.00000000000000))*(x266)))+(((cj3)*(x266)))+(((IkReal(-1.00000000000000))*(py)*(x264)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x267=IKcos(j0);
IkReal x268=IKsin(j0);
IkReal x269=((px)*(x268));
IkReal x270=((IkReal(1.00000000000000))*(x267));
evalcond[0]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(x269)+(((IkReal(0.300000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(x270))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x268)))+(((IkReal(-1.00000000000000))*(px)*(x270))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x269)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(x267))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-1.00000000000000))*(pz));
evalcond[3]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst9;
gconst9=IKsign(((((IkReal(0.0900000000000000))*((py)*(py))))+(((IkReal(0.0900000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x271=((IkReal(0.330000000000000))*(cj3));
IkReal x272=((IkReal(0.0270000000000000))*(cj3));
IkReal x273=((IkReal(0.00405000000000000))*(sj3));
IkReal x274=((IkReal(0.0495000000000000))*(sj3));
if( IKabs(((gconst9)*(((((px)*(x274)))+(((px)*(x271)))+(((IkReal(-1.00000000000000))*(pp)*(px)))+(((IkReal(0.0495000000000000))*(py)))+(((py)*(x272)))+(((py)*(x273)))+(((IkReal(0.392500000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst9)*(((((px)*(x273)))+(((px)*(x272)))+(((IkReal(0.0495000000000000))*(px)))+(((IkReal(-0.392500000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x271)))+(((IkReal(-1.00000000000000))*(py)*(x274)))+(((pp)*(py))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst9)*(((((px)*(x274)))+(((px)*(x271)))+(((IkReal(-1.00000000000000))*(pp)*(px)))+(((IkReal(0.0495000000000000))*(py)))+(((py)*(x272)))+(((py)*(x273)))+(((IkReal(0.392500000000000))*(px)))))), ((gconst9)*(((((px)*(x273)))+(((px)*(x272)))+(((IkReal(0.0495000000000000))*(px)))+(((IkReal(-0.392500000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x271)))+(((IkReal(-1.00000000000000))*(py)*(x274)))+(((pp)*(py)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x275=IKsin(j0);
IkReal x276=IKcos(j0);
IkReal x277=((px)*(x275));
IkReal x278=((py)*(x276));
IkReal x279=((px)*(x276));
IkReal x280=((py)*(x275));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(x279)+(x280));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x278)))+(((IkReal(-0.0450000000000000))*(cj3)))+(x277)+(((IkReal(0.300000000000000))*(sj3))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x280)))+(((IkReal(-0.0900000000000000))*(x277)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x279)))+(((IkReal(0.0900000000000000))*(x278))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x281=((IkReal(0.300000000000000))*(py));
IkReal x282=((IkReal(0.0450000000000000))*(px));
IkReal x283=((IkReal(0.0450000000000000))*(py));
IkReal x284=((IkReal(0.300000000000000))*(px));
if( IKabs(((gconst8)*(((((IkReal(-0.550000000000000))*(py)))+(((IkReal(-1.00000000000000))*(sj3)*(x283)))+(((IkReal(-1.00000000000000))*(cj3)*(x282)))+(((IkReal(-1.00000000000000))*(cj3)*(x281)))+(((sj3)*(x284)))+(x282))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst8)*(((((IkReal(-0.550000000000000))*(px)))+(((IkReal(-1.00000000000000))*(sj3)*(x281)))+(((IkReal(-1.00000000000000))*(sj3)*(x282)))+(((IkReal(-1.00000000000000))*(cj3)*(x284)))+(((cj3)*(x283)))+(((IkReal(-1.00000000000000))*(x283))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst8)*(((((IkReal(-0.550000000000000))*(py)))+(((IkReal(-1.00000000000000))*(sj3)*(x283)))+(((IkReal(-1.00000000000000))*(cj3)*(x282)))+(((IkReal(-1.00000000000000))*(cj3)*(x281)))+(((sj3)*(x284)))+(x282)))), ((gconst8)*(((((IkReal(-0.550000000000000))*(px)))+(((IkReal(-1.00000000000000))*(sj3)*(x281)))+(((IkReal(-1.00000000000000))*(sj3)*(x282)))+(((IkReal(-1.00000000000000))*(cj3)*(x284)))+(((cj3)*(x283)))+(((IkReal(-1.00000000000000))*(x283)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x285=IKsin(j0);
IkReal x286=IKcos(j0);
IkReal x287=((px)*(x285));
IkReal x288=((py)*(x286));
IkReal x289=((px)*(x286));
IkReal x290=((py)*(x285));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(x290)+(x289));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(x287)+(((IkReal(-1.00000000000000))*(x288)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x287)))+(((IkReal(1.10000000000000))*(x289)))+(((IkReal(0.0900000000000000))*(x288)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x290))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=pz;
evalcond[3]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst11;
gconst11=IKsign(((((IkReal(1.10000000000000))*((py)*(py))))+(((IkReal(1.10000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x291=((cj3)*(py));
IkReal x292=((py)*(sj3));
IkReal x293=((IkReal(1.00000000000000))*(pp));
IkReal x294=((cj3)*(px));
IkReal x295=((px)*(sj3));
if( IKabs(((gconst11)*(((((IkReal(-1.00000000000000))*(py)*(x293)))+(((IkReal(0.0270000000000000))*(x292)))+(((IkReal(-0.0495000000000000))*(px)))+(((IkReal(-0.00405000000000000))*(x291)))+(((IkReal(0.0495000000000000))*(x294)))+(((IkReal(-0.330000000000000))*(x295)))+(((IkReal(-0.208450000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst11)*(((((IkReal(0.0495000000000000))*(py)))+(((IkReal(0.0270000000000000))*(x295)))+(((IkReal(-0.0495000000000000))*(x291)))+(((IkReal(-0.00405000000000000))*(x294)))+(((IkReal(-1.00000000000000))*(px)*(x293)))+(((IkReal(0.330000000000000))*(x292)))+(((IkReal(-0.208450000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst11)*(((((IkReal(-1.00000000000000))*(py)*(x293)))+(((IkReal(0.0270000000000000))*(x292)))+(((IkReal(-0.0495000000000000))*(px)))+(((IkReal(-0.00405000000000000))*(x291)))+(((IkReal(0.0495000000000000))*(x294)))+(((IkReal(-0.330000000000000))*(x295)))+(((IkReal(-0.208450000000000))*(py)))))), ((gconst11)*(((((IkReal(0.0495000000000000))*(py)))+(((IkReal(0.0270000000000000))*(x295)))+(((IkReal(-0.0495000000000000))*(x291)))+(((IkReal(-0.00405000000000000))*(x294)))+(((IkReal(-1.00000000000000))*(px)*(x293)))+(((IkReal(0.330000000000000))*(x292)))+(((IkReal(-0.208450000000000))*(px)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x296=IKsin(j0);
IkReal x297=IKcos(j0);
IkReal x298=((px)*(x296));
IkReal x299=((IkReal(1.00000000000000))*(x297));
IkReal x300=((py)*(x296));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x300)))+(((IkReal(-1.00000000000000))*(px)*(x299))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(py)*(x299)))+(((IkReal(-0.0450000000000000))*(cj3)))+(x298)+(((IkReal(0.300000000000000))*(sj3))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(py)*(x297)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x298)))+(((IkReal(-1.10000000000000))*(px)*(x297)))+(((IkReal(-1.10000000000000))*(x300))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x301=((IkReal(0.300000000000000))*(py));
IkReal x302=((IkReal(0.0450000000000000))*(px));
IkReal x303=((IkReal(0.0450000000000000))*(py));
IkReal x304=((IkReal(0.300000000000000))*(px));
if( IKabs(((gconst10)*(((((IkReal(-0.550000000000000))*(py)))+(((IkReal(-1.00000000000000))*(cj3)*(x301)))+(((IkReal(-1.00000000000000))*(sj3)*(x303)))+(((IkReal(-1.00000000000000))*(sj3)*(x304)))+(((cj3)*(x302)))+(((IkReal(-1.00000000000000))*(x302))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst10)*(((((IkReal(-0.550000000000000))*(px)))+(((IkReal(-1.00000000000000))*(cj3)*(x304)))+(((IkReal(-1.00000000000000))*(cj3)*(x303)))+(((IkReal(-1.00000000000000))*(sj3)*(x302)))+(((sj3)*(x301)))+(x303))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst10)*(((((IkReal(-0.550000000000000))*(py)))+(((IkReal(-1.00000000000000))*(cj3)*(x301)))+(((IkReal(-1.00000000000000))*(sj3)*(x303)))+(((IkReal(-1.00000000000000))*(sj3)*(x304)))+(((cj3)*(x302)))+(((IkReal(-1.00000000000000))*(x302)))))), ((gconst10)*(((((IkReal(-0.550000000000000))*(px)))+(((IkReal(-1.00000000000000))*(cj3)*(x304)))+(((IkReal(-1.00000000000000))*(cj3)*(x303)))+(((IkReal(-1.00000000000000))*(sj3)*(x302)))+(((sj3)*(x301)))+(x303)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x305=IKsin(j0);
IkReal x306=IKcos(j0);
IkReal x307=((px)*(x305));
IkReal x308=((IkReal(1.00000000000000))*(x306));
IkReal x309=((py)*(x305));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(px)*(x308)))+(((IkReal(-0.300000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x309))));
evalcond[1]=((IkReal(0.0450000000000000))+(x307)+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(py)*(x308)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(py)*(x306)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(px)*(x306)))+(((IkReal(-0.0900000000000000))*(x307)))+(((IkReal(-1.10000000000000))*(x309))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x310=((px)*(sj3));
IkReal x311=((py)*(sj1));
IkReal x312=((IkReal(0.300000000000000))*(cj3));
IkReal x313=((IkReal(0.0450000000000000))*(cj3));
IkReal x314=((px)*(sj1));
IkReal x315=((IkReal(1.00000000000000))*(cj1)*(pz));
if( IKabs(((gconst3)*(((((IkReal(-0.300000000000000))*(sj1)*(x310)))+(((IkReal(0.0450000000000000))*(py)*(sj3)))+(((IkReal(-0.0450000000000000))*(x314)))+(((IkReal(-1.00000000000000))*(py)*(x315)))+(((py)*(x312)))+(((IkReal(0.550000000000000))*(py)))+(((x313)*(x314))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((IkReal(0.300000000000000))*(sj3)*(x311)))+(((px)*(x312)))+(((IkReal(0.0450000000000000))*(x311)))+(((IkReal(0.0450000000000000))*(x310)))+(((IkReal(0.550000000000000))*(px)))+(((IkReal(-1.00000000000000))*(x311)*(x313)))+(((IkReal(-1.00000000000000))*(px)*(x315))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst3)*(((((IkReal(-0.300000000000000))*(sj1)*(x310)))+(((IkReal(0.0450000000000000))*(py)*(sj3)))+(((IkReal(-0.0450000000000000))*(x314)))+(((IkReal(-1.00000000000000))*(py)*(x315)))+(((py)*(x312)))+(((IkReal(0.550000000000000))*(py)))+(((x313)*(x314)))))), ((gconst3)*(((((IkReal(0.300000000000000))*(sj3)*(x311)))+(((px)*(x312)))+(((IkReal(0.0450000000000000))*(x311)))+(((IkReal(0.0450000000000000))*(x310)))+(((IkReal(0.550000000000000))*(px)))+(((IkReal(-1.00000000000000))*(x311)*(x313)))+(((IkReal(-1.00000000000000))*(px)*(x315)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x316=IKsin(j0);
IkReal x317=IKcos(j0);
IkReal x318=((IkReal(0.300000000000000))*(cj3));
IkReal x319=((IkReal(0.0450000000000000))*(sj3));
IkReal x320=((cj1)*(pz));
IkReal x321=((px)*(x316));
IkReal x322=((px)*(x317));
IkReal x323=((py)*(x316));
IkReal x324=((py)*(x317));
IkReal x325=((sj1)*(x323));
evalcond[0]=((IkReal(-0.550000000000000))+(x325)+(x320)+(((IkReal(-1.00000000000000))*(x318)))+(((IkReal(-1.00000000000000))*(x319)))+(((sj1)*(x322))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x324)))+(x321)+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[2]=((((cj1)*(x322)))+(((cj1)*(x323)))+(((IkReal(-1.00000000000000))*(pz)*(sj1))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x322)))+(((IkReal(-1.00000000000000))*(x323)))+(((sj1)*(x318)))+(((sj1)*(x319)))+(((IkReal(0.550000000000000))*(sj1))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x321)))+(((IkReal(1.10000000000000))*(x325)))+(((IkReal(1.10000000000000))*(x320)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x324)))+(((IkReal(1.10000000000000))*(sj1)*(x322))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x326=((IkReal(0.0450000000000000))*(cj1));
IkReal x327=((pz)*(sj1));
IkReal x328=((IkReal(0.300000000000000))*(cj1)*(sj3));
if( IKabs(((gconst2)*(((((cj3)*(px)*(x326)))+(((IkReal(-1.00000000000000))*(px)*(x326)))+(((IkReal(-1.00000000000000))*(px)*(x328)))+(((py)*(x327))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((py)*(x326)))+(((py)*(x328)))+(((IkReal(-1.00000000000000))*(cj3)*(py)*(x326)))+(((px)*(x327))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst2)*(((((cj3)*(px)*(x326)))+(((IkReal(-1.00000000000000))*(px)*(x326)))+(((IkReal(-1.00000000000000))*(px)*(x328)))+(((py)*(x327)))))), ((gconst2)*(((((py)*(x326)))+(((py)*(x328)))+(((IkReal(-1.00000000000000))*(cj3)*(py)*(x326)))+(((px)*(x327)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x329=IKsin(j0);
IkReal x330=IKcos(j0);
IkReal x331=((IkReal(0.300000000000000))*(cj3));
IkReal x332=((IkReal(0.0450000000000000))*(sj3));
IkReal x333=((cj1)*(pz));
IkReal x334=((px)*(x329));
IkReal x335=((px)*(x330));
IkReal x336=((py)*(x329));
IkReal x337=((py)*(x330));
IkReal x338=((sj1)*(x336));
evalcond[0]=((IkReal(-0.550000000000000))+(x338)+(x333)+(((IkReal(-1.00000000000000))*(x331)))+(((IkReal(-1.00000000000000))*(x332)))+(((sj1)*(x335))));
evalcond[1]=((IkReal(0.0450000000000000))+(x334)+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x337)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[2]=((((cj1)*(x336)))+(((cj1)*(x335)))+(((IkReal(-1.00000000000000))*(pz)*(sj1))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x336)))+(((IkReal(-1.00000000000000))*(x335)))+(((IkReal(0.550000000000000))*(sj1)))+(((sj1)*(x331)))+(((sj1)*(x332))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x337)))+(((IkReal(1.10000000000000))*(sj1)*(x335)))+(((IkReal(1.10000000000000))*(x338)))+(((IkReal(1.10000000000000))*(x333)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x334))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((((IkReal(-0.0450000000000000))*(cj1)*(sj3)))+(((IkReal(-0.550000000000000))*(cj1)))+(pz)+(((IkReal(-0.300000000000000))*(cj1)*(cj3))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign(((((cj1)*((px)*(px))))+(((cj1)*((py)*(py))))));
dummyeval[0]=((((cj1)*((px)*(px))))+(((cj1)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst13;
gconst13=IKsign(((((sj1)*((py)*(py))))+(((sj1)*((px)*(px))))));
dummyeval[0]=((((sj1)*((py)*(py))))+(((sj1)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x339=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x339;
evalcond[3]=x339;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst15;
gconst15=IKsign(((((IkReal(-9.00000000000000))*((py)*(py))))+(((IkReal(-9.00000000000000))*((px)*(px))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x340=((IkReal(110.000000000000))*(pz));
IkReal x341=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst15)*(((((IkReal(-1.00000000000000))*(px)*(x341)))+(((IkReal(-21.2500000000000))*(px)))+(((px)*(x340))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst15)*(((((py)*(x341)))+(((IkReal(21.2500000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x340))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst15)*(((((IkReal(-1.00000000000000))*(px)*(x341)))+(((IkReal(-21.2500000000000))*(px)))+(((px)*(x340)))))), ((gconst15)*(((((py)*(x341)))+(((IkReal(21.2500000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x340)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x342=IKcos(j0);
IkReal x343=IKsin(j0);
IkReal x344=((px)*(x343));
IkReal x345=((IkReal(1.00000000000000))*(x342));
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(x344)+(((IkReal(-1.00000000000000))*(py)*(x345)))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((((IkReal(-1.00000000000000))*(px)*(x345)))+(((IkReal(-1.00000000000000))*(py)*(x343))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(py)*(x342)))+(((IkReal(0.0900000000000000))*(x344)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x346=((IkReal(0.300000000000000))*(sj3));
IkReal x347=((IkReal(0.0450000000000000))*(px));
IkReal x348=((IkReal(0.0450000000000000))*(py));
if( IKabs(((gconst14)*(((((IkReal(-1.00000000000000))*(px)*(x346)))+(((IkReal(-1.00000000000000))*(x347)))+(((cj3)*(x347))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((((IkReal(-1.00000000000000))*(cj3)*(x348)))+(((py)*(x346)))+(x348))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst14)*(((((IkReal(-1.00000000000000))*(px)*(x346)))+(((IkReal(-1.00000000000000))*(x347)))+(((cj3)*(x347)))))), ((gconst14)*(((((IkReal(-1.00000000000000))*(cj3)*(x348)))+(((py)*(x346)))+(x348)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x349=IKcos(j0);
IkReal x350=IKsin(j0);
IkReal x351=((px)*(x350));
IkReal x352=((IkReal(1.00000000000000))*(x349));
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(x351)+(((IkReal(-1.00000000000000))*(py)*(x352)))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x350)))+(((IkReal(-1.00000000000000))*(px)*(x352))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(py)*(x349)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(x351))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x353=((IkReal(0.0450000000000000))*(sj3));
IkReal x354=((IkReal(0.300000000000000))*(cj3));
IkReal x355=((x353)+(x354));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x355)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(x355)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst16;
gconst16=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst17;
gconst17=IKsign(((((IkReal(-9.00000000000000))*((py)*(py))))+(((IkReal(-9.00000000000000))*((px)*(px))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x356=((IkReal(110.000000000000))*(pz));
IkReal x357=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst17)*(((((IkReal(-1.00000000000000))*(px)*(x356)))+(((IkReal(-1.00000000000000))*(px)*(x357)))+(((IkReal(-21.2500000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst17)*(((((IkReal(21.2500000000000))*(py)))+(((py)*(x356)))+(((py)*(x357))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst17)*(((((IkReal(-1.00000000000000))*(px)*(x356)))+(((IkReal(-1.00000000000000))*(px)*(x357)))+(((IkReal(-21.2500000000000))*(px)))))), ((gconst17)*(((((IkReal(21.2500000000000))*(py)))+(((py)*(x356)))+(((py)*(x357)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x358=IKsin(j0);
IkReal x359=IKcos(j0);
IkReal x360=((px)*(x358));
IkReal x361=((py)*(x359));
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(-1.00000000000000))*(x361)))+(((IkReal(0.0450000000000000))*(cj3)))+(x360)+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((((px)*(x359)))+(((py)*(x358))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x361)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(x360))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x362=((IkReal(0.300000000000000))*(sj3));
IkReal x363=((IkReal(0.0450000000000000))*(px));
IkReal x364=((IkReal(0.0450000000000000))*(py));
if( IKabs(((gconst16)*(((((IkReal(-1.00000000000000))*(x363)))+(((cj3)*(x363)))+(((IkReal(-1.00000000000000))*(px)*(x362))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst16)*(((x364)+(((py)*(x362)))+(((IkReal(-1.00000000000000))*(cj3)*(x364))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst16)*(((((IkReal(-1.00000000000000))*(x363)))+(((cj3)*(x363)))+(((IkReal(-1.00000000000000))*(px)*(x362)))))), ((gconst16)*(((x364)+(((py)*(x362)))+(((IkReal(-1.00000000000000))*(cj3)*(x364)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x365=IKsin(j0);
IkReal x366=IKcos(j0);
IkReal x367=((px)*(x365));
IkReal x368=((py)*(x366));
evalcond[0]=((IkReal(-0.0450000000000000))+(((IkReal(-1.00000000000000))*(x368)))+(((IkReal(0.0450000000000000))*(cj3)))+(x367)+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[1]=((((py)*(x365)))+(((px)*(x366))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x368)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(x367))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=pz;
evalcond[3]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst18;
gconst18=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst19;
gconst19=IKsign(((((IkReal(-0.0900000000000000))*((px)*(px))))+(((IkReal(-0.0900000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x369=((IkReal(0.330000000000000))*(cj3));
IkReal x370=((IkReal(0.0270000000000000))*(cj3));
IkReal x371=((IkReal(0.00405000000000000))*(sj3));
IkReal x372=((IkReal(0.0495000000000000))*(sj3));
if( IKabs(((gconst19)*(((((IkReal(-1.00000000000000))*(pp)*(px)))+(((IkReal(-0.0495000000000000))*(py)))+(((px)*(x372)))+(((px)*(x369)))+(((IkReal(0.392500000000000))*(px)))+(((IkReal(-1.00000000000000))*(py)*(x371)))+(((IkReal(-1.00000000000000))*(py)*(x370))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst19)*(((((IkReal(-0.0495000000000000))*(px)))+(((IkReal(-1.00000000000000))*(py)*(x369)))+(((IkReal(-1.00000000000000))*(py)*(x372)))+(((IkReal(-0.392500000000000))*(py)))+(((pp)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x370)))+(((IkReal(-1.00000000000000))*(px)*(x371))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst19)*(((((IkReal(-1.00000000000000))*(pp)*(px)))+(((IkReal(-0.0495000000000000))*(py)))+(((px)*(x372)))+(((px)*(x369)))+(((IkReal(0.392500000000000))*(px)))+(((IkReal(-1.00000000000000))*(py)*(x371)))+(((IkReal(-1.00000000000000))*(py)*(x370)))))), ((gconst19)*(((((IkReal(-0.0495000000000000))*(px)))+(((IkReal(-1.00000000000000))*(py)*(x369)))+(((IkReal(-1.00000000000000))*(py)*(x372)))+(((IkReal(-0.392500000000000))*(py)))+(((pp)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x370)))+(((IkReal(-1.00000000000000))*(px)*(x371)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x373=IKsin(j0);
IkReal x374=IKcos(j0);
IkReal x375=((px)*(x373));
IkReal x376=((py)*(x374));
IkReal x377=((px)*(x374));
IkReal x378=((py)*(x373));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(x378)+(x377));
evalcond[1]=((IkReal(-0.0450000000000000))+(((IkReal(-1.00000000000000))*(x376)))+(((IkReal(0.0450000000000000))*(cj3)))+(x375)+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x376)))+(((IkReal(0.0900000000000000))*(x375)))+(((IkReal(1.10000000000000))*(x378)))+(((IkReal(1.10000000000000))*(x377))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x379=((IkReal(0.300000000000000))*(py));
IkReal x380=((IkReal(0.0450000000000000))*(px));
IkReal x381=((IkReal(0.0450000000000000))*(py));
IkReal x382=((IkReal(0.300000000000000))*(px));
if( IKabs(((gconst18)*(((((IkReal(-0.550000000000000))*(py)))+(((cj3)*(x380)))+(((IkReal(-1.00000000000000))*(x380)))+(((IkReal(-1.00000000000000))*(cj3)*(x379)))+(((IkReal(-1.00000000000000))*(sj3)*(x381)))+(((IkReal(-1.00000000000000))*(sj3)*(x382))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst18)*(((((IkReal(-0.550000000000000))*(px)))+(x381)+(((sj3)*(x379)))+(((IkReal(-1.00000000000000))*(sj3)*(x380)))+(((IkReal(-1.00000000000000))*(cj3)*(x381)))+(((IkReal(-1.00000000000000))*(cj3)*(x382))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst18)*(((((IkReal(-0.550000000000000))*(py)))+(((cj3)*(x380)))+(((IkReal(-1.00000000000000))*(x380)))+(((IkReal(-1.00000000000000))*(cj3)*(x379)))+(((IkReal(-1.00000000000000))*(sj3)*(x381)))+(((IkReal(-1.00000000000000))*(sj3)*(x382)))))), ((gconst18)*(((((IkReal(-0.550000000000000))*(px)))+(x381)+(((sj3)*(x379)))+(((IkReal(-1.00000000000000))*(sj3)*(x380)))+(((IkReal(-1.00000000000000))*(cj3)*(x381)))+(((IkReal(-1.00000000000000))*(cj3)*(x382)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x383=IKsin(j0);
IkReal x384=IKcos(j0);
IkReal x385=((px)*(x383));
IkReal x386=((py)*(x384));
IkReal x387=((px)*(x384));
IkReal x388=((py)*(x383));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(x387)+(x388));
evalcond[1]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(x385)+(((IkReal(-1.00000000000000))*(x386)))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x386)))+(((IkReal(1.10000000000000))*(x388)))+(((IkReal(1.10000000000000))*(x387)))+(((IkReal(0.0900000000000000))*(x385)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-1.00000000000000))*(pz));
evalcond[3]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst20;
gconst20=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst21;
gconst21=IKsign(((((IkReal(1.10000000000000))*((py)*(py))))+(((IkReal(1.10000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x389=((cj3)*(py));
IkReal x390=((py)*(sj3));
IkReal x391=((IkReal(1.00000000000000))*(pp));
IkReal x392=((cj3)*(px));
IkReal x393=((px)*(sj3));
if( IKabs(((gconst21)*(((((IkReal(-0.00405000000000000))*(x389)))+(((IkReal(0.0495000000000000))*(px)))+(((IkReal(-0.0495000000000000))*(x392)))+(((IkReal(0.0270000000000000))*(x390)))+(((IkReal(-1.00000000000000))*(py)*(x391)))+(((IkReal(0.330000000000000))*(x393)))+(((IkReal(-0.208450000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst21)*(((((IkReal(0.0495000000000000))*(x389)))+(((IkReal(0.0270000000000000))*(x393)))+(((IkReal(-0.330000000000000))*(x390)))+(((IkReal(-0.0495000000000000))*(py)))+(((IkReal(-0.00405000000000000))*(x392)))+(((IkReal(-1.00000000000000))*(px)*(x391)))+(((IkReal(-0.208450000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst21)*(((((IkReal(-0.00405000000000000))*(x389)))+(((IkReal(0.0495000000000000))*(px)))+(((IkReal(-0.0495000000000000))*(x392)))+(((IkReal(0.0270000000000000))*(x390)))+(((IkReal(-1.00000000000000))*(py)*(x391)))+(((IkReal(0.330000000000000))*(x393)))+(((IkReal(-0.208450000000000))*(py)))))), ((gconst21)*(((((IkReal(0.0495000000000000))*(x389)))+(((IkReal(0.0270000000000000))*(x393)))+(((IkReal(-0.330000000000000))*(x390)))+(((IkReal(-0.0495000000000000))*(py)))+(((IkReal(-0.00405000000000000))*(x392)))+(((IkReal(-1.00000000000000))*(px)*(x391)))+(((IkReal(-0.208450000000000))*(px)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x394=IKsin(j0);
IkReal x395=IKcos(j0);
IkReal x396=((px)*(x394));
IkReal x397=((IkReal(1.00000000000000))*(x395));
IkReal x398=((py)*(x394));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x398)))+(((IkReal(-0.300000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(px)*(x397))));
evalcond[1]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(x396)+(((IkReal(-1.00000000000000))*(py)*(x397)))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.10000000000000))*(px)*(x395)))+(((IkReal(-1.10000000000000))*(x398)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(py)*(x395)))+(((IkReal(0.0900000000000000))*(x396))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x399=((IkReal(0.300000000000000))*(py));
IkReal x400=((IkReal(0.0450000000000000))*(px));
IkReal x401=((IkReal(0.0450000000000000))*(py));
IkReal x402=((IkReal(0.300000000000000))*(px));
if( IKabs(((gconst20)*(((((IkReal(-0.550000000000000))*(py)))+(((IkReal(-1.00000000000000))*(cj3)*(x400)))+(((sj3)*(x402)))+(x400)+(((IkReal(-1.00000000000000))*(cj3)*(x399)))+(((IkReal(-1.00000000000000))*(sj3)*(x401))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst20)*(((((IkReal(-0.550000000000000))*(px)))+(((IkReal(-1.00000000000000))*(cj3)*(x402)))+(((IkReal(-1.00000000000000))*(sj3)*(x399)))+(((IkReal(-1.00000000000000))*(sj3)*(x400)))+(((cj3)*(x401)))+(((IkReal(-1.00000000000000))*(x401))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst20)*(((((IkReal(-0.550000000000000))*(py)))+(((IkReal(-1.00000000000000))*(cj3)*(x400)))+(((sj3)*(x402)))+(x400)+(((IkReal(-1.00000000000000))*(cj3)*(x399)))+(((IkReal(-1.00000000000000))*(sj3)*(x401)))))), ((gconst20)*(((((IkReal(-0.550000000000000))*(px)))+(((IkReal(-1.00000000000000))*(cj3)*(x402)))+(((IkReal(-1.00000000000000))*(sj3)*(x399)))+(((IkReal(-1.00000000000000))*(sj3)*(x400)))+(((cj3)*(x401)))+(((IkReal(-1.00000000000000))*(x401)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x403=IKsin(j0);
IkReal x404=IKcos(j0);
IkReal x405=((px)*(x403));
IkReal x406=((IkReal(1.00000000000000))*(x404));
IkReal x407=((py)*(x403));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(px)*(x406)))+(((IkReal(-1.00000000000000))*(x407))));
evalcond[1]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(x405)+(((IkReal(-1.00000000000000))*(py)*(x406)))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x405)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(x407)))+(((IkReal(-1.10000000000000))*(px)*(x404)))+(((IkReal(-0.0900000000000000))*(py)*(x404))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x408=((px)*(sj3));
IkReal x409=((IkReal(0.300000000000000))*(cj3));
IkReal x410=((IkReal(0.300000000000000))*(sj1));
IkReal x411=((py)*(sj3));
IkReal x412=((IkReal(1.00000000000000))*(cj1)*(pz));
IkReal x413=((IkReal(0.0450000000000000))*(py)*(sj1));
IkReal x414=((IkReal(0.0450000000000000))*(px)*(sj1));
if( IKabs(((gconst13)*(((((IkReal(0.0450000000000000))*(x411)))+(((py)*(x409)))+(((IkReal(-1.00000000000000))*(cj3)*(x414)))+(((x408)*(x410)))+(x414)+(((IkReal(-1.00000000000000))*(py)*(x412)))+(((IkReal(0.550000000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst13)*(((((IkReal(0.0450000000000000))*(x408)))+(((IkReal(-1.00000000000000))*(px)*(x412)))+(((px)*(x409)))+(((IkReal(-1.00000000000000))*(x410)*(x411)))+(((IkReal(-1.00000000000000))*(x413)))+(((IkReal(0.550000000000000))*(px)))+(((cj3)*(x413))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst13)*(((((IkReal(0.0450000000000000))*(x411)))+(((py)*(x409)))+(((IkReal(-1.00000000000000))*(cj3)*(x414)))+(((x408)*(x410)))+(x414)+(((IkReal(-1.00000000000000))*(py)*(x412)))+(((IkReal(0.550000000000000))*(py)))))), ((gconst13)*(((((IkReal(0.0450000000000000))*(x408)))+(((IkReal(-1.00000000000000))*(px)*(x412)))+(((px)*(x409)))+(((IkReal(-1.00000000000000))*(x410)*(x411)))+(((IkReal(-1.00000000000000))*(x413)))+(((IkReal(0.550000000000000))*(px)))+(((cj3)*(x413)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x415=IKsin(j0);
IkReal x416=IKcos(j0);
IkReal x417=((IkReal(0.300000000000000))*(cj3));
IkReal x418=((IkReal(0.0450000000000000))*(sj3));
IkReal x419=((IkReal(1.00000000000000))*(py));
IkReal x420=((cj1)*(pz));
IkReal x421=((px)*(x415));
IkReal x422=((px)*(x416));
IkReal x423=((py)*(sj1)*(x415));
evalcond[0]=((IkReal(-0.550000000000000))+(x423)+(x420)+(((IkReal(-1.00000000000000))*(x418)))+(((IkReal(-1.00000000000000))*(x417)))+(((sj1)*(x422))));
evalcond[1]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(x421)+(((IkReal(-1.00000000000000))*(x416)*(x419)))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj1)*(x415)*(x419)))+(((pz)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(x422))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x422)))+(((sj1)*(x418)))+(((sj1)*(x417)))+(((IkReal(-1.00000000000000))*(x415)*(x419)))+(((IkReal(0.550000000000000))*(sj1))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x423)))+(((IkReal(1.10000000000000))*(x420)))+(((IkReal(0.0900000000000000))*(x421)))+(((IkReal(1.10000000000000))*(sj1)*(x422)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(py)*(x416))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x424=((IkReal(0.0450000000000000))*(cj1));
IkReal x425=((pz)*(sj1));
IkReal x426=((IkReal(0.300000000000000))*(cj1)*(sj3));
if( IKabs(((gconst12)*(((((IkReal(-1.00000000000000))*(cj3)*(px)*(x424)))+(((py)*(x425)))+(((px)*(x424)))+(((px)*(x426))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst12)*(((((cj3)*(py)*(x424)))+(((IkReal(-1.00000000000000))*(py)*(x424)))+(((IkReal(-1.00000000000000))*(py)*(x426)))+(((px)*(x425))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst12)*(((((IkReal(-1.00000000000000))*(cj3)*(px)*(x424)))+(((py)*(x425)))+(((px)*(x424)))+(((px)*(x426)))))), ((gconst12)*(((((cj3)*(py)*(x424)))+(((IkReal(-1.00000000000000))*(py)*(x424)))+(((IkReal(-1.00000000000000))*(py)*(x426)))+(((px)*(x425)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x427=IKsin(j0);
IkReal x428=IKcos(j0);
IkReal x429=((IkReal(0.300000000000000))*(cj3));
IkReal x430=((IkReal(0.0450000000000000))*(sj3));
IkReal x431=((IkReal(1.00000000000000))*(py));
IkReal x432=((cj1)*(pz));
IkReal x433=((px)*(x427));
IkReal x434=((px)*(x428));
IkReal x435=((py)*(sj1)*(x427));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x430)))+(((IkReal(-1.00000000000000))*(x429)))+(x432)+(x435)+(((sj1)*(x434))));
evalcond[1]=((IkReal(-0.0450000000000000))+(((IkReal(0.0450000000000000))*(cj3)))+(x433)+(((IkReal(-1.00000000000000))*(x428)*(x431)))+(((IkReal(-0.300000000000000))*(sj3))));
evalcond[2]=((((pz)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(x427)*(x431)))+(((IkReal(-1.00000000000000))*(cj1)*(x434))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x427)*(x431)))+(((IkReal(-1.00000000000000))*(x434)))+(((IkReal(0.550000000000000))*(sj1)))+(((sj1)*(x429)))+(((sj1)*(x430))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x435)))+(((IkReal(1.10000000000000))*(x432)))+(((IkReal(-0.0900000000000000))*(py)*(x428)))+(((IkReal(1.10000000000000))*(sj1)*(x434)))+(((IkReal(0.0900000000000000))*(x433)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x436=((IkReal(-0.550000000000000))+(((IkReal(-0.0450000000000000))*(sj3)))+(((IkReal(-0.300000000000000))*(cj3)))+(pz));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x436;
evalcond[3]=x436;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst23;
gconst23=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst22;
IkReal x437=((IkReal(1.00000000000000))*(sj2));
gconst22=IKsign(((((IkReal(-1.00000000000000))*(x437)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x437)*((py)*(py))))));
IkReal x438=((IkReal(1.00000000000000))*(sj2));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x438)*((py)*(py))))+(((IkReal(-1.00000000000000))*(x438)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x439=x436;
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x439;
evalcond[3]=x439;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst24;
gconst24=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst25;
gconst25=IKsign(((((IkReal(-9.00000000000000))*((py)*(py))))+(((IkReal(-9.00000000000000))*((px)*(px))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x440=((IkReal(110.000000000000))*(pz));
IkReal x441=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst25)*(((((py)*(x440)))+(((IkReal(-21.2500000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x441))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst25)*(((((px)*(x440)))+(((IkReal(-21.2500000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x441))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst25)*(((((py)*(x440)))+(((IkReal(-21.2500000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x441)))))), ((gconst25)*(((((px)*(x440)))+(((IkReal(-21.2500000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x441)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x442=IKcos(j0);
IkReal x443=IKsin(j0);
IkReal x444=((IkReal(1.00000000000000))*(py));
IkReal x445=((px)*(x442));
evalcond[0]=((((px)*(x443)))+(((IkReal(-1.00000000000000))*(x442)*(x444))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x445)))+(((IkReal(-1.00000000000000))*(x443)*(x444)))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(py)*(x443)))+(((IkReal(0.0900000000000000))*(x445)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x446=((IkReal(0.300000000000000))*(sj3));
IkReal x447=((IkReal(0.0450000000000000))*(px));
IkReal x448=((IkReal(0.0450000000000000))*(py));
if( IKabs(((gconst24)*(((((IkReal(-1.00000000000000))*(cj3)*(x448)))+(((py)*(x446)))+(x448))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst24)*(((((IkReal(-1.00000000000000))*(cj3)*(x447)))+(((px)*(x446)))+(x447))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst24)*(((((IkReal(-1.00000000000000))*(cj3)*(x448)))+(((py)*(x446)))+(x448)))), ((gconst24)*(((((IkReal(-1.00000000000000))*(cj3)*(x447)))+(((px)*(x446)))+(x447)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x449=IKcos(j0);
IkReal x450=IKsin(j0);
IkReal x451=((IkReal(1.00000000000000))*(py));
IkReal x452=((px)*(x449));
evalcond[0]=((((px)*(x450)))+(((IkReal(-1.00000000000000))*(x449)*(x451))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x452)))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x450)*(x451)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x452)))+(((IkReal(0.0900000000000000))*(py)*(x450)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x453=x436;
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x453;
evalcond[3]=x453;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst26;
gconst26=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst27;
gconst27=IKsign(((((IkReal(9.00000000000000))*((px)*(px))))+(((IkReal(9.00000000000000))*((py)*(py))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x454=((IkReal(110.000000000000))*(pz));
IkReal x455=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst27)*(((((IkReal(-1.00000000000000))*(py)*(x455)))+(((IkReal(-21.2500000000000))*(py)))+(((py)*(x454))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst27)*(((((px)*(x454)))+(((IkReal(-21.2500000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x455))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst27)*(((((IkReal(-1.00000000000000))*(py)*(x455)))+(((IkReal(-21.2500000000000))*(py)))+(((py)*(x454)))))), ((gconst27)*(((((px)*(x454)))+(((IkReal(-21.2500000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x455)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x456=IKsin(j0);
IkReal x457=IKcos(j0);
IkReal x458=((px)*(x457));
IkReal x459=((py)*(x456));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x457)))+(((px)*(x456))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(x458)+(x459)+(((IkReal(0.300000000000000))*(sj3))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x458)))+(((IkReal(-0.0900000000000000))*(x459)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x460=((IkReal(0.300000000000000))*(sj3));
IkReal x461=((IkReal(0.0450000000000000))*(px));
IkReal x462=((IkReal(0.0450000000000000))*(py));
if( IKabs(((gconst26)*(((x462)+(((py)*(x460)))+(((IkReal(-1.00000000000000))*(cj3)*(x462))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst26)*(((x461)+(((px)*(x460)))+(((IkReal(-1.00000000000000))*(cj3)*(x461))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst26)*(((x462)+(((py)*(x460)))+(((IkReal(-1.00000000000000))*(cj3)*(x462)))))), ((gconst26)*(((x461)+(((px)*(x460)))+(((IkReal(-1.00000000000000))*(cj3)*(x461)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x463=IKsin(j0);
IkReal x464=IKcos(j0);
IkReal x465=((px)*(x464));
IkReal x466=((py)*(x463));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x464)))+(((px)*(x463))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(x466)+(x465)+(((IkReal(0.300000000000000))*(sj3))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(x465)))+(((IkReal(-0.0900000000000000))*(x466))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x467=(sj2)*(sj2);
IkReal x468=((cj2)*(sj2));
IkReal x469=((IkReal(0.300000000000000))*(sj3));
IkReal x470=((IkReal(0.0450000000000000))*(py));
IkReal x471=((IkReal(0.0450000000000000))*(cj3)*(px));
IkReal x472=((px)*(x467));
IkReal x473=((x467)*(x470));
if( IKabs(((gconst22)*(((((IkReal(-1.00000000000000))*(x467)*(x471)))+(((x469)*(x472)))+(((IkReal(-1.00000000000000))*(x468)*(x470)))+(((IkReal(-1.00000000000000))*(py)*(x468)*(x469)))+(((cj3)*(x468)*(x470)))+(((IkReal(0.0450000000000000))*(x472))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst22)*(((((cj3)*(x473)))+(((IkReal(-1.00000000000000))*(x473)))+(((IkReal(-1.00000000000000))*(px)*(x468)*(x469)))+(((IkReal(-1.00000000000000))*(py)*(x467)*(x469)))+(((x468)*(x471)))+(((IkReal(-0.0450000000000000))*(px)*(x468))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst22)*(((((IkReal(-1.00000000000000))*(x467)*(x471)))+(((x469)*(x472)))+(((IkReal(-1.00000000000000))*(x468)*(x470)))+(((IkReal(-1.00000000000000))*(py)*(x468)*(x469)))+(((cj3)*(x468)*(x470)))+(((IkReal(0.0450000000000000))*(x472)))))), ((gconst22)*(((((cj3)*(x473)))+(((IkReal(-1.00000000000000))*(x473)))+(((IkReal(-1.00000000000000))*(px)*(x468)*(x469)))+(((IkReal(-1.00000000000000))*(py)*(x467)*(x469)))+(((x468)*(x471)))+(((IkReal(-0.0450000000000000))*(px)*(x468)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x474=IKcos(j0);
IkReal x475=IKsin(j0);
IkReal x476=((IkReal(0.0450000000000000))*(cj2));
IkReal x477=((IkReal(0.0900000000000000))*(sj2));
IkReal x478=((IkReal(0.300000000000000))*(sj3));
IkReal x479=((IkReal(0.0450000000000000))*(cj3));
IkReal x480=((IkReal(0.0900000000000000))*(cj2));
IkReal x481=((IkReal(1.00000000000000))*(cj2));
IkReal x482=((px)*(x475));
IkReal x483=((px)*(x474));
IkReal x484=((py)*(x474));
IkReal x485=((py)*(x475));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj2)*(x479)))+(((IkReal(0.0450000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(x484)))+(x482)+(((sj2)*(x478))));
evalcond[1]=((((cj2)*(x482)))+(((IkReal(-1.00000000000000))*(x481)*(x484)))+(((sj2)*(x485)))+(((sj2)*(x483))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x479)))+(((IkReal(-1.00000000000000))*(x481)*(x483)))+(((IkReal(-1.00000000000000))*(x481)*(x485)))+(((IkReal(-1.00000000000000))*(sj2)*(x484)))+(x478)+(((sj2)*(x482))));
evalcond[3]=((((cj2)*(x478)))+(((IkReal(-1.00000000000000))*(x485)))+(((IkReal(-1.00000000000000))*(x483)))+(x476)+(((IkReal(-1.00000000000000))*(cj3)*(x476))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((x480)*(x483)))+(((x480)*(x485)))+(((IkReal(1.10000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x477)*(x482)))+(((x477)*(x484))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x486=((px)*(sj2));
IkReal x487=((IkReal(0.300000000000000))*(sj3));
IkReal x488=((cj2)*(py));
IkReal x489=((cj2)*(px));
IkReal x490=((IkReal(0.0450000000000000))*(cj3));
IkReal x491=((py)*(sj2));
IkReal x492=((cj2)*(x490));
if( IKabs(((gconst23)*(((((IkReal(-1.00000000000000))*(x486)*(x487)))+(((IkReal(-1.00000000000000))*(x488)*(x490)))+(((IkReal(-0.0450000000000000))*(x486)))+(((IkReal(0.0450000000000000))*(x488)))+(((x486)*(x490)))+(((x487)*(x488))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst23)*(((((IkReal(-1.00000000000000))*(x489)*(x490)))+(((IkReal(-1.00000000000000))*(x490)*(x491)))+(((IkReal(0.0450000000000000))*(x489)))+(((IkReal(0.0450000000000000))*(x491)))+(((x487)*(x491)))+(((x487)*(x489))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst23)*(((((IkReal(-1.00000000000000))*(x486)*(x487)))+(((IkReal(-1.00000000000000))*(x488)*(x490)))+(((IkReal(-0.0450000000000000))*(x486)))+(((IkReal(0.0450000000000000))*(x488)))+(((x486)*(x490)))+(((x487)*(x488)))))), ((gconst23)*(((((IkReal(-1.00000000000000))*(x489)*(x490)))+(((IkReal(-1.00000000000000))*(x490)*(x491)))+(((IkReal(0.0450000000000000))*(x489)))+(((IkReal(0.0450000000000000))*(x491)))+(((x487)*(x491)))+(((x487)*(x489)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x493=IKcos(j0);
IkReal x494=IKsin(j0);
IkReal x495=((IkReal(0.0450000000000000))*(cj2));
IkReal x496=((IkReal(0.0900000000000000))*(sj2));
IkReal x497=((IkReal(0.300000000000000))*(sj3));
IkReal x498=((IkReal(0.0450000000000000))*(cj3));
IkReal x499=((IkReal(0.0900000000000000))*(cj2));
IkReal x500=((IkReal(1.00000000000000))*(cj2));
IkReal x501=((px)*(x494));
IkReal x502=((px)*(x493));
IkReal x503=((py)*(x493));
IkReal x504=((py)*(x494));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj2)*(x498)))+(((IkReal(0.0450000000000000))*(sj2)))+(x501)+(((sj2)*(x497)))+(((IkReal(-1.00000000000000))*(x503))));
evalcond[1]=((((sj2)*(x502)))+(((sj2)*(x504)))+(((cj2)*(x501)))+(((IkReal(-1.00000000000000))*(x500)*(x503))));
evalcond[2]=((IkReal(0.0450000000000000))+(((sj2)*(x501)))+(((IkReal(-1.00000000000000))*(x498)))+(x497)+(((IkReal(-1.00000000000000))*(sj2)*(x503)))+(((IkReal(-1.00000000000000))*(x500)*(x502)))+(((IkReal(-1.00000000000000))*(x500)*(x504))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj3)*(x495)))+(x495)+(((IkReal(-1.00000000000000))*(x502)))+(((IkReal(-1.00000000000000))*(x504)))+(((cj2)*(x497))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x496)*(x501)))+(((IkReal(-1.00000000000000))*(pp)))+(((x496)*(x503)))+(((IkReal(1.10000000000000))*(pz)))+(((x499)*(x504)))+(((x499)*(x502))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x505=((IkReal(0.0450000000000000))*(sj3));
IkReal x506=((IkReal(0.300000000000000))*(cj3));
IkReal x507=((x505)+(x506));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x507)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x507));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst28;
gconst28=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst29;
gconst29=IKsign(((((sj2)*((px)*(px))))+(((sj2)*((py)*(py))))));
dummyeval[0]=((((sj2)*((px)*(px))))+(((sj2)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x508=((IkReal(0.0450000000000000))*(sj3));
IkReal x509=((IkReal(0.300000000000000))*(cj3));
IkReal x510=((x508)+(x509));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x510))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x510));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst30;
gconst30=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst31;
gconst31=IKsign(((((IkReal(9.00000000000000))*((px)*(px))))+(((IkReal(9.00000000000000))*((py)*(py))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x511=((IkReal(110.000000000000))*(pz));
IkReal x512=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst31)*(((((IkReal(-21.2500000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x511)))+(((IkReal(-1.00000000000000))*(py)*(x512))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst31)*(((((IkReal(-1.00000000000000))*(px)*(x511)))+(((IkReal(-1.00000000000000))*(px)*(x512)))+(((IkReal(-21.2500000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst31)*(((((IkReal(-21.2500000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x511)))+(((IkReal(-1.00000000000000))*(py)*(x512)))))), ((gconst31)*(((((IkReal(-1.00000000000000))*(px)*(x511)))+(((IkReal(-1.00000000000000))*(px)*(x512)))+(((IkReal(-21.2500000000000))*(px)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x513=IKsin(j0);
IkReal x514=IKcos(j0);
IkReal x515=((px)*(x514));
IkReal x516=((py)*(x513));
evalcond[0]=((((px)*(x513)))+(((IkReal(-1.00000000000000))*(py)*(x514))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(x516)+(x515)+(((IkReal(0.300000000000000))*(sj3))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(x515)))+(((IkReal(-0.0900000000000000))*(x516))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x517=((IkReal(0.300000000000000))*(sj3));
IkReal x518=((IkReal(0.0450000000000000))*(px));
IkReal x519=((IkReal(0.0450000000000000))*(py));
if( IKabs(((gconst30)*(((((IkReal(-1.00000000000000))*(cj3)*(x519)))+(((py)*(x517)))+(x519))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst30)*(((((px)*(x517)))+(((IkReal(-1.00000000000000))*(cj3)*(x518)))+(x518))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst30)*(((((IkReal(-1.00000000000000))*(cj3)*(x519)))+(((py)*(x517)))+(x519)))), ((gconst30)*(((((px)*(x517)))+(((IkReal(-1.00000000000000))*(cj3)*(x518)))+(x518)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x520=IKsin(j0);
IkReal x521=IKcos(j0);
IkReal x522=((px)*(x521));
IkReal x523=((py)*(x520));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x521)))+(((px)*(x520))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(-0.0450000000000000))*(cj3)))+(x522)+(x523)+(((IkReal(0.300000000000000))*(sj3))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(-0.0900000000000000))*(x522)))+(((IkReal(-0.0900000000000000))*(x523))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x524=((IkReal(0.0450000000000000))*(sj3));
IkReal x525=((IkReal(0.300000000000000))*(cj3));
IkReal x526=((x524)+(x525));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x526)))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.550000000000000))+(pz)+(x526));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst32;
gconst32=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst33;
gconst33=IKsign(((((IkReal(-9.00000000000000))*((py)*(py))))+(((IkReal(-9.00000000000000))*((px)*(px))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x527=((IkReal(110.000000000000))*(pz));
IkReal x528=((IkReal(100.000000000000))*(pp));
if( IKabs(((gconst33)*(((((IkReal(-1.00000000000000))*(py)*(x527)))+(((IkReal(-1.00000000000000))*(py)*(x528)))+(((IkReal(-21.2500000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst33)*(((((IkReal(-1.00000000000000))*(px)*(x528)))+(((IkReal(-1.00000000000000))*(px)*(x527)))+(((IkReal(-21.2500000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst33)*(((((IkReal(-1.00000000000000))*(py)*(x527)))+(((IkReal(-1.00000000000000))*(py)*(x528)))+(((IkReal(-21.2500000000000))*(py)))))), ((gconst33)*(((((IkReal(-1.00000000000000))*(px)*(x528)))+(((IkReal(-1.00000000000000))*(px)*(x527)))+(((IkReal(-21.2500000000000))*(px)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x529=IKcos(j0);
IkReal x530=IKsin(j0);
IkReal x531=((IkReal(1.00000000000000))*(py));
IkReal x532=((px)*(x529));
evalcond[0]=((((IkReal(-1.00000000000000))*(x529)*(x531)))+(((px)*(x530))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x532)))+(((IkReal(-1.00000000000000))*(x530)*(x531)))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x532)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(x530))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x533=((IkReal(0.300000000000000))*(sj3));
IkReal x534=((IkReal(0.0450000000000000))*(px));
IkReal x535=((IkReal(0.0450000000000000))*(py));
if( IKabs(((gconst32)*(((((IkReal(-1.00000000000000))*(cj3)*(x535)))+(x535)+(((py)*(x533))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst32)*(((((IkReal(-1.00000000000000))*(cj3)*(x534)))+(((px)*(x533)))+(x534))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst32)*(((((IkReal(-1.00000000000000))*(cj3)*(x535)))+(x535)+(((py)*(x533)))))), ((gconst32)*(((((IkReal(-1.00000000000000))*(cj3)*(x534)))+(((px)*(x533)))+(x534)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x536=IKcos(j0);
IkReal x537=IKsin(j0);
IkReal x538=((IkReal(1.00000000000000))*(py));
IkReal x539=((px)*(x536));
evalcond[0]=((((px)*(x537)))+(((IkReal(-1.00000000000000))*(x536)*(x538))));
evalcond[1]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x537)*(x538)))+(((IkReal(-1.00000000000000))*(x539)))+(((IkReal(-0.0450000000000000))*(cj3)))+(((IkReal(0.300000000000000))*(sj3))));
evalcond[2]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x539)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((IkReal(0.0900000000000000))*(py)*(x537))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x540=(sj2)*(sj2);
IkReal x541=((cj2)*(sj2));
IkReal x542=((IkReal(0.300000000000000))*(sj3));
IkReal x543=((IkReal(0.0450000000000000))*(py));
IkReal x544=((IkReal(0.0450000000000000))*(cj3)*(px));
IkReal x545=((px)*(x540));
IkReal x546=((x540)*(x543));
if( IKabs(((gconst29)*(((((IkReal(-1.00000000000000))*(x541)*(x543)))+(((IkReal(-1.00000000000000))*(x542)*(x545)))+(((IkReal(-0.0450000000000000))*(x545)))+(((cj3)*(x541)*(x543)))+(((x540)*(x544)))+(((IkReal(-1.00000000000000))*(py)*(x541)*(x542))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst29)*(((((IkReal(-1.00000000000000))*(px)*(x541)*(x542)))+(((x541)*(x544)))+(((IkReal(-1.00000000000000))*(cj3)*(x546)))+(((py)*(x540)*(x542)))+(x546)+(((IkReal(-0.0450000000000000))*(px)*(x541))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst29)*(((((IkReal(-1.00000000000000))*(x541)*(x543)))+(((IkReal(-1.00000000000000))*(x542)*(x545)))+(((IkReal(-0.0450000000000000))*(x545)))+(((cj3)*(x541)*(x543)))+(((x540)*(x544)))+(((IkReal(-1.00000000000000))*(py)*(x541)*(x542)))))), ((gconst29)*(((((IkReal(-1.00000000000000))*(px)*(x541)*(x542)))+(((x541)*(x544)))+(((IkReal(-1.00000000000000))*(cj3)*(x546)))+(((py)*(x540)*(x542)))+(x546)+(((IkReal(-0.0450000000000000))*(px)*(x541)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x547=IKsin(j0);
IkReal x548=IKcos(j0);
IkReal x549=((IkReal(0.0450000000000000))*(cj2));
IkReal x550=((IkReal(0.0900000000000000))*(sj2));
IkReal x551=((IkReal(0.300000000000000))*(sj3));
IkReal x552=((IkReal(0.0450000000000000))*(cj3));
IkReal x553=((IkReal(1.00000000000000))*(sj2));
IkReal x554=((IkReal(0.0900000000000000))*(cj2));
IkReal x555=((px)*(x547));
IkReal x556=((px)*(x548));
IkReal x557=((py)*(x548));
IkReal x558=((py)*(x547));
evalcond[0]=((((IkReal(-1.00000000000000))*(x557)))+(((IkReal(0.0450000000000000))*(sj2)))+(((sj2)*(x551)))+(((IkReal(-1.00000000000000))*(sj2)*(x552)))+(x555));
evalcond[1]=((((IkReal(-1.00000000000000))*(x553)*(x558)))+(((IkReal(-1.00000000000000))*(x553)*(x556)))+(((IkReal(-1.00000000000000))*(cj2)*(x557)))+(((cj2)*(x555))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x553)*(x557)))+(((sj2)*(x555)))+(((IkReal(-1.00000000000000))*(x552)))+(x551)+(((cj2)*(x558)))+(((cj2)*(x556))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x556)))+(((IkReal(-1.00000000000000))*(x558)))+(((IkReal(-1.00000000000000))*(cj2)*(x551)))+(((IkReal(-1.00000000000000))*(x549)))+(((cj3)*(x549))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x554)*(x558)))+(((IkReal(-1.00000000000000))*(x554)*(x556)))+(((IkReal(-1.00000000000000))*(x550)*(x555)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((x550)*(x557))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x559=((px)*(sj2));
IkReal x560=((IkReal(0.300000000000000))*(sj3));
IkReal x561=((cj2)*(py));
IkReal x562=((cj2)*(px));
IkReal x563=((IkReal(0.0450000000000000))*(cj3));
IkReal x564=((py)*(sj2));
IkReal x565=((py)*(x563));
if( IKabs(((gconst28)*(((((IkReal(-0.0450000000000000))*(x559)))+(((x561)*(x563)))+(((IkReal(-1.00000000000000))*(x559)*(x560)))+(((IkReal(-1.00000000000000))*(x560)*(x561)))+(((IkReal(-0.0450000000000000))*(x561)))+(((x559)*(x563))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst28)*(((((x562)*(x563)))+(((x560)*(x564)))+(((IkReal(0.0450000000000000))*(x564)))+(((IkReal(-1.00000000000000))*(x560)*(x562)))+(((IkReal(-1.00000000000000))*(x563)*(x564)))+(((IkReal(-0.0450000000000000))*(x562))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst28)*(((((IkReal(-0.0450000000000000))*(x559)))+(((x561)*(x563)))+(((IkReal(-1.00000000000000))*(x559)*(x560)))+(((IkReal(-1.00000000000000))*(x560)*(x561)))+(((IkReal(-0.0450000000000000))*(x561)))+(((x559)*(x563)))))), ((gconst28)*(((((x562)*(x563)))+(((x560)*(x564)))+(((IkReal(0.0450000000000000))*(x564)))+(((IkReal(-1.00000000000000))*(x560)*(x562)))+(((IkReal(-1.00000000000000))*(x563)*(x564)))+(((IkReal(-0.0450000000000000))*(x562)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x566=IKsin(j0);
IkReal x567=IKcos(j0);
IkReal x568=((IkReal(0.0450000000000000))*(cj2));
IkReal x569=((IkReal(0.0900000000000000))*(sj2));
IkReal x570=((IkReal(0.300000000000000))*(sj3));
IkReal x571=((IkReal(0.0450000000000000))*(cj3));
IkReal x572=((IkReal(1.00000000000000))*(sj2));
IkReal x573=((IkReal(0.0900000000000000))*(cj2));
IkReal x574=((px)*(x566));
IkReal x575=((px)*(x567));
IkReal x576=((py)*(x567));
IkReal x577=((py)*(x566));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj2)*(x571)))+(((IkReal(0.0450000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(x576)))+(((sj2)*(x570)))+(x574));
evalcond[1]=((((cj2)*(x574)))+(((IkReal(-1.00000000000000))*(x572)*(x575)))+(((IkReal(-1.00000000000000))*(x572)*(x577)))+(((IkReal(-1.00000000000000))*(cj2)*(x576))));
evalcond[2]=((IkReal(0.0450000000000000))+(((cj2)*(x575)))+(((cj2)*(x577)))+(((sj2)*(x574)))+(((IkReal(-1.00000000000000))*(x571)))+(x570)+(((IkReal(-1.00000000000000))*(x572)*(x576))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj2)*(x570)))+(((cj3)*(x568)))+(((IkReal(-1.00000000000000))*(x575)))+(((IkReal(-1.00000000000000))*(x577)))+(((IkReal(-1.00000000000000))*(x568))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x569)*(x574)))+(((IkReal(-1.00000000000000))*(x573)*(x577)))+(((IkReal(-1.00000000000000))*(x573)*(x575)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.10000000000000))*(pz)))+(((x569)*(x576))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x578=(sj1)*(sj1);
IkReal x579=(cj1)*(cj1);
IkReal x580=((px)*(sj2));
IkReal x581=((IkReal(0.550000000000000))*(cj1));
IkReal x582=((IkReal(1.00000000000000))*(pz));
IkReal x583=((cj2)*(py));
IkReal x584=((IkReal(0.300000000000000))*(cj3));
IkReal x585=((py)*(sj2));
IkReal x586=((cj2)*(px));
IkReal x587=((IkReal(0.0450000000000000))*(sj3));
IkReal x588=((cj1)*(pz));
if( IKabs(((gconst1)*(((((x583)*(x588)))+(((x580)*(x581)))+(((cj1)*(x580)*(x587)))+(((cj1)*(x580)*(x584)))+(((IkReal(-1.00000000000000))*(x578)*(x580)*(x582)))+(((IkReal(-1.00000000000000))*(x583)*(x587)))+(((IkReal(-1.00000000000000))*(x583)*(x584)))+(((IkReal(-1.00000000000000))*(x579)*(x580)*(x582)))+(((IkReal(-0.550000000000000))*(x583))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(cj1)*(x584)*(x585)))+(((IkReal(-1.00000000000000))*(x584)*(x586)))+(((IkReal(-1.00000000000000))*(x586)*(x587)))+(((x586)*(x588)))+(((pz)*(x578)*(x585)))+(((pz)*(x579)*(x585)))+(((IkReal(-0.550000000000000))*(x586)))+(((IkReal(-1.00000000000000))*(cj1)*(x585)*(x587)))+(((IkReal(-1.00000000000000))*(x581)*(x585))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst1)*(((((x583)*(x588)))+(((x580)*(x581)))+(((cj1)*(x580)*(x587)))+(((cj1)*(x580)*(x584)))+(((IkReal(-1.00000000000000))*(x578)*(x580)*(x582)))+(((IkReal(-1.00000000000000))*(x583)*(x587)))+(((IkReal(-1.00000000000000))*(x583)*(x584)))+(((IkReal(-1.00000000000000))*(x579)*(x580)*(x582)))+(((IkReal(-0.550000000000000))*(x583)))))), ((gconst1)*(((((IkReal(-1.00000000000000))*(cj1)*(x584)*(x585)))+(((IkReal(-1.00000000000000))*(x584)*(x586)))+(((IkReal(-1.00000000000000))*(x586)*(x587)))+(((x586)*(x588)))+(((pz)*(x578)*(x585)))+(((pz)*(x579)*(x585)))+(((IkReal(-0.550000000000000))*(x586)))+(((IkReal(-1.00000000000000))*(cj1)*(x585)*(x587)))+(((IkReal(-1.00000000000000))*(x581)*(x585)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x589=IKsin(j0);
IkReal x590=IKcos(j0);
IkReal x591=((cj1)*(sj2));
IkReal x592=((IkReal(0.0900000000000000))*(sj2));
IkReal x593=((IkReal(0.300000000000000))*(sj3));
IkReal x594=((IkReal(0.0450000000000000))*(cj3));
IkReal x595=((IkReal(1.10000000000000))*(sj1));
IkReal x596=((IkReal(0.300000000000000))*(cj3));
IkReal x597=((cj1)*(cj2));
IkReal x598=((IkReal(0.0450000000000000))*(sj3));
IkReal x599=((IkReal(1.00000000000000))*(sj2));
IkReal x600=((cj1)*(pz));
IkReal x601=((px)*(x589));
IkReal x602=((px)*(x590));
IkReal x603=((py)*(x590));
IkReal x604=((py)*(x589));
IkReal x605=((cj2)*(pz)*(sj1));
evalcond[0]=((IkReal(-0.550000000000000))+(((sj1)*(x604)))+(((sj1)*(x602)))+(((IkReal(-1.00000000000000))*(x598)))+(((IkReal(-1.00000000000000))*(x596)))+(x600));
evalcond[1]=((((IkReal(0.0450000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(x603)))+(((IkReal(-1.00000000000000))*(sj2)*(x594)))+(x601)+(((sj2)*(x593))));
evalcond[2]=((((cj2)*(x601)))+(((x591)*(x604)))+(((x591)*(x602)))+(((IkReal(-1.00000000000000))*(cj2)*(x603)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x599))));
evalcond[3]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x599)*(x603)))+(((IkReal(-1.00000000000000))*(x594)))+(x593)+(x605)+(((sj2)*(x601)))+(((IkReal(-1.00000000000000))*(x597)*(x602)))+(((IkReal(-1.00000000000000))*(x597)*(x604))));
evalcond[4]=((((IkReal(0.0450000000000000))*(x597)))+(((IkReal(-1.00000000000000))*(x604)))+(((IkReal(-1.00000000000000))*(x602)))+(((IkReal(-1.00000000000000))*(x594)*(x597)))+(((sj1)*(x598)))+(((sj1)*(x596)))+(((IkReal(0.550000000000000))*(sj1)))+(((x593)*(x597))));
evalcond[5]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x592)*(x601)))+(((x595)*(x604)))+(((x595)*(x602)))+(((x592)*(x603)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x600)))+(((IkReal(0.0900000000000000))*(x597)*(x602)))+(((IkReal(0.0900000000000000))*(x597)*(x604)))+(((IkReal(-0.0900000000000000))*(x605))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x606=((IkReal(0.0450000000000000))*(px));
IkReal x607=((sj1)*(sj2));
IkReal x608=((IkReal(0.300000000000000))*(cj3));
IkReal x609=((IkReal(0.300000000000000))*(sj3));
IkReal x610=((IkReal(1.00000000000000))*(cj1)*(pz));
IkReal x611=((IkReal(0.0450000000000000))*(py)*(x607));
if( IKabs(((gconst0)*(((((IkReal(0.0450000000000000))*(py)*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(x610)))+(((py)*(x608)))+(((IkReal(-1.00000000000000))*(px)*(x607)*(x609)))+(((IkReal(-1.00000000000000))*(x606)*(x607)))+(((IkReal(0.550000000000000))*(py)))+(((cj3)*(x606)*(x607))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((IkReal(-1.00000000000000))*(cj3)*(x611)))+(((px)*(x608)))+(((py)*(x607)*(x609)))+(x611)+(((IkReal(-1.00000000000000))*(px)*(x610)))+(((IkReal(0.550000000000000))*(px)))+(((sj3)*(x606))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst0)*(((((IkReal(0.0450000000000000))*(py)*(sj3)))+(((IkReal(-1.00000000000000))*(py)*(x610)))+(((py)*(x608)))+(((IkReal(-1.00000000000000))*(px)*(x607)*(x609)))+(((IkReal(-1.00000000000000))*(x606)*(x607)))+(((IkReal(0.550000000000000))*(py)))+(((cj3)*(x606)*(x607)))))), ((gconst0)*(((((IkReal(-1.00000000000000))*(cj3)*(x611)))+(((px)*(x608)))+(((py)*(x607)*(x609)))+(x611)+(((IkReal(-1.00000000000000))*(px)*(x610)))+(((IkReal(0.550000000000000))*(px)))+(((sj3)*(x606)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x612=IKsin(j0);
IkReal x613=IKcos(j0);
IkReal x614=((cj1)*(sj2));
IkReal x615=((IkReal(0.0900000000000000))*(sj2));
IkReal x616=((IkReal(0.300000000000000))*(sj3));
IkReal x617=((IkReal(0.0450000000000000))*(cj3));
IkReal x618=((IkReal(1.10000000000000))*(sj1));
IkReal x619=((IkReal(0.300000000000000))*(cj3));
IkReal x620=((cj1)*(cj2));
IkReal x621=((IkReal(0.0450000000000000))*(sj3));
IkReal x622=((IkReal(1.00000000000000))*(sj2));
IkReal x623=((cj1)*(pz));
IkReal x624=((px)*(x612));
IkReal x625=((px)*(x613));
IkReal x626=((py)*(x613));
IkReal x627=((py)*(x612));
IkReal x628=((cj2)*(pz)*(sj1));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x621)))+(((sj1)*(x627)))+(((sj1)*(x625)))+(((IkReal(-1.00000000000000))*(x619)))+(x623));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj2)*(x617)))+(((IkReal(0.0450000000000000))*(sj2)))+(x624)+(((IkReal(-1.00000000000000))*(x626)))+(((sj2)*(x616))));
evalcond[2]=((((x614)*(x625)))+(((x614)*(x627)))+(((IkReal(-1.00000000000000))*(cj2)*(x626)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)*(x622)))+(((cj2)*(x624))));
evalcond[3]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x622)*(x626)))+(((sj2)*(x624)))+(((IkReal(-1.00000000000000))*(x620)*(x625)))+(((IkReal(-1.00000000000000))*(x620)*(x627)))+(((IkReal(-1.00000000000000))*(x617)))+(x616)+(x628));
evalcond[4]=((((sj1)*(x619)))+(((x616)*(x620)))+(((IkReal(-1.00000000000000))*(x617)*(x620)))+(((sj1)*(x621)))+(((IkReal(-1.00000000000000))*(x627)))+(((IkReal(-1.00000000000000))*(x625)))+(((IkReal(0.550000000000000))*(sj1)))+(((IkReal(0.0450000000000000))*(x620))));
evalcond[5]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x620)*(x625)))+(((IkReal(0.0900000000000000))*(x620)*(x627)))+(((IkReal(-0.0900000000000000))*(x628)))+(((IkReal(1.10000000000000))*(x623)))+(((x618)*(x627)))+(((x618)*(x625)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x615)*(x624)))+(((x615)*(x626))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x629=((IkReal(0.0450000000000000))*(sj2));
if( IKabs(((IkReal(-1.00000000000000))*(py))) < IKFAST_ATAN2_MAGTHRESH && IKabs(px) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x630=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-1.00000000000000))*(py)), px)));
if( ((((px)*(px))+((py)*(py)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(0.300000000000000))*(sj2)*(sj3)))+(x629)+(((IkReal(-1.00000000000000))*(cj3)*(x629))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(0.300000000000000))*(sj2)*(sj3)))+(x629)+(((IkReal(-1.00000000000000))*(cj3)*(x629))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x631=IKasin(((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(0.300000000000000))*(sj2)*(sj3)))+(x629)+(((IkReal(-1.00000000000000))*(cj3)*(x629)))))));
j0array[0]=((((IkReal(-1.00000000000000))*(x630)))+(((IkReal(-1.00000000000000))*(x631))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x630)))+(x631));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x632=(py)*(py);
IkReal x633=(cj2)*(cj2);
IkReal x634=(sj2)*(sj2);
IkReal x635=IKcos(j0);
IkReal x636=IKsin(j0);
IkReal x637=(px)*(px);
IkReal x638=((IkReal(0.0450000000000000))*(sj2));
IkReal x639=((IkReal(1.00000000000000))*(x637));
IkReal x640=((IkReal(0.300000000000000))*(sj2)*(sj3));
IkReal x641=((px)*(py)*(x634));
IkReal x642=((px)*(py)*(x633));
evalcond[0]=((((x636)*(((((IkReal(-1.00000000000000))*(x642)))+(((IkReal(-1.00000000000000))*(x641)))))))+(((cj3)*(py)*(x638)))+(((IkReal(-1.00000000000000))*(py)*(x640)))+(((x635)*(((((x632)*(x634)))+(((x632)*(x633)))))))+(((IkReal(-1.00000000000000))*(py)*(x638))));
evalcond[1]=((((x636)*(((((IkReal(-1.00000000000000))*(x633)*(x639)))+(((IkReal(-1.00000000000000))*(x634)*(x639)))))))+(((IkReal(-1.00000000000000))*(px)*(x640)))+(((cj3)*(px)*(x638)))+(((IkReal(-1.00000000000000))*(px)*(x638)))+(((x635)*(((x642)+(x641))))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst34;
IkReal x643=((py)*(sj0));
IkReal x644=((IkReal(0.300000000000000))*(cj3));
IkReal x645=((cj0)*(px));
IkReal x646=((cj2)*(pz));
IkReal x647=((IkReal(0.0450000000000000))*(sj3));
gconst34=IKsign(((((IkReal(0.0450000000000000))*(cj3)*(x646)))+(((IkReal(-0.550000000000000))*(x645)))+(((IkReal(-0.550000000000000))*(x643)))+(((IkReal(-0.300000000000000))*(sj3)*(x646)))+(((IkReal(-1.00000000000000))*(x644)*(x645)))+(((IkReal(-1.00000000000000))*(x643)*(x644)))+(((IkReal(-1.00000000000000))*(x643)*(x647)))+(((IkReal(-0.0450000000000000))*(x646)))+(((IkReal(-1.00000000000000))*(x645)*(x647)))));
IkReal x648=((py)*(sj0));
IkReal x649=((cj2)*(pz));
IkReal x650=((IkReal(6.66666666666667))*(cj3));
IkReal x651=((cj0)*(px));
IkReal x652=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-6.66666666666667))*(sj3)*(x649)))+(((IkReal(-1.00000000000000))*(x649)))+(((IkReal(-1.00000000000000))*(x651)*(x652)))+(((IkReal(-12.2222222222222))*(x651)))+(((cj3)*(x649)))+(((IkReal(-1.00000000000000))*(x650)*(x651)))+(((IkReal(-1.00000000000000))*(x648)*(x652)))+(((IkReal(-1.00000000000000))*(x648)*(x650)))+(((IkReal(-12.2222222222222))*(x648))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst35;
gconst35=IKsign(((((sj2)*((pz)*(pz))))+(((sj2)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0)*(sj2)))+(((sj2)*((py)*(py))*((sj0)*(sj0))))));
dummyeval[0]=((((sj2)*((pz)*(pz))))+(((sj2)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0)*(sj2)))+(((sj2)*((py)*(py))*((sj0)*(sj0)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x653=((((px)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(py))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x653;
evalcond[3]=x653;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst36;
IkReal x654=((cj0)*(px));
IkReal x655=((IkReal(0.0450000000000000))*(pz));
IkReal x656=((py)*(sj0));
IkReal x657=((IkReal(0.300000000000000))*(cj3));
IkReal x658=((IkReal(0.0450000000000000))*(sj3));
gconst36=IKsign(((((IkReal(-0.550000000000000))*(x654)))+(((IkReal(-0.550000000000000))*(x656)))+(((IkReal(-0.300000000000000))*(pz)*(sj3)))+(((IkReal(-1.00000000000000))*(x656)*(x657)))+(((IkReal(-1.00000000000000))*(x656)*(x658)))+(((cj3)*(x655)))+(((IkReal(-1.00000000000000))*(x655)))+(((IkReal(-1.00000000000000))*(x654)*(x658)))+(((IkReal(-1.00000000000000))*(x654)*(x657)))));
IkReal x659=((py)*(sj0));
IkReal x660=((IkReal(6.66666666666667))*(cj3));
IkReal x661=((cj0)*(px));
IkReal x662=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-12.2222222222222))*(x659)))+(((IkReal(-1.00000000000000))*(x659)*(x662)))+(((IkReal(-1.00000000000000))*(x659)*(x660)))+(((IkReal(-6.66666666666667))*(pz)*(sj3)))+(((IkReal(-1.00000000000000))*(x660)*(x661)))+(((IkReal(-12.2222222222222))*(x661)))+(((IkReal(-1.00000000000000))*(x661)*(x662)))+(((IkReal(-1.00000000000000))*(pz)))+(((cj3)*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst37;
gconst37=IKsign(((((IkReal(-1.00000000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*((py)*(py))*((sj0)*(sj0))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*((py)*(py))*((sj0)*(sj0)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x663=((py)*(sj0));
IkReal x664=((pz)*(sj3));
IkReal x665=((cj0)*(px));
IkReal x666=((IkReal(0.300000000000000))*(sj3));
IkReal x667=((IkReal(0.0450000000000000))*(cj3));
IkReal x668=((IkReal(0.300000000000000))*(cj3));
IkReal x669=((IkReal(0.0450000000000000))*(sj3));
if( IKabs(((gconst37)*(((((IkReal(0.300000000000000))*(x664)))+(((IkReal(-1.00000000000000))*(x665)*(x668)))+(((IkReal(-1.00000000000000))*(x665)*(x669)))+(((IkReal(-1.00000000000000))*(x663)*(x669)))+(((IkReal(-1.00000000000000))*(x663)*(x668)))+(((IkReal(0.0450000000000000))*(pz)))+(((IkReal(-0.550000000000000))*(x663)))+(((IkReal(-0.550000000000000))*(x665)))+(((IkReal(-1.00000000000000))*(pz)*(x667))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst37)*(((((IkReal(-0.550000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x665)*(x666)))+(((x665)*(x667)))+(((IkReal(-1.00000000000000))*(x663)*(x666)))+(((x663)*(x667)))+(((IkReal(-1.00000000000000))*(pz)*(x668)))+(((IkReal(-0.0450000000000000))*(x665)))+(((IkReal(-0.0450000000000000))*(x663)))+(((IkReal(-0.0450000000000000))*(x664))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst37)*(((((IkReal(0.300000000000000))*(x664)))+(((IkReal(-1.00000000000000))*(x665)*(x668)))+(((IkReal(-1.00000000000000))*(x665)*(x669)))+(((IkReal(-1.00000000000000))*(x663)*(x669)))+(((IkReal(-1.00000000000000))*(x663)*(x668)))+(((IkReal(0.0450000000000000))*(pz)))+(((IkReal(-0.550000000000000))*(x663)))+(((IkReal(-0.550000000000000))*(x665)))+(((IkReal(-1.00000000000000))*(pz)*(x667)))))), ((gconst37)*(((((IkReal(-0.550000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x665)*(x666)))+(((x665)*(x667)))+(((IkReal(-1.00000000000000))*(x663)*(x666)))+(((x663)*(x667)))+(((IkReal(-1.00000000000000))*(pz)*(x668)))+(((IkReal(-0.0450000000000000))*(x665)))+(((IkReal(-0.0450000000000000))*(x663)))+(((IkReal(-0.0450000000000000))*(x664)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x670=IKsin(j1);
IkReal x671=IKcos(j1);
IkReal x672=((IkReal(0.300000000000000))*(cj3));
IkReal x673=((IkReal(0.0450000000000000))*(cj3));
IkReal x674=((cj0)*(px));
IkReal x675=((py)*(sj0));
IkReal x676=((IkReal(0.0450000000000000))*(sj3));
IkReal x677=((IkReal(0.300000000000000))*(sj3));
IkReal x678=((IkReal(0.0450000000000000))*(x670));
IkReal x679=((IkReal(1.00000000000000))*(x671));
IkReal x680=((pz)*(x670));
IkReal x681=((pz)*(x671));
IkReal x682=((IkReal(0.0900000000000000))*(x671));
IkReal x683=((IkReal(1.10000000000000))*(x670));
evalcond[0]=((IkReal(-0.550000000000000))+(((x670)*(x674)))+(((x670)*(x675)))+(x681)+(((IkReal(-1.00000000000000))*(x676)))+(((IkReal(-1.00000000000000))*(x672))));
evalcond[1]=((((x670)*(x677)))+(((IkReal(-1.00000000000000))*(x670)*(x673)))+(((IkReal(-0.550000000000000))*(x671)))+(pz)+(x678)+(((IkReal(-1.00000000000000))*(x671)*(x672)))+(((IkReal(-1.00000000000000))*(x671)*(x676))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x675)*(x679)))+(x677)+(x680)+(((IkReal(-1.00000000000000))*(x674)*(x679)))+(((IkReal(-1.00000000000000))*(x673))));
evalcond[3]=((((IkReal(0.0450000000000000))*(x671)))+(((x671)*(x677)))+(((x670)*(x676)))+(((x670)*(x672)))+(((IkReal(0.550000000000000))*(x670)))+(((IkReal(-1.00000000000000))*(x674)))+(((IkReal(-1.00000000000000))*(x675)))+(((IkReal(-1.00000000000000))*(x671)*(x673))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x681)))+(((x674)*(x683)))+(((x674)*(x682)))+(((IkReal(-0.0900000000000000))*(x680)))+(((IkReal(-1.00000000000000))*(pp)))+(((x675)*(x683)))+(((x675)*(x682))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x684=(cj3)*(cj3);
IkReal x685=(sj3)*(sj3);
IkReal x686=((cj3)*(sj3));
IkReal x687=((IkReal(1.00000000000000))*(pz));
if( IKabs(((gconst36)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.0900000000000000))*(x684)))+((pz)*(pz))+(((IkReal(-0.0270000000000000))*(x686)))+(((IkReal(-0.00202500000000000))*(x685)))+(((IkReal(-0.330000000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst36)*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0879750000000000))*(x686)))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*(x685)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x687)))+(((IkReal(0.0135000000000000))*(x684)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x687))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst36)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.0900000000000000))*(x684)))+((pz)*(pz))+(((IkReal(-0.0270000000000000))*(x686)))+(((IkReal(-0.00202500000000000))*(x685)))+(((IkReal(-0.330000000000000))*(cj3)))))), ((gconst36)*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0879750000000000))*(x686)))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*(x685)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x687)))+(((IkReal(0.0135000000000000))*(x684)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x687)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x688=IKsin(j1);
IkReal x689=IKcos(j1);
IkReal x690=((IkReal(0.300000000000000))*(cj3));
IkReal x691=((IkReal(0.0450000000000000))*(cj3));
IkReal x692=((cj0)*(px));
IkReal x693=((py)*(sj0));
IkReal x694=((IkReal(0.0450000000000000))*(sj3));
IkReal x695=((IkReal(0.300000000000000))*(sj3));
IkReal x696=((IkReal(0.0450000000000000))*(x688));
IkReal x697=((IkReal(1.00000000000000))*(x689));
IkReal x698=((pz)*(x688));
IkReal x699=((pz)*(x689));
IkReal x700=((IkReal(0.0900000000000000))*(x689));
IkReal x701=((IkReal(1.10000000000000))*(x688));
evalcond[0]=((IkReal(-0.550000000000000))+(((x688)*(x692)))+(((x688)*(x693)))+(x699)+(((IkReal(-1.00000000000000))*(x690)))+(((IkReal(-1.00000000000000))*(x694))));
evalcond[1]=((((x688)*(x695)))+(((IkReal(-1.00000000000000))*(x688)*(x691)))+(pz)+(x696)+(((IkReal(-1.00000000000000))*(x689)*(x694)))+(((IkReal(-1.00000000000000))*(x689)*(x690)))+(((IkReal(-0.550000000000000))*(x689))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x693)*(x697)))+(((IkReal(-1.00000000000000))*(x692)*(x697)))+(x695)+(x698)+(((IkReal(-1.00000000000000))*(x691))));
evalcond[3]=((((IkReal(0.550000000000000))*(x688)))+(((IkReal(0.0450000000000000))*(x689)))+(((x688)*(x690)))+(((x688)*(x694)))+(((x689)*(x695)))+(((IkReal(-1.00000000000000))*(x689)*(x691)))+(((IkReal(-1.00000000000000))*(x693)))+(((IkReal(-1.00000000000000))*(x692))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x698)))+(((x692)*(x701)))+(((x692)*(x700)))+(((IkReal(-1.00000000000000))*(pp)))+(((x693)*(x701)))+(((x693)*(x700)))+(((IkReal(1.10000000000000))*(x699))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x702=((px)*(sj0));
IkReal x703=((cj0)*(py));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x703)))+(x702));
evalcond[3]=((((IkReal(-1.00000000000000))*(x702)))+(x703));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst38;
IkReal x704=((cj0)*(px));
IkReal x705=((IkReal(0.0450000000000000))*(pz));
IkReal x706=((py)*(sj0));
IkReal x707=((IkReal(0.300000000000000))*(cj3));
IkReal x708=((IkReal(0.0450000000000000))*(sj3));
gconst38=IKsign(((((IkReal(-1.00000000000000))*(x706)*(x707)))+(((IkReal(-1.00000000000000))*(x706)*(x708)))+(((IkReal(-0.550000000000000))*(x706)))+(((IkReal(-0.550000000000000))*(x704)))+(((IkReal(-1.00000000000000))*(cj3)*(x705)))+(((IkReal(-1.00000000000000))*(x704)*(x707)))+(((IkReal(-1.00000000000000))*(x704)*(x708)))+(((IkReal(0.300000000000000))*(pz)*(sj3)))+(x705)));
IkReal x709=((py)*(sj0));
IkReal x710=((IkReal(6.66666666666667))*(cj3));
IkReal x711=((cj0)*(px));
IkReal x712=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x711)*(x712)))+(((IkReal(-1.00000000000000))*(cj3)*(pz)))+(((IkReal(-1.00000000000000))*(x710)*(x711)))+(((IkReal(-1.00000000000000))*(x709)*(x710)))+(((IkReal(-1.00000000000000))*(x709)*(x712)))+(((IkReal(6.66666666666667))*(pz)*(sj3)))+(pz)+(((IkReal(-12.2222222222222))*(x709)))+(((IkReal(-12.2222222222222))*(x711))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst39;
gconst39=IKsign((((((py)*(py))*((sj0)*(sj0))))+((pz)*(pz))+((((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0)))));
dummyeval[0]=(((((py)*(py))*((sj0)*(sj0))))+((pz)*(pz))+((((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x713=((py)*(sj0));
IkReal x714=((cj0)*(px));
IkReal x715=((IkReal(0.300000000000000))*(sj3));
IkReal x716=((IkReal(0.0450000000000000))*(cj3));
IkReal x717=((IkReal(0.0450000000000000))*(pz));
IkReal x718=((IkReal(0.300000000000000))*(cj3));
IkReal x719=((IkReal(0.0450000000000000))*(sj3));
if( IKabs(((gconst39)*(((((IkReal(-1.00000000000000))*(pz)*(x716)))+(((x714)*(x719)))+(((x714)*(x718)))+(((IkReal(0.550000000000000))*(x713)))+(((IkReal(0.550000000000000))*(x714)))+(x717)+(((pz)*(x715)))+(((x713)*(x718)))+(((x713)*(x719))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst39)*(((((IkReal(-1.00000000000000))*(x714)*(x715)))+(((x714)*(x716)))+(((IkReal(-0.0450000000000000))*(x714)))+(((IkReal(-0.0450000000000000))*(x713)))+(((sj3)*(x717)))+(((IkReal(-1.00000000000000))*(x713)*(x715)))+(((IkReal(0.550000000000000))*(pz)))+(((pz)*(x718)))+(((x713)*(x716))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst39)*(((((IkReal(-1.00000000000000))*(pz)*(x716)))+(((x714)*(x719)))+(((x714)*(x718)))+(((IkReal(0.550000000000000))*(x713)))+(((IkReal(0.550000000000000))*(x714)))+(x717)+(((pz)*(x715)))+(((x713)*(x718)))+(((x713)*(x719)))))), ((gconst39)*(((((IkReal(-1.00000000000000))*(x714)*(x715)))+(((x714)*(x716)))+(((IkReal(-0.0450000000000000))*(x714)))+(((IkReal(-0.0450000000000000))*(x713)))+(((sj3)*(x717)))+(((IkReal(-1.00000000000000))*(x713)*(x715)))+(((IkReal(0.550000000000000))*(pz)))+(((pz)*(x718)))+(((x713)*(x716)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x720=IKsin(j1);
IkReal x721=IKcos(j1);
IkReal x722=((IkReal(0.300000000000000))*(cj3));
IkReal x723=((IkReal(0.0450000000000000))*(cj3));
IkReal x724=((cj0)*(px));
IkReal x725=((py)*(sj0));
IkReal x726=((IkReal(0.0450000000000000))*(sj3));
IkReal x727=((IkReal(0.300000000000000))*(sj3));
IkReal x728=((IkReal(0.0450000000000000))*(x720));
IkReal x729=((pz)*(x720));
IkReal x730=((pz)*(x721));
IkReal x731=((IkReal(0.0900000000000000))*(x721));
IkReal x732=((IkReal(1.10000000000000))*(x720));
evalcond[0]=((IkReal(-0.550000000000000))+(((x720)*(x725)))+(((x720)*(x724)))+(((IkReal(-1.00000000000000))*(x726)))+(((IkReal(-1.00000000000000))*(x722)))+(x730));
evalcond[1]=((((x720)*(x723)))+(((IkReal(-1.00000000000000))*(x728)))+(pz)+(((IkReal(-1.00000000000000))*(x721)*(x722)))+(((IkReal(-1.00000000000000))*(x721)*(x726)))+(((IkReal(-0.550000000000000))*(x721)))+(((IkReal(-1.00000000000000))*(x720)*(x727))));
evalcond[2]=((IkReal(0.0450000000000000))+(((x721)*(x725)))+(((x721)*(x724)))+(((IkReal(-1.00000000000000))*(x723)))+(((IkReal(-1.00000000000000))*(x729)))+(x727));
evalcond[3]=((((x721)*(x723)))+(((x720)*(x722)))+(((x720)*(x726)))+(((IkReal(-0.0450000000000000))*(x721)))+(((IkReal(0.550000000000000))*(x720)))+(((IkReal(-1.00000000000000))*(x724)))+(((IkReal(-1.00000000000000))*(x725)))+(((IkReal(-1.00000000000000))*(x721)*(x727))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(1.10000000000000))*(x730)))+(((IkReal(0.0900000000000000))*(x729)))+(((IkReal(-1.00000000000000))*(x724)*(x731)))+(((IkReal(-1.00000000000000))*(x725)*(x731)))+(((IkReal(-1.00000000000000))*(pp)))+(((x724)*(x732)))+(((x725)*(x732))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x733=(sj3)*(sj3);
IkReal x734=(cj3)*(cj3);
IkReal x735=((cj3)*(sj3));
IkReal x736=((IkReal(1.00000000000000))*(pz));
if( IKabs(((gconst38)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0270000000000000))*(x735)))+(((IkReal(-0.0495000000000000))*(sj3)))+((pz)*(pz))+(((IkReal(-0.0900000000000000))*(x734)))+(((IkReal(-0.00202500000000000))*(x733)))+(((IkReal(-0.330000000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst38)*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*(x734)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x736)))+(((IkReal(0.0135000000000000))*(x733)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x736)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(0.0879750000000000))*(x735))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst38)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0270000000000000))*(x735)))+(((IkReal(-0.0495000000000000))*(sj3)))+((pz)*(pz))+(((IkReal(-0.0900000000000000))*(x734)))+(((IkReal(-0.00202500000000000))*(x733)))+(((IkReal(-0.330000000000000))*(cj3)))))), ((gconst38)*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*(x734)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x736)))+(((IkReal(0.0135000000000000))*(x733)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x736)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(0.0879750000000000))*(x735)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x737=IKsin(j1);
IkReal x738=IKcos(j1);
IkReal x739=((IkReal(0.300000000000000))*(cj3));
IkReal x740=((IkReal(0.0450000000000000))*(cj3));
IkReal x741=((cj0)*(px));
IkReal x742=((py)*(sj0));
IkReal x743=((IkReal(0.0450000000000000))*(sj3));
IkReal x744=((IkReal(0.300000000000000))*(sj3));
IkReal x745=((IkReal(0.0450000000000000))*(x737));
IkReal x746=((pz)*(x737));
IkReal x747=((pz)*(x738));
IkReal x748=((IkReal(0.0900000000000000))*(x738));
IkReal x749=((IkReal(1.10000000000000))*(x737));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x739)))+(((x737)*(x741)))+(((x737)*(x742)))+(x747)+(((IkReal(-1.00000000000000))*(x743))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x737)*(x744)))+(((IkReal(-1.00000000000000))*(x738)*(x743)))+(((IkReal(-0.550000000000000))*(x738)))+(pz)+(((x737)*(x740)))+(((IkReal(-1.00000000000000))*(x738)*(x739)))+(((IkReal(-1.00000000000000))*(x745))));
evalcond[2]=((IkReal(0.0450000000000000))+(((x738)*(x741)))+(((x738)*(x742)))+(((IkReal(-1.00000000000000))*(x746)))+(x744)+(((IkReal(-1.00000000000000))*(x740))));
evalcond[3]=((((x738)*(x740)))+(((IkReal(0.550000000000000))*(x737)))+(((IkReal(-0.0450000000000000))*(x738)))+(((IkReal(-1.00000000000000))*(x738)*(x744)))+(((x737)*(x743)))+(((IkReal(-1.00000000000000))*(x741)))+(((IkReal(-1.00000000000000))*(x742)))+(((x737)*(x739))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x742)*(x749)))+(((IkReal(-1.00000000000000))*(x742)*(x748)))+(((IkReal(-1.00000000000000))*(pp)))+(((x741)*(x749)))+(((IkReal(0.0900000000000000))*(x746)))+(((IkReal(1.10000000000000))*(x747)))+(((IkReal(-1.00000000000000))*(x741)*(x748))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x750=((IkReal(0.0450000000000000))*(sj3));
IkReal x751=((cj2)*(px));
IkReal x752=((cj0)*(px));
IkReal x753=((pz)*(sj2));
IkReal x754=((py)*(sj0)*(sj2));
IkReal x755=((IkReal(0.300000000000000))*(cj3)*(sj2));
IkReal x756=((IkReal(1.00000000000000))*(cj0)*(cj2));
if( IKabs(((gconst35)*(((((IkReal(0.550000000000000))*(sj2)*(x752)))+(((x752)*(x755)))+(((IkReal(-1.00000000000000))*(py)*(pz)*(x756)))+(((IkReal(0.300000000000000))*(cj3)*(x754)))+(((IkReal(0.550000000000000))*(x754)))+(((sj2)*(x750)*(x752)))+(((pz)*(sj0)*(x751)))+(((x750)*(x754))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst35)*(((((py)*(x751)*((cj0)*(cj0))))+(((IkReal(-1.00000000000000))*(py)*(x751)*((sj0)*(sj0))))+(((IkReal(0.300000000000000))*(cj3)*(x753)))+(((IkReal(0.550000000000000))*(x753)))+(((x750)*(x753)))+(((cj0)*(cj2)*(sj0)*((py)*(py))))+(((IkReal(-1.00000000000000))*(sj0)*(x751)*(x752))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst35)*(((((IkReal(0.550000000000000))*(sj2)*(x752)))+(((x752)*(x755)))+(((IkReal(-1.00000000000000))*(py)*(pz)*(x756)))+(((IkReal(0.300000000000000))*(cj3)*(x754)))+(((IkReal(0.550000000000000))*(x754)))+(((sj2)*(x750)*(x752)))+(((pz)*(sj0)*(x751)))+(((x750)*(x754)))))), ((gconst35)*(((((py)*(x751)*((cj0)*(cj0))))+(((IkReal(-1.00000000000000))*(py)*(x751)*((sj0)*(sj0))))+(((IkReal(0.300000000000000))*(cj3)*(x753)))+(((IkReal(0.550000000000000))*(x753)))+(((x750)*(x753)))+(((cj0)*(cj2)*(sj0)*((py)*(py))))+(((IkReal(-1.00000000000000))*(sj0)*(x751)*(x752)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x757=IKsin(j1);
IkReal x758=IKcos(j1);
IkReal x759=((px)*(sj2));
IkReal x760=((IkReal(0.300000000000000))*(sj3));
IkReal x761=((IkReal(0.0900000000000000))*(sj0));
IkReal x762=((cj2)*(px));
IkReal x763=((IkReal(0.0450000000000000))*(cj3));
IkReal x764=((IkReal(0.0450000000000000))*(cj2));
IkReal x765=((py)*(sj0));
IkReal x766=((IkReal(0.0450000000000000))*(sj3));
IkReal x767=((IkReal(1.00000000000000))*(cj0));
IkReal x768=((IkReal(0.300000000000000))*(cj3));
IkReal x769=((py)*(sj2));
IkReal x770=((cj0)*(x758));
IkReal x771=((cj3)*(x757));
IkReal x772=((cj2)*(x758));
IkReal x773=((cj2)*(x757));
IkReal x774=((pz)*(x758));
IkReal x775=((cj0)*(px)*(x757));
evalcond[0]=((IkReal(-0.550000000000000))+(((x757)*(x765)))+(((IkReal(-1.00000000000000))*(x768)))+(((IkReal(-1.00000000000000))*(x766)))+(x775)+(x774));
evalcond[1]=((((IkReal(-1.00000000000000))*(pz)*(sj2)*(x757)))+(((sj0)*(x762)))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x767)))+(((sj2)*(x758)*(x765)))+(((x759)*(x770))));
evalcond[2]=((((x757)*(x764)))+(((IkReal(-1.00000000000000))*(x758)*(x768)))+(((IkReal(-1.00000000000000))*(x758)*(x766)))+(pz)+(((IkReal(-0.550000000000000))*(x758)))+(((IkReal(-1.00000000000000))*(x763)*(x773)))+(((x760)*(x773))));
evalcond[3]=((IkReal(0.0450000000000000))+(((pz)*(x773)))+(((sj0)*(x759)))+(((IkReal(-1.00000000000000))*(x763)))+(((IkReal(-1.00000000000000))*(x767)*(x769)))+(((IkReal(-1.00000000000000))*(x758)*(x762)*(x767)))+(x760)+(((IkReal(-1.00000000000000))*(x765)*(x772))));
evalcond[4]=((((x757)*(x766)))+(((x757)*(x768)))+(((IkReal(-1.00000000000000))*(px)*(x767)))+(((x758)*(x764)))+(((IkReal(0.550000000000000))*(x757)))+(((IkReal(-1.00000000000000))*(x765)))+(((IkReal(-1.00000000000000))*(x763)*(x772)))+(((x760)*(x772))));
evalcond[5]=((IkReal(-0.212500000000000))+(((py)*(x761)*(x772)))+(((IkReal(1.10000000000000))*(x757)*(x765)))+(((IkReal(0.0900000000000000))*(x762)*(x770)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(pz)*(x773)))+(((IkReal(0.0900000000000000))*(cj0)*(x769)))+(((IkReal(1.10000000000000))*(x775)))+(((IkReal(1.10000000000000))*(x774)))+(((IkReal(-1.00000000000000))*(x759)*(x761))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x776=(cj3)*(cj3);
IkReal x777=(sj3)*(sj3);
IkReal x778=((cj2)*(sj3));
IkReal x779=((IkReal(0.0135000000000000))*(cj2));
IkReal x780=((IkReal(1.00000000000000))*(pz));
if( IKabs(((gconst34)*(((IkReal(-0.302500000000000))+(((IkReal(-0.00202500000000000))*(x777)))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.0270000000000000))*(cj3)*(sj3)))+((pz)*(pz))+(((IkReal(-0.0900000000000000))*(x776)))+(((IkReal(-0.330000000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst34)*(((((x776)*(x779)))+(((IkReal(-0.0247500000000000))*(cj2)))+(((IkReal(-0.167025000000000))*(x778)))+(((IkReal(-1.00000000000000))*(x777)*(x779)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x780)))+(((IkReal(-0.0879750000000000))*(cj3)*(x778)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x780)))+(((IkReal(0.0112500000000000))*(cj2)*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst34)*(((IkReal(-0.302500000000000))+(((IkReal(-0.00202500000000000))*(x777)))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.0270000000000000))*(cj3)*(sj3)))+((pz)*(pz))+(((IkReal(-0.0900000000000000))*(x776)))+(((IkReal(-0.330000000000000))*(cj3)))))), ((gconst34)*(((((x776)*(x779)))+(((IkReal(-0.0247500000000000))*(cj2)))+(((IkReal(-0.167025000000000))*(x778)))+(((IkReal(-1.00000000000000))*(x777)*(x779)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x780)))+(((IkReal(-0.0879750000000000))*(cj3)*(x778)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x780)))+(((IkReal(0.0112500000000000))*(cj2)*(cj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x781=IKsin(j1);
IkReal x782=IKcos(j1);
IkReal x783=((px)*(sj2));
IkReal x784=((IkReal(0.300000000000000))*(sj3));
IkReal x785=((IkReal(0.0900000000000000))*(sj0));
IkReal x786=((cj2)*(px));
IkReal x787=((IkReal(0.0450000000000000))*(cj3));
IkReal x788=((IkReal(0.0450000000000000))*(cj2));
IkReal x789=((py)*(sj0));
IkReal x790=((IkReal(0.0450000000000000))*(sj3));
IkReal x791=((IkReal(1.00000000000000))*(cj0));
IkReal x792=((IkReal(0.300000000000000))*(cj3));
IkReal x793=((py)*(sj2));
IkReal x794=((cj0)*(x782));
IkReal x795=((cj3)*(x781));
IkReal x796=((cj2)*(x782));
IkReal x797=((cj2)*(x781));
IkReal x798=((pz)*(x782));
IkReal x799=((cj0)*(px)*(x781));
evalcond[0]=((IkReal(-0.550000000000000))+(((x781)*(x789)))+(((IkReal(-1.00000000000000))*(x792)))+(((IkReal(-1.00000000000000))*(x790)))+(x799)+(x798));
evalcond[1]=((((sj2)*(x782)*(x789)))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x791)))+(((x783)*(x794)))+(((sj0)*(x786)))+(((IkReal(-1.00000000000000))*(pz)*(sj2)*(x781))));
evalcond[2]=((((x781)*(x788)))+(((IkReal(-0.550000000000000))*(x782)))+(((x784)*(x797)))+(((IkReal(-1.00000000000000))*(x787)*(x797)))+(pz)+(((IkReal(-1.00000000000000))*(x782)*(x792)))+(((IkReal(-1.00000000000000))*(x782)*(x790))));
evalcond[3]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x787)))+(((IkReal(-1.00000000000000))*(x789)*(x796)))+(((sj0)*(x783)))+(((pz)*(x797)))+(((IkReal(-1.00000000000000))*(x791)*(x793)))+(((IkReal(-1.00000000000000))*(x782)*(x786)*(x791)))+(x784));
evalcond[4]=((((x781)*(x790)))+(((x781)*(x792)))+(((IkReal(0.550000000000000))*(x781)))+(((IkReal(-1.00000000000000))*(px)*(x791)))+(((x782)*(x788)))+(((x784)*(x796)))+(((IkReal(-1.00000000000000))*(x787)*(x796)))+(((IkReal(-1.00000000000000))*(x789))));
evalcond[5]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(pz)*(x797)))+(((IkReal(0.0900000000000000))*(x786)*(x794)))+(((py)*(x785)*(x796)))+(((IkReal(1.10000000000000))*(x799)))+(((IkReal(1.10000000000000))*(x798)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(1.10000000000000))*(x781)*(x789)))+(((IkReal(0.0900000000000000))*(cj0)*(x793)))+(((IkReal(-1.00000000000000))*(x783)*(x785))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x800=((IkReal(0.0450000000000000))*(sj2));
if( IKabs(((IkReal(-1.00000000000000))*(py))) < IKFAST_ATAN2_MAGTHRESH && IKabs(px) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x801=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-1.00000000000000))*(py)), px)));
if( ((((px)*(px))+((py)*(py)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(0.300000000000000))*(sj2)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x800)))+(x800))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(0.300000000000000))*(sj2)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x800)))+(x800))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x802=IKasin(((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(0.300000000000000))*(sj2)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(x800)))+(x800)))));
j0array[0]=((((IkReal(-1.00000000000000))*(x802)))+(((IkReal(-1.00000000000000))*(x801))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(x802)+(((IkReal(-1.00000000000000))*(x801))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal dummyeval[1];
IkReal gconst34;
IkReal x803=((py)*(sj0));
IkReal x804=((IkReal(0.300000000000000))*(cj3));
IkReal x805=((cj0)*(px));
IkReal x806=((cj2)*(pz));
IkReal x807=((IkReal(0.0450000000000000))*(sj3));
gconst34=IKsign(((((IkReal(-1.00000000000000))*(x804)*(x805)))+(((IkReal(-1.00000000000000))*(x805)*(x807)))+(((IkReal(-0.550000000000000))*(x805)))+(((IkReal(-0.550000000000000))*(x803)))+(((IkReal(-1.00000000000000))*(x803)*(x804)))+(((IkReal(-1.00000000000000))*(x803)*(x807)))+(((IkReal(-0.0450000000000000))*(x806)))+(((IkReal(-0.300000000000000))*(sj3)*(x806)))+(((IkReal(0.0450000000000000))*(cj3)*(x806)))));
IkReal x808=((py)*(sj0));
IkReal x809=((cj2)*(pz));
IkReal x810=((IkReal(6.66666666666667))*(cj3));
IkReal x811=((cj0)*(px));
IkReal x812=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x809)))+(((IkReal(-6.66666666666667))*(sj3)*(x809)))+(((IkReal(-1.00000000000000))*(x808)*(x810)))+(((IkReal(-1.00000000000000))*(x808)*(x812)))+(((IkReal(-1.00000000000000))*(x811)*(x812)))+(((IkReal(-12.2222222222222))*(x811)))+(((cj3)*(x809)))+(((IkReal(-1.00000000000000))*(x810)*(x811)))+(((IkReal(-12.2222222222222))*(x808))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst35;
gconst35=IKsign(((((sj2)*((pz)*(pz))))+(((sj2)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0)*(sj2)))+(((sj2)*((py)*(py))*((sj0)*(sj0))))));
dummyeval[0]=((((sj2)*((pz)*(pz))))+(((sj2)*((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0)*(sj2)))+(((sj2)*((py)*(py))*((sj0)*(sj0)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x813=((((px)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(py))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=x813;
evalcond[3]=x813;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst36;
IkReal x814=((cj0)*(px));
IkReal x815=((IkReal(0.0450000000000000))*(pz));
IkReal x816=((py)*(sj0));
IkReal x817=((IkReal(0.300000000000000))*(cj3));
IkReal x818=((IkReal(0.0450000000000000))*(sj3));
gconst36=IKsign(((((cj3)*(x815)))+(((IkReal(-1.00000000000000))*(x816)*(x818)))+(((IkReal(-1.00000000000000))*(x816)*(x817)))+(((IkReal(-0.300000000000000))*(pz)*(sj3)))+(((IkReal(-1.00000000000000))*(x815)))+(((IkReal(-1.00000000000000))*(x814)*(x818)))+(((IkReal(-1.00000000000000))*(x814)*(x817)))+(((IkReal(-0.550000000000000))*(x816)))+(((IkReal(-0.550000000000000))*(x814)))));
IkReal x819=((py)*(sj0));
IkReal x820=((IkReal(6.66666666666667))*(cj3));
IkReal x821=((cj0)*(px));
IkReal x822=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-6.66666666666667))*(pz)*(sj3)))+(((IkReal(-1.00000000000000))*(x819)*(x822)))+(((IkReal(-1.00000000000000))*(x819)*(x820)))+(((IkReal(-12.2222222222222))*(x819)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-12.2222222222222))*(x821)))+(((IkReal(-1.00000000000000))*(x821)*(x822)))+(((IkReal(-1.00000000000000))*(x820)*(x821)))+(((cj3)*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst37;
gconst37=IKsign(((((IkReal(-1.00000000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*((py)*(py))*((sj0)*(sj0))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj0)*(cj0))*((px)*(px))))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*((py)*(py))*((sj0)*(sj0)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x823=((py)*(sj0));
IkReal x824=((pz)*(sj3));
IkReal x825=((cj0)*(px));
IkReal x826=((IkReal(0.300000000000000))*(sj3));
IkReal x827=((IkReal(0.0450000000000000))*(cj3));
IkReal x828=((IkReal(0.300000000000000))*(cj3));
IkReal x829=((IkReal(0.0450000000000000))*(sj3));
if( IKabs(((gconst37)*(((((IkReal(-1.00000000000000))*(pz)*(x827)))+(((IkReal(0.0450000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x823)*(x828)))+(((IkReal(-1.00000000000000))*(x823)*(x829)))+(((IkReal(0.300000000000000))*(x824)))+(((IkReal(-0.550000000000000))*(x823)))+(((IkReal(-0.550000000000000))*(x825)))+(((IkReal(-1.00000000000000))*(x825)*(x829)))+(((IkReal(-1.00000000000000))*(x825)*(x828))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst37)*(((((IkReal(-0.550000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pz)*(x828)))+(((IkReal(-0.0450000000000000))*(x823)))+(((IkReal(-0.0450000000000000))*(x825)))+(((IkReal(-0.0450000000000000))*(x824)))+(((IkReal(-1.00000000000000))*(x823)*(x826)))+(((x825)*(x827)))+(((x823)*(x827)))+(((IkReal(-1.00000000000000))*(x825)*(x826))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst37)*(((((IkReal(-1.00000000000000))*(pz)*(x827)))+(((IkReal(0.0450000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x823)*(x828)))+(((IkReal(-1.00000000000000))*(x823)*(x829)))+(((IkReal(0.300000000000000))*(x824)))+(((IkReal(-0.550000000000000))*(x823)))+(((IkReal(-0.550000000000000))*(x825)))+(((IkReal(-1.00000000000000))*(x825)*(x829)))+(((IkReal(-1.00000000000000))*(x825)*(x828)))))), ((gconst37)*(((((IkReal(-0.550000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pz)*(x828)))+(((IkReal(-0.0450000000000000))*(x823)))+(((IkReal(-0.0450000000000000))*(x825)))+(((IkReal(-0.0450000000000000))*(x824)))+(((IkReal(-1.00000000000000))*(x823)*(x826)))+(((x825)*(x827)))+(((x823)*(x827)))+(((IkReal(-1.00000000000000))*(x825)*(x826)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x830=IKsin(j1);
IkReal x831=IKcos(j1);
IkReal x832=((IkReal(0.300000000000000))*(cj3));
IkReal x833=((IkReal(0.0450000000000000))*(cj3));
IkReal x834=((cj0)*(px));
IkReal x835=((py)*(sj0));
IkReal x836=((IkReal(0.0450000000000000))*(sj3));
IkReal x837=((IkReal(0.300000000000000))*(sj3));
IkReal x838=((IkReal(0.0450000000000000))*(x830));
IkReal x839=((IkReal(1.00000000000000))*(x831));
IkReal x840=((pz)*(x830));
IkReal x841=((pz)*(x831));
IkReal x842=((IkReal(0.0900000000000000))*(x831));
IkReal x843=((IkReal(1.10000000000000))*(x830));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x836)))+(((IkReal(-1.00000000000000))*(x832)))+(((x830)*(x834)))+(((x830)*(x835)))+(x841));
evalcond[1]=((((IkReal(-1.00000000000000))*(x830)*(x833)))+(pz)+(((x830)*(x837)))+(x838)+(((IkReal(-0.550000000000000))*(x831)))+(((IkReal(-1.00000000000000))*(x831)*(x832)))+(((IkReal(-1.00000000000000))*(x831)*(x836))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x835)*(x839)))+(((IkReal(-1.00000000000000))*(x834)*(x839)))+(((IkReal(-1.00000000000000))*(x833)))+(x837)+(x840));
evalcond[3]=((((x831)*(x837)))+(((IkReal(0.0450000000000000))*(x831)))+(((x830)*(x836)))+(((x830)*(x832)))+(((IkReal(0.550000000000000))*(x830)))+(((IkReal(-1.00000000000000))*(x835)))+(((IkReal(-1.00000000000000))*(x834)))+(((IkReal(-1.00000000000000))*(x831)*(x833))));
evalcond[4]=((IkReal(-0.212500000000000))+(((x835)*(x843)))+(((x835)*(x842)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0900000000000000))*(x840)))+(((x834)*(x842)))+(((x834)*(x843)))+(((IkReal(1.10000000000000))*(x841))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x844=(cj3)*(cj3);
IkReal x845=(sj3)*(sj3);
IkReal x846=((cj3)*(sj3));
IkReal x847=((IkReal(1.00000000000000))*(pz));
if( IKabs(((gconst36)*(((IkReal(-0.302500000000000))+(((IkReal(-0.00202500000000000))*(x845)))+(((IkReal(-0.0495000000000000))*(sj3)))+((pz)*(pz))+(((IkReal(-0.0900000000000000))*(x844)))+(((IkReal(-0.0270000000000000))*(x846)))+(((IkReal(-0.330000000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst36)*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*(x845)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x847)))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x847)))+(((IkReal(-0.0879750000000000))*(x846)))+(((IkReal(0.0135000000000000))*(x844))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst36)*(((IkReal(-0.302500000000000))+(((IkReal(-0.00202500000000000))*(x845)))+(((IkReal(-0.0495000000000000))*(sj3)))+((pz)*(pz))+(((IkReal(-0.0900000000000000))*(x844)))+(((IkReal(-0.0270000000000000))*(x846)))+(((IkReal(-0.330000000000000))*(cj3)))))), ((gconst36)*(((IkReal(-0.0247500000000000))+(((IkReal(0.0112500000000000))*(cj3)))+(((IkReal(-0.0135000000000000))*(x845)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x847)))+(((IkReal(-0.167025000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x847)))+(((IkReal(-0.0879750000000000))*(x846)))+(((IkReal(0.0135000000000000))*(x844)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x848=IKsin(j1);
IkReal x849=IKcos(j1);
IkReal x850=((IkReal(0.300000000000000))*(cj3));
IkReal x851=((IkReal(0.0450000000000000))*(cj3));
IkReal x852=((cj0)*(px));
IkReal x853=((py)*(sj0));
IkReal x854=((IkReal(0.0450000000000000))*(sj3));
IkReal x855=((IkReal(0.300000000000000))*(sj3));
IkReal x856=((IkReal(0.0450000000000000))*(x848));
IkReal x857=((IkReal(1.00000000000000))*(x849));
IkReal x858=((pz)*(x848));
IkReal x859=((pz)*(x849));
IkReal x860=((IkReal(0.0900000000000000))*(x849));
IkReal x861=((IkReal(1.10000000000000))*(x848));
evalcond[0]=((IkReal(-0.550000000000000))+(((x848)*(x853)))+(((x848)*(x852)))+(((IkReal(-1.00000000000000))*(x850)))+(((IkReal(-1.00000000000000))*(x854)))+(x859));
evalcond[1]=((((x848)*(x855)))+(((IkReal(-1.00000000000000))*(x849)*(x854)))+(((IkReal(-1.00000000000000))*(x849)*(x850)))+(((IkReal(-1.00000000000000))*(x848)*(x851)))+(pz)+(x856)+(((IkReal(-0.550000000000000))*(x849))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x851)))+(((IkReal(-1.00000000000000))*(x853)*(x857)))+(((IkReal(-1.00000000000000))*(x852)*(x857)))+(x855)+(x858));
evalcond[3]=((((x848)*(x854)))+(((x848)*(x850)))+(((IkReal(-1.00000000000000))*(x852)))+(((IkReal(-1.00000000000000))*(x853)))+(((IkReal(-1.00000000000000))*(x849)*(x851)))+(((IkReal(0.0450000000000000))*(x849)))+(((IkReal(0.550000000000000))*(x848)))+(((x849)*(x855))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(x858)))+(((IkReal(1.10000000000000))*(x859)))+(((IkReal(-1.00000000000000))*(pp)))+(((x853)*(x860)))+(((x853)*(x861)))+(((x852)*(x860)))+(((x852)*(x861))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x862=((px)*(sj0));
IkReal x863=((cj0)*(py));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.396550000000000))+(((IkReal(0.0765000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.325950000000000))*(cj3))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x863)))+(x862));
evalcond[3]=((((IkReal(-1.00000000000000))*(x862)))+(x863));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst38;
IkReal x864=((cj0)*(px));
IkReal x865=((IkReal(0.0450000000000000))*(pz));
IkReal x866=((py)*(sj0));
IkReal x867=((IkReal(0.300000000000000))*(cj3));
IkReal x868=((IkReal(0.0450000000000000))*(sj3));
gconst38=IKsign(((((IkReal(-1.00000000000000))*(cj3)*(x865)))+(((IkReal(-1.00000000000000))*(x866)*(x867)))+(((IkReal(-1.00000000000000))*(x866)*(x868)))+(((IkReal(-1.00000000000000))*(x864)*(x867)))+(((IkReal(-1.00000000000000))*(x864)*(x868)))+(((IkReal(-0.550000000000000))*(x866)))+(((IkReal(-0.550000000000000))*(x864)))+(((IkReal(0.300000000000000))*(pz)*(sj3)))+(x865)));
IkReal x869=((py)*(sj0));
IkReal x870=((IkReal(6.66666666666667))*(cj3));
IkReal x871=((cj0)*(px));
IkReal x872=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x871)*(x872)))+(((IkReal(-12.2222222222222))*(x871)))+(((IkReal(-1.00000000000000))*(cj3)*(pz)))+(((IkReal(-12.2222222222222))*(x869)))+(((IkReal(-1.00000000000000))*(x869)*(x870)))+(((IkReal(-1.00000000000000))*(x869)*(x872)))+(((IkReal(6.66666666666667))*(pz)*(sj3)))+(pz)+(((IkReal(-1.00000000000000))*(x870)*(x871))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst39;
gconst39=IKsign((((((py)*(py))*((sj0)*(sj0))))+((pz)*(pz))+((((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0)))));
dummyeval[0]=(((((py)*(py))*((sj0)*(sj0))))+((pz)*(pz))+((((cj0)*(cj0))*((px)*(px))))+(((IkReal(2.00000000000000))*(cj0)*(px)*(py)*(sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x873=((py)*(sj0));
IkReal x874=((cj0)*(px));
IkReal x875=((IkReal(0.300000000000000))*(sj3));
IkReal x876=((IkReal(0.0450000000000000))*(cj3));
IkReal x877=((IkReal(0.0450000000000000))*(pz));
IkReal x878=((IkReal(0.300000000000000))*(cj3));
IkReal x879=((IkReal(0.0450000000000000))*(sj3));
if( IKabs(((gconst39)*(((((x874)*(x879)))+(((x874)*(x878)))+(((IkReal(0.550000000000000))*(x873)))+(((IkReal(0.550000000000000))*(x874)))+(((x873)*(x878)))+(((x873)*(x879)))+(((IkReal(-1.00000000000000))*(pz)*(x876)))+(x877)+(((pz)*(x875))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst39)*(((((sj3)*(x877)))+(((x874)*(x876)))+(((x873)*(x876)))+(((IkReal(-1.00000000000000))*(x873)*(x875)))+(((IkReal(-1.00000000000000))*(x874)*(x875)))+(((pz)*(x878)))+(((IkReal(0.550000000000000))*(pz)))+(((IkReal(-0.0450000000000000))*(x874)))+(((IkReal(-0.0450000000000000))*(x873))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst39)*(((((x874)*(x879)))+(((x874)*(x878)))+(((IkReal(0.550000000000000))*(x873)))+(((IkReal(0.550000000000000))*(x874)))+(((x873)*(x878)))+(((x873)*(x879)))+(((IkReal(-1.00000000000000))*(pz)*(x876)))+(x877)+(((pz)*(x875)))))), ((gconst39)*(((((sj3)*(x877)))+(((x874)*(x876)))+(((x873)*(x876)))+(((IkReal(-1.00000000000000))*(x873)*(x875)))+(((IkReal(-1.00000000000000))*(x874)*(x875)))+(((pz)*(x878)))+(((IkReal(0.550000000000000))*(pz)))+(((IkReal(-0.0450000000000000))*(x874)))+(((IkReal(-0.0450000000000000))*(x873)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x880=IKsin(j1);
IkReal x881=IKcos(j1);
IkReal x882=((IkReal(0.300000000000000))*(cj3));
IkReal x883=((IkReal(0.0450000000000000))*(cj3));
IkReal x884=((cj0)*(px));
IkReal x885=((py)*(sj0));
IkReal x886=((IkReal(0.0450000000000000))*(sj3));
IkReal x887=((IkReal(0.300000000000000))*(sj3));
IkReal x888=((IkReal(0.0450000000000000))*(x880));
IkReal x889=((pz)*(x880));
IkReal x890=((pz)*(x881));
IkReal x891=((IkReal(0.0900000000000000))*(x881));
IkReal x892=((IkReal(1.10000000000000))*(x880));
evalcond[0]=((IkReal(-0.550000000000000))+(((x880)*(x885)))+(((x880)*(x884)))+(((IkReal(-1.00000000000000))*(x882)))+(((IkReal(-1.00000000000000))*(x886)))+(x890));
evalcond[1]=((((x880)*(x883)))+(((IkReal(-1.00000000000000))*(x888)))+(((IkReal(-1.00000000000000))*(x881)*(x882)))+(((IkReal(-1.00000000000000))*(x881)*(x886)))+(pz)+(((IkReal(-0.550000000000000))*(x881)))+(((IkReal(-1.00000000000000))*(x880)*(x887))));
evalcond[2]=((IkReal(0.0450000000000000))+(((x881)*(x885)))+(((x881)*(x884)))+(((IkReal(-1.00000000000000))*(x889)))+(((IkReal(-1.00000000000000))*(x883)))+(x887));
evalcond[3]=((((x881)*(x883)))+(((x880)*(x882)))+(((x880)*(x886)))+(((IkReal(-0.0450000000000000))*(x881)))+(((IkReal(-1.00000000000000))*(x885)))+(((IkReal(-1.00000000000000))*(x884)))+(((IkReal(-1.00000000000000))*(x881)*(x887)))+(((IkReal(0.550000000000000))*(x880))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(-1.00000000000000))*(x884)*(x891)))+(((x884)*(x892)))+(((IkReal(1.10000000000000))*(x890)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x885)*(x891)))+(((x885)*(x892)))+(((IkReal(0.0900000000000000))*(x889))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x893=(sj3)*(sj3);
IkReal x894=(cj3)*(cj3);
IkReal x895=((cj3)*(sj3));
IkReal x896=((IkReal(1.00000000000000))*(pz));
if( IKabs(((gconst38)*(((IkReal(-0.302500000000000))+(((IkReal(-0.00202500000000000))*(x893)))+(((IkReal(-0.0495000000000000))*(sj3)))+((pz)*(pz))+(((IkReal(-0.0900000000000000))*(x894)))+(((IkReal(-0.0270000000000000))*(x895)))+(((IkReal(-0.330000000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst38)*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(0.0879750000000000))*(x895)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x896)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x896)))+(((IkReal(0.0135000000000000))*(x893)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*(x894))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst38)*(((IkReal(-0.302500000000000))+(((IkReal(-0.00202500000000000))*(x893)))+(((IkReal(-0.0495000000000000))*(sj3)))+((pz)*(pz))+(((IkReal(-0.0900000000000000))*(x894)))+(((IkReal(-0.0270000000000000))*(x895)))+(((IkReal(-0.330000000000000))*(cj3)))))), ((gconst38)*(((IkReal(0.0247500000000000))+(((IkReal(-0.0112500000000000))*(cj3)))+(((IkReal(0.0879750000000000))*(x895)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x896)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x896)))+(((IkReal(0.0135000000000000))*(x893)))+(((IkReal(0.167025000000000))*(sj3)))+(((IkReal(-0.0135000000000000))*(x894)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x897=IKsin(j1);
IkReal x898=IKcos(j1);
IkReal x899=((IkReal(0.300000000000000))*(cj3));
IkReal x900=((IkReal(0.0450000000000000))*(cj3));
IkReal x901=((cj0)*(px));
IkReal x902=((py)*(sj0));
IkReal x903=((IkReal(0.0450000000000000))*(sj3));
IkReal x904=((IkReal(0.300000000000000))*(sj3));
IkReal x905=((IkReal(0.0450000000000000))*(x897));
IkReal x906=((pz)*(x897));
IkReal x907=((pz)*(x898));
IkReal x908=((IkReal(0.0900000000000000))*(x898));
IkReal x909=((IkReal(1.10000000000000))*(x897));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x903)))+(((IkReal(-1.00000000000000))*(x899)))+(((x897)*(x901)))+(((x897)*(x902)))+(x907));
evalcond[1]=((((IkReal(-1.00000000000000))*(x898)*(x899)))+(((IkReal(-1.00000000000000))*(x897)*(x904)))+(((IkReal(-1.00000000000000))*(x905)))+(((x897)*(x900)))+(((IkReal(-1.00000000000000))*(x898)*(x903)))+(pz)+(((IkReal(-0.550000000000000))*(x898))));
evalcond[2]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x900)))+(((IkReal(-1.00000000000000))*(x906)))+(((x898)*(x901)))+(((x898)*(x902)))+(x904));
evalcond[3]=((((IkReal(-0.0450000000000000))*(x898)))+(((x897)*(x903)))+(((IkReal(-1.00000000000000))*(x898)*(x904)))+(((x897)*(x899)))+(((IkReal(0.550000000000000))*(x897)))+(((IkReal(-1.00000000000000))*(x902)))+(((IkReal(-1.00000000000000))*(x901)))+(((x898)*(x900))));
evalcond[4]=((IkReal(-0.212500000000000))+(((IkReal(0.0900000000000000))*(x906)))+(((IkReal(-1.00000000000000))*(x902)*(x908)))+(((x901)*(x909)))+(((x902)*(x909)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x901)*(x908)))+(((IkReal(1.10000000000000))*(x907))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x910=((IkReal(0.0450000000000000))*(sj3));
IkReal x911=((cj2)*(px));
IkReal x912=((cj0)*(px));
IkReal x913=((pz)*(sj2));
IkReal x914=((py)*(sj0)*(sj2));
IkReal x915=((IkReal(0.300000000000000))*(cj3)*(sj2));
IkReal x916=((IkReal(1.00000000000000))*(cj0)*(cj2));
if( IKabs(((gconst35)*(((((pz)*(sj0)*(x911)))+(((IkReal(-1.00000000000000))*(py)*(pz)*(x916)))+(((x910)*(x914)))+(((sj2)*(x910)*(x912)))+(((IkReal(0.300000000000000))*(cj3)*(x914)))+(((IkReal(0.550000000000000))*(x914)))+(((x912)*(x915)))+(((IkReal(0.550000000000000))*(sj2)*(x912))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst35)*(((((IkReal(-1.00000000000000))*(sj0)*(x911)*(x912)))+(((x910)*(x913)))+(((py)*(x911)*((cj0)*(cj0))))+(((IkReal(0.300000000000000))*(cj3)*(x913)))+(((IkReal(0.550000000000000))*(x913)))+(((IkReal(-1.00000000000000))*(py)*(x911)*((sj0)*(sj0))))+(((cj0)*(cj2)*(sj0)*((py)*(py)))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst35)*(((((pz)*(sj0)*(x911)))+(((IkReal(-1.00000000000000))*(py)*(pz)*(x916)))+(((x910)*(x914)))+(((sj2)*(x910)*(x912)))+(((IkReal(0.300000000000000))*(cj3)*(x914)))+(((IkReal(0.550000000000000))*(x914)))+(((x912)*(x915)))+(((IkReal(0.550000000000000))*(sj2)*(x912)))))), ((gconst35)*(((((IkReal(-1.00000000000000))*(sj0)*(x911)*(x912)))+(((x910)*(x913)))+(((py)*(x911)*((cj0)*(cj0))))+(((IkReal(0.300000000000000))*(cj3)*(x913)))+(((IkReal(0.550000000000000))*(x913)))+(((IkReal(-1.00000000000000))*(py)*(x911)*((sj0)*(sj0))))+(((cj0)*(cj2)*(sj0)*((py)*(py))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x917=IKsin(j1);
IkReal x918=IKcos(j1);
IkReal x919=((px)*(sj2));
IkReal x920=((IkReal(0.300000000000000))*(sj3));
IkReal x921=((IkReal(0.0900000000000000))*(sj0));
IkReal x922=((cj2)*(px));
IkReal x923=((IkReal(0.0450000000000000))*(cj3));
IkReal x924=((IkReal(0.0450000000000000))*(cj2));
IkReal x925=((py)*(sj0));
IkReal x926=((IkReal(0.0450000000000000))*(sj3));
IkReal x927=((IkReal(1.00000000000000))*(cj0));
IkReal x928=((IkReal(0.300000000000000))*(cj3));
IkReal x929=((py)*(sj2));
IkReal x930=((cj0)*(x918));
IkReal x931=((cj3)*(x917));
IkReal x932=((cj2)*(x918));
IkReal x933=((cj2)*(x917));
IkReal x934=((pz)*(x918));
IkReal x935=((cj0)*(px)*(x917));
evalcond[0]=((IkReal(-0.550000000000000))+(((IkReal(-1.00000000000000))*(x926)))+(((IkReal(-1.00000000000000))*(x928)))+(((x917)*(x925)))+(x935)+(x934));
evalcond[1]=((((x919)*(x930)))+(((sj2)*(x918)*(x925)))+(((sj0)*(x922)))+(((IkReal(-1.00000000000000))*(pz)*(sj2)*(x917)))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x927))));
evalcond[2]=((((x920)*(x933)))+(((IkReal(-0.550000000000000))*(x918)))+(pz)+(((IkReal(-1.00000000000000))*(x918)*(x928)))+(((IkReal(-1.00000000000000))*(x918)*(x926)))+(((x917)*(x924)))+(((IkReal(-1.00000000000000))*(x923)*(x933))));
evalcond[3]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x923)))+(((IkReal(-1.00000000000000))*(x925)*(x932)))+(((IkReal(-1.00000000000000))*(x927)*(x929)))+(((IkReal(-1.00000000000000))*(x918)*(x922)*(x927)))+(((pz)*(x933)))+(((sj0)*(x919)))+(x920));
evalcond[4]=((((x918)*(x924)))+(((x920)*(x932)))+(((IkReal(-1.00000000000000))*(px)*(x927)))+(((IkReal(-1.00000000000000))*(x925)))+(((x917)*(x928)))+(((x917)*(x926)))+(((IkReal(0.550000000000000))*(x917)))+(((IkReal(-1.00000000000000))*(x923)*(x932))));
evalcond[5]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(pz)*(x933)))+(((IkReal(1.10000000000000))*(x935)))+(((IkReal(1.10000000000000))*(x934)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0900000000000000))*(x922)*(x930)))+(((IkReal(0.0900000000000000))*(cj0)*(x929)))+(((IkReal(-1.00000000000000))*(x919)*(x921)))+(((IkReal(1.10000000000000))*(x917)*(x925)))+(((py)*(x921)*(x932))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x936=(cj3)*(cj3);
IkReal x937=(sj3)*(sj3);
IkReal x938=((cj2)*(sj3));
IkReal x939=((IkReal(0.0135000000000000))*(cj2));
IkReal x940=((IkReal(1.00000000000000))*(pz));
if( IKabs(((gconst34)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0900000000000000))*(x936)))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.00202500000000000))*(x937)))+(((IkReal(-0.0270000000000000))*(cj3)*(sj3)))+((pz)*(pz))+(((IkReal(-0.330000000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst34)*(((((IkReal(-1.00000000000000))*(py)*(sj0)*(x940)))+(((x936)*(x939)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x940)))+(((IkReal(-0.0247500000000000))*(cj2)))+(((IkReal(-0.0879750000000000))*(cj3)*(x938)))+(((IkReal(-0.167025000000000))*(x938)))+(((IkReal(-1.00000000000000))*(x937)*(x939)))+(((IkReal(0.0112500000000000))*(cj2)*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst34)*(((IkReal(-0.302500000000000))+(((IkReal(-0.0900000000000000))*(x936)))+(((IkReal(-0.0495000000000000))*(sj3)))+(((IkReal(-0.00202500000000000))*(x937)))+(((IkReal(-0.0270000000000000))*(cj3)*(sj3)))+((pz)*(pz))+(((IkReal(-0.330000000000000))*(cj3)))))), ((gconst34)*(((((IkReal(-1.00000000000000))*(py)*(sj0)*(x940)))+(((x936)*(x939)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x940)))+(((IkReal(-0.0247500000000000))*(cj2)))+(((IkReal(-0.0879750000000000))*(cj3)*(x938)))+(((IkReal(-0.167025000000000))*(x938)))+(((IkReal(-1.00000000000000))*(x937)*(x939)))+(((IkReal(0.0112500000000000))*(cj2)*(cj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x941=IKsin(j1);
IkReal x942=IKcos(j1);
IkReal x943=((px)*(sj2));
IkReal x944=((IkReal(0.300000000000000))*(sj3));
IkReal x945=((IkReal(0.0900000000000000))*(sj0));
IkReal x946=((cj2)*(px));
IkReal x947=((IkReal(0.0450000000000000))*(cj3));
IkReal x948=((IkReal(0.0450000000000000))*(cj2));
IkReal x949=((py)*(sj0));
IkReal x950=((IkReal(0.0450000000000000))*(sj3));
IkReal x951=((IkReal(1.00000000000000))*(cj0));
IkReal x952=((IkReal(0.300000000000000))*(cj3));
IkReal x953=((py)*(sj2));
IkReal x954=((cj0)*(x942));
IkReal x955=((cj3)*(x941));
IkReal x956=((cj2)*(x942));
IkReal x957=((cj2)*(x941));
IkReal x958=((pz)*(x942));
IkReal x959=((cj0)*(px)*(x941));
evalcond[0]=((IkReal(-0.550000000000000))+(((x941)*(x949)))+(((IkReal(-1.00000000000000))*(x950)))+(((IkReal(-1.00000000000000))*(x952)))+(x959)+(x958));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj2)*(py)*(x951)))+(((sj0)*(x946)))+(((sj2)*(x942)*(x949)))+(((x943)*(x954)))+(((IkReal(-1.00000000000000))*(pz)*(sj2)*(x941))));
evalcond[2]=((((IkReal(-0.550000000000000))*(x942)))+(((x944)*(x957)))+(((x941)*(x948)))+(((IkReal(-1.00000000000000))*(x942)*(x952)))+(((IkReal(-1.00000000000000))*(x942)*(x950)))+(((IkReal(-1.00000000000000))*(x947)*(x957)))+(pz));
evalcond[3]=((IkReal(0.0450000000000000))+(((IkReal(-1.00000000000000))*(x942)*(x946)*(x951)))+(((IkReal(-1.00000000000000))*(x947)))+(((sj0)*(x943)))+(((pz)*(x957)))+(((IkReal(-1.00000000000000))*(x949)*(x956)))+(((IkReal(-1.00000000000000))*(x951)*(x953)))+(x944));
evalcond[4]=((((IkReal(0.550000000000000))*(x941)))+(((x944)*(x956)))+(((x941)*(x952)))+(((x941)*(x950)))+(((IkReal(-1.00000000000000))*(x949)))+(((x942)*(x948)))+(((IkReal(-1.00000000000000))*(x947)*(x956)))+(((IkReal(-1.00000000000000))*(px)*(x951))));
evalcond[5]=((IkReal(-0.212500000000000))+(((IkReal(-0.0900000000000000))*(pz)*(x957)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x943)*(x945)))+(((IkReal(1.10000000000000))*(x941)*(x949)))+(((IkReal(1.10000000000000))*(x959)))+(((IkReal(1.10000000000000))*(x958)))+(((IkReal(0.0900000000000000))*(cj0)*(x953)))+(((py)*(x945)*(x956)))+(((IkReal(0.0900000000000000))*(x946)*(x954))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x86=((IkReal(1.00000000000000))*(cj3));
IkReal x87=((sj0)*(sj2));
IkReal x88=((cj2)*(sj1));
IkReal x89=((IkReal(1.00000000000000))*(sj3));
IkReal x90=((cj1)*(cj2));
IkReal x91=((sj1)*(sj2));
IkReal x92=((cj0)*(sj2));
IkReal x93=((IkReal(1.00000000000000))*(cj1));
IkReal x94=((((IkReal(-1.00000000000000))*(sj1)*(x89)))+(((cj3)*(x90))));
IkReal x95=((((cj0)*(cj2)))+(((IkReal(-1.00000000000000))*(x87)*(x93))));
IkReal x96=((((sj3)*(x90)))+(((cj3)*(sj1))));
IkReal x97=((((cj1)*(cj3)))+(((IkReal(-1.00000000000000))*(x88)*(x89))));
IkReal x98=((cj0)*(x94));
IkReal x99=((((IkReal(-1.00000000000000))*(x86)*(x88)))+(((IkReal(-1.00000000000000))*(cj1)*(x89))));
IkReal x100=((((IkReal(-1.00000000000000))*(cj2)*(sj0)))+(((IkReal(-1.00000000000000))*(x92)*(x93))));
IkReal x101=((((cj3)*(x92)))+(((sj0)*(x94))));
IkReal x102=((((cj0)*(x96)))+(((IkReal(-1.00000000000000))*(x87)*(x89))));
IkReal x103=((((sj3)*(x92)))+(((sj0)*(x96))));
IkReal x104=((x98)+(((IkReal(-1.00000000000000))*(cj3)*(x87))));
new_r00=((((r10)*(x101)))+(((r00)*(((((IkReal(-1.00000000000000))*(x86)*(x87)))+(x98)))))+(((r20)*(x99))));
new_r01=((((r21)*(x99)))+(((r01)*(x104)))+(((r11)*(x101))));
new_r02=((((r02)*(x104)))+(((r12)*(x101)))+(((r22)*(x99))));
new_r10=((((r10)*(x95)))+(((r20)*(x91)))+(((r00)*(x100))));
new_r11=((((r21)*(x91)))+(((r11)*(x95)))+(((r01)*(x100))));
new_r12=((((r02)*(x100)))+(((r12)*(x95)))+(((r22)*(x91))));
new_r20=((((r10)*(x103)))+(((r20)*(x97)))+(((r00)*(x102))));
new_r21=((((r21)*(x97)))+(((r01)*(x102)))+(((r11)*(x103))));
new_r22=((((r02)*(x102)))+(((r12)*(x103)))+(((r22)*(x97))));
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
cj5array[0]=new_r22;
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal dummyeval[1];
IkReal gconst42;
gconst42=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst40;
gconst40=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst41;
gconst41=IKsign(((((cj5)*((new_r02)*(new_r02))))+(((cj5)*((new_r12)*(new_r12))))));
dummyeval[0]=((((cj5)*((new_r02)*(new_r02))))+(((cj5)*((new_r12)*(new_r12)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=((IKcos(j6))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(IKsin(j6)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst48;
gconst48=IKsign(((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))));
dummyeval[0]=((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst49;
gconst49=IKsign(((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10)))));
dummyeval[0]=((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst49)*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst49)*(new_r10))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst49)*(new_r00)), ((IkReal(-1.00000000000000))*(gconst49)*(new_r10)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x105=IKcos(j4);
IkReal x106=IKsin(j4);
IkReal x107=((IkReal(1.00000000000000))*(x106));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x107)))+(((new_r12)*(x105))));
evalcond[1]=((IkReal(-1.00000000000000))+(((new_r02)*(x105)))+(((new_r12)*(x106))));
evalcond[2]=((((new_r10)*(x105)))+(((IkReal(-1.00000000000000))*(sj6)))+(((IkReal(-1.00000000000000))*(new_r00)*(x107))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x107)))+(((IkReal(-1.00000000000000))*(cj6)))+(((new_r11)*(x105))));
evalcond[4]=((((new_r01)*(x105)))+(((new_r11)*(x106))));
evalcond[5]=((((new_r10)*(x106)))+(((new_r00)*(x105))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst48)*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst48)*(new_r11))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst48)*(new_r01)), ((IkReal(-1.00000000000000))*(gconst48)*(new_r11)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x108=IKcos(j4);
IkReal x109=IKsin(j4);
IkReal x110=((IkReal(1.00000000000000))*(x109));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x110)))+(((new_r12)*(x108))));
evalcond[1]=((IkReal(-1.00000000000000))+(((new_r02)*(x108)))+(((new_r12)*(x109))));
evalcond[2]=((((new_r10)*(x108)))+(((IkReal(-1.00000000000000))*(sj6)))+(((IkReal(-1.00000000000000))*(new_r00)*(x110))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x110)))+(((IkReal(-1.00000000000000))*(cj6)))+(((new_r11)*(x108))));
evalcond[4]=((((new_r01)*(x108)))+(((new_r11)*(x109))));
evalcond[5]=((((new_r10)*(x109)))+(((new_r00)*(x108))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(IKcos(j6))))+(new_r20));
evalcond[1]=((IKsin(j6))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst52;
gconst52=IKsign(((((IkReal(-1.00000000000000))*(new_r01)*(new_r12)))+(((new_r02)*(new_r11)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r01)*(new_r12)))+(((new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst53;
gconst53=IKsign(((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst53)*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst53)*(new_r10))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst53)*(new_r00)), ((IkReal(-1.00000000000000))*(gconst53)*(new_r10)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x111=IKcos(j4);
IkReal x112=IKsin(j4);
IkReal x113=((IkReal(1.00000000000000))*(x112));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x113)))+(((new_r12)*(x111))));
evalcond[1]=((IkReal(1.00000000000000))+(((new_r02)*(x111)))+(((new_r12)*(x112))));
evalcond[2]=((((new_r10)*(x111)))+(((IkReal(-1.00000000000000))*(sj6)))+(((IkReal(-1.00000000000000))*(new_r00)*(x113))));
evalcond[3]=((((new_r11)*(x111)))+(((IkReal(-1.00000000000000))*(new_r01)*(x113)))+(((IkReal(-1.00000000000000))*(cj6))));
evalcond[4]=((((new_r11)*(x112)))+(((new_r01)*(x111))));
evalcond[5]=((((new_r10)*(x112)))+(((new_r00)*(x111))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst52)*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst52)*(new_r11))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst52)*(new_r01)), ((IkReal(-1.00000000000000))*(gconst52)*(new_r11)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x114=IKcos(j4);
IkReal x115=IKsin(j4);
IkReal x116=((IkReal(1.00000000000000))*(x115));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x116)))+(((new_r12)*(x114))));
evalcond[1]=((IkReal(1.00000000000000))+(((new_r02)*(x114)))+(((new_r12)*(x115))));
evalcond[2]=((((new_r10)*(x114)))+(((IkReal(-1.00000000000000))*(sj6)))+(((IkReal(-1.00000000000000))*(new_r00)*(x116))));
evalcond[3]=((((new_r11)*(x114)))+(((IkReal(-1.00000000000000))*(new_r01)*(x116)))+(((IkReal(-1.00000000000000))*(cj6))));
evalcond[4]=((((new_r11)*(x115)))+(((new_r01)*(x114))));
evalcond[5]=((((new_r10)*(x115)))+(((new_r00)*(x114))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[5]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[6]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x117=IKatan2(new_r02, new_r12);
j4array[0]=((IkReal(-1.00000000000000))*(x117));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x117))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((((new_r12)*(IKcos(j4))))+(((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj4)*(new_r00)))+(((new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))))+IKsqr(((((cj4)*(new_r00)))+(((new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x118=IKsin(j6);
IkReal x119=((IkReal(1.00000000000000))*(sj4));
IkReal x120=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)*(x119)))+(((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x118))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x119)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x120))));
evalcond[2]=((((cj4)*(new_r01)))+(((new_r11)*(sj4)))+(x118));
evalcond[3]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(((IkReal(-1.00000000000000))*(x120))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
IkReal x121=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=x121;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x121;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x122=IKatan2(new_r02, new_r12);
j4array[0]=((IkReal(-1.00000000000000))*(x122));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x122))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((((new_r12)*(IKcos(j4))))+(((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((cj4)*(new_r01)))+(((new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x123=IKcos(j6);
IkReal x124=((IkReal(1.00000000000000))*(sj4));
IkReal x125=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x124)))+(((IkReal(-1.00000000000000))*(x125))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x124)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x123))));
evalcond[2]=((((cj4)*(new_r01)))+(((new_r11)*(sj4)))+(((IkReal(-1.00000000000000))*(x125))));
evalcond[3]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(x123));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x126=((gconst41)*(new_r22)*(sj5));
if( IKabs(((new_r12)*(x126))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x126))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((new_r12)*(x126)), ((new_r02)*(x126)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x127=IKcos(j4);
IkReal x128=IKsin(j4);
IkReal x129=((IkReal(1.00000000000000))*(sj5));
IkReal x130=((IkReal(1.00000000000000))*(cj5));
IkReal x131=((new_r12)*(x128));
IkReal x132=((new_r02)*(x127));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x128)))+(((new_r12)*(x127))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x129)))+(x131)+(x132));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r22)*(x129)))+(((cj5)*(x131)))+(((cj5)*(x132))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r00)*(x127)*(x129)))+(((IkReal(-1.00000000000000))*(new_r20)*(x130)))+(((IkReal(-1.00000000000000))*(new_r10)*(x128)*(x129))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r01)*(x127)*(x129)))+(((IkReal(-1.00000000000000))*(new_r11)*(x128)*(x129)))+(((IkReal(-1.00000000000000))*(new_r21)*(x130))));
evalcond[5]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x129)*(x132)))+(((IkReal(-1.00000000000000))*(x129)*(x131)))+(((IkReal(-1.00000000000000))*(new_r22)*(x130))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst43;
gconst43=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x133=((((IkReal(-1.00000000000000))*(new_r02)*(sj4)))+(((cj4)*(new_r12))));
IkReal x134=((((new_r12)*(sj4)))+(((cj4)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x133;
evalcond[5]=x133;
evalcond[6]=x134;
evalcond[7]=x134;
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj4)*(new_r00)))+(((new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))))+IKsqr(((((cj4)*(new_r00)))+(((new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x135=IKsin(j6);
IkReal x136=((IkReal(1.00000000000000))*(sj4));
IkReal x137=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x136)))+(((IkReal(-1.00000000000000))*(x135))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x136)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x137))));
evalcond[2]=((((cj4)*(new_r01)))+(((new_r11)*(sj4)))+(x135));
evalcond[3]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(((IkReal(-1.00000000000000))*(x137))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x138=((IkReal(1.00000000000000))+(new_r22));
IkReal x139=((cj4)*(new_r02));
IkReal x140=((new_r12)*(sj4));
IkReal x141=((((IkReal(-1.00000000000000))*(new_r02)*(sj4)))+(((cj4)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=x138;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x141;
evalcond[5]=x141;
evalcond[6]=((x140)+(x139));
evalcond[7]=((((IkReal(-1.00000000000000))*(x140)))+(((IkReal(-1.00000000000000))*(x139))));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x138;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((cj4)*(new_r01)))+(((new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x142=IKcos(j6);
IkReal x143=((IkReal(1.00000000000000))*(sj4));
IkReal x144=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x144)))+(((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x143))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x143)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x142))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x144)))+(((cj4)*(new_r01)))+(((new_r11)*(sj4))));
evalcond[3]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(x142));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj4)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj4)))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x145=IKsin(j6);
IkReal x146=IKcos(j6);
IkReal x147=((cj4)*(new_r01));
IkReal x148=((IkReal(1.00000000000000))*(sj5));
IkReal x149=((new_r10)*(sj4));
IkReal x150=((new_r11)*(sj4));
IkReal x151=((cj4)*(new_r00));
IkReal x152=((IkReal(1.00000000000000))*(sj4));
IkReal x153=((IkReal(1.00000000000000))*(x146));
evalcond[0]=((new_r20)+(((sj5)*(x146))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x145)*(x148)))+(new_r21));
evalcond[2]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x145)))+(((IkReal(-1.00000000000000))*(new_r00)*(x152))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x153)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x152))));
evalcond[4]=((((cj5)*(x145)))+(x150)+(x147));
evalcond[5]=((x151)+(x149)+(((IkReal(-1.00000000000000))*(cj5)*(x153))));
evalcond[6]=((((cj5)*(x147)))+(((IkReal(-1.00000000000000))*(new_r21)*(x148)))+(x145)+(((cj5)*(x150))));
evalcond[7]=((((cj5)*(x149)))+(((IkReal(-1.00000000000000))*(x153)))+(((IkReal(-1.00000000000000))*(new_r20)*(x148)))+(((cj5)*(x151))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((new_r21)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj4)))+(((cj4)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r21)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj4)))+(((cj4)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((new_r21)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj4)))+(((cj4)*(new_r11)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x154=IKsin(j6);
IkReal x155=IKcos(j6);
IkReal x156=((cj4)*(new_r01));
IkReal x157=((IkReal(1.00000000000000))*(sj5));
IkReal x158=((new_r10)*(sj4));
IkReal x159=((new_r11)*(sj4));
IkReal x160=((cj4)*(new_r00));
IkReal x161=((IkReal(1.00000000000000))*(sj4));
IkReal x162=((IkReal(1.00000000000000))*(x155));
evalcond[0]=((((sj5)*(x155)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x154)*(x157)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x161)))+(((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x154))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x162)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x161))));
evalcond[4]=((x156)+(x159)+(((cj5)*(x154))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x162)))+(x160)+(x158));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x157)))+(x154)+(((cj5)*(x159)))+(((cj5)*(x156))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x157)))+(((IkReal(-1.00000000000000))*(x162)))+(((cj5)*(x160)))+(((cj5)*(x158))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((gconst43)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst43)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst43)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst43)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x163=IKsin(j6);
IkReal x164=IKcos(j6);
IkReal x165=((cj4)*(new_r01));
IkReal x166=((IkReal(1.00000000000000))*(sj5));
IkReal x167=((new_r10)*(sj4));
IkReal x168=((new_r11)*(sj4));
IkReal x169=((cj4)*(new_r00));
IkReal x170=((IkReal(1.00000000000000))*(sj4));
IkReal x171=((IkReal(1.00000000000000))*(x164));
evalcond[0]=((new_r20)+(((sj5)*(x164))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x163)*(x166)))+(new_r21));
evalcond[2]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x163)))+(((IkReal(-1.00000000000000))*(new_r00)*(x170))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x171)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x170))));
evalcond[4]=((((cj5)*(x163)))+(x168)+(x165));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x171)))+(x169)+(x167));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x166)))+(((cj5)*(x165)))+(((cj5)*(x168)))+(x163));
evalcond[7]=((((cj5)*(x167)))+(((cj5)*(x169)))+(((IkReal(-1.00000000000000))*(x171)))+(((IkReal(-1.00000000000000))*(new_r20)*(x166))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x172=((gconst40)*(sj5));
if( IKabs(((new_r12)*(x172))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x172))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((new_r12)*(x172)), ((new_r02)*(x172)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x173=IKcos(j4);
IkReal x174=IKsin(j4);
IkReal x175=((IkReal(1.00000000000000))*(sj5));
IkReal x176=((IkReal(1.00000000000000))*(cj5));
IkReal x177=((new_r12)*(x174));
IkReal x178=((new_r02)*(x173));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x174)))+(((new_r12)*(x173))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x175)))+(x178)+(x177));
evalcond[2]=((((cj5)*(x178)))+(((cj5)*(x177)))+(((IkReal(-1.00000000000000))*(new_r22)*(x175))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r20)*(x176)))+(((IkReal(-1.00000000000000))*(new_r10)*(x174)*(x175)))+(((IkReal(-1.00000000000000))*(new_r00)*(x173)*(x175))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r11)*(x174)*(x175)))+(((IkReal(-1.00000000000000))*(new_r21)*(x176)))+(((IkReal(-1.00000000000000))*(new_r01)*(x173)*(x175))));
evalcond[5]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x175)*(x177)))+(((IkReal(-1.00000000000000))*(x175)*(x178)))+(((IkReal(-1.00000000000000))*(new_r22)*(x176))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst43;
gconst43=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x179=((((IkReal(-1.00000000000000))*(new_r02)*(sj4)))+(((cj4)*(new_r12))));
IkReal x180=((((new_r12)*(sj4)))+(((cj4)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x179;
evalcond[5]=x179;
evalcond[6]=x180;
evalcond[7]=x180;
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj4)*(new_r00)))+(((new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))))+IKsqr(((((cj4)*(new_r00)))+(((new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x181=IKsin(j6);
IkReal x182=((IkReal(1.00000000000000))*(sj4));
IkReal x183=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x181)))+(((IkReal(-1.00000000000000))*(new_r00)*(x182))));
evalcond[1]=((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x183)))+(((IkReal(-1.00000000000000))*(new_r01)*(x182))));
evalcond[2]=((((cj4)*(new_r01)))+(((new_r11)*(sj4)))+(x181));
evalcond[3]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(((IkReal(-1.00000000000000))*(x183))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x184=((IkReal(1.00000000000000))+(new_r22));
IkReal x185=((cj4)*(new_r02));
IkReal x186=((new_r12)*(sj4));
IkReal x187=((((IkReal(-1.00000000000000))*(new_r02)*(sj4)))+(((cj4)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=x184;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x187;
evalcond[5]=x187;
evalcond[6]=((x185)+(x186));
evalcond[7]=((((IkReal(-1.00000000000000))*(x186)))+(((IkReal(-1.00000000000000))*(x185))));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x184;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((cj4)*(new_r01)))+(((new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x188=IKcos(j6);
IkReal x189=((IkReal(1.00000000000000))*(sj4));
IkReal x190=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x190)))+(((IkReal(-1.00000000000000))*(new_r00)*(x189))));
evalcond[1]=((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x188)))+(((IkReal(-1.00000000000000))*(new_r01)*(x189))));
evalcond[2]=((((cj4)*(new_r01)))+(((new_r11)*(sj4)))+(((IkReal(-1.00000000000000))*(x190))));
evalcond[3]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(x188));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj4)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj4)))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x191=IKsin(j6);
IkReal x192=IKcos(j6);
IkReal x193=((cj4)*(new_r01));
IkReal x194=((IkReal(1.00000000000000))*(sj5));
IkReal x195=((new_r10)*(sj4));
IkReal x196=((new_r11)*(sj4));
IkReal x197=((cj4)*(new_r00));
IkReal x198=((IkReal(1.00000000000000))*(sj4));
IkReal x199=((IkReal(1.00000000000000))*(x192));
evalcond[0]=((new_r20)+(((sj5)*(x192))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x191)*(x194)))+(new_r21));
evalcond[2]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x191)))+(((IkReal(-1.00000000000000))*(new_r00)*(x198))));
evalcond[3]=((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x199)))+(((IkReal(-1.00000000000000))*(new_r01)*(x198))));
evalcond[4]=((((cj5)*(x191)))+(x193)+(x196));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x199)))+(x197)+(x195));
evalcond[6]=((((cj5)*(x196)))+(((cj5)*(x193)))+(((IkReal(-1.00000000000000))*(new_r21)*(x194)))+(x191));
evalcond[7]=((((cj5)*(x197)))+(((cj5)*(x195)))+(((IkReal(-1.00000000000000))*(x199)))+(((IkReal(-1.00000000000000))*(new_r20)*(x194))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((new_r21)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj4)))+(((cj4)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r21)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj4)))+(((cj4)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((new_r21)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj4)))+(((cj4)*(new_r11)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x200=IKsin(j6);
IkReal x201=IKcos(j6);
IkReal x202=((cj4)*(new_r01));
IkReal x203=((IkReal(1.00000000000000))*(sj5));
IkReal x204=((new_r10)*(sj4));
IkReal x205=((new_r11)*(sj4));
IkReal x206=((cj4)*(new_r00));
IkReal x207=((IkReal(1.00000000000000))*(sj4));
IkReal x208=((IkReal(1.00000000000000))*(x201));
evalcond[0]=((new_r20)+(((sj5)*(x201))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x200)*(x203)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x207)))+(((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x200))));
evalcond[3]=((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x208)))+(((IkReal(-1.00000000000000))*(new_r01)*(x207))));
evalcond[4]=((x205)+(x202)+(((cj5)*(x200))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x208)))+(x206)+(x204));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x203)))+(x200)+(((cj5)*(x202)))+(((cj5)*(x205))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x203)))+(((IkReal(-1.00000000000000))*(x208)))+(((cj5)*(x204)))+(((cj5)*(x206))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((gconst43)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst43)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst43)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst43)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x209=IKsin(j6);
IkReal x210=IKcos(j6);
IkReal x211=((cj4)*(new_r01));
IkReal x212=((IkReal(1.00000000000000))*(sj5));
IkReal x213=((new_r10)*(sj4));
IkReal x214=((new_r11)*(sj4));
IkReal x215=((cj4)*(new_r00));
IkReal x216=((IkReal(1.00000000000000))*(sj4));
IkReal x217=((IkReal(1.00000000000000))*(x210));
evalcond[0]=((((sj5)*(x210)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x209)*(x212))));
evalcond[2]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x216)))+(((IkReal(-1.00000000000000))*(x209))));
evalcond[3]=((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x216)))+(((IkReal(-1.00000000000000))*(x217))));
evalcond[4]=((x211)+(x214)+(((cj5)*(x209))));
evalcond[5]=((x213)+(x215)+(((IkReal(-1.00000000000000))*(cj5)*(x217))));
evalcond[6]=((((cj5)*(x214)))+(((cj5)*(x211)))+(x209)+(((IkReal(-1.00000000000000))*(new_r21)*(x212))));
evalcond[7]=((((cj5)*(x213)))+(((cj5)*(x215)))+(((IkReal(-1.00000000000000))*(new_r20)*(x212)))+(((IkReal(-1.00000000000000))*(x217))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((gconst42)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst42)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst42)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst42)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=((new_r20)+(((sj5)*(IKcos(j6)))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj5)*(IKsin(j6))))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst44;
gconst44=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst45;
gconst45=IKsign(((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x218=((gconst45)*(sj6));
if( IKabs(((new_r12)*(x218))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x218))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((new_r12)*(x218)), ((new_r02)*(x218)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[12];
IkReal x219=IKcos(j4);
IkReal x220=IKsin(j4);
IkReal x221=((IkReal(1.00000000000000))*(cj6));
IkReal x222=((IkReal(1.00000000000000))*(sj5));
IkReal x223=((IkReal(1.00000000000000))*(cj5));
IkReal x224=((new_r00)*(x219));
IkReal x225=((cj5)*(x220));
IkReal x226=((new_r11)*(x220));
IkReal x227=((cj5)*(x219));
IkReal x228=((new_r02)*(x219));
IkReal x229=((new_r12)*(x220));
IkReal x230=((new_r10)*(x220));
IkReal x231=((IkReal(1.00000000000000))*(x220));
IkReal x232=((new_r01)*(x219));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x231)))+(((new_r12)*(x219))));
evalcond[1]=((x229)+(x228)+(((IkReal(-1.00000000000000))*(x222))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)))+(((new_r10)*(x219)))+(((IkReal(-1.00000000000000))*(new_r00)*(x231))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x231)))+(((new_r11)*(x219)))+(((IkReal(-1.00000000000000))*(x221))));
evalcond[4]=((((cj5)*(sj6)))+(x226)+(x232));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x221)))+(x224)+(x230));
evalcond[6]=((((new_r02)*(x227)))+(((new_r12)*(x225)))+(((IkReal(-1.00000000000000))*(new_r22)*(x222))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x222)*(x224)))+(((IkReal(-1.00000000000000))*(new_r20)*(x223)))+(((IkReal(-1.00000000000000))*(x222)*(x230))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x222)*(x226)))+(((IkReal(-1.00000000000000))*(new_r21)*(x223)))+(((IkReal(-1.00000000000000))*(x222)*(x232))));
evalcond[9]=((sj6)+(((new_r01)*(x227)))+(((new_r11)*(x225)))+(((IkReal(-1.00000000000000))*(new_r21)*(x222))));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x222)*(x229)))+(((IkReal(-1.00000000000000))*(x222)*(x228)))+(((IkReal(-1.00000000000000))*(new_r22)*(x223))));
evalcond[11]=((((new_r10)*(x225)))+(((cj5)*(x224)))+(((IkReal(-1.00000000000000))*(new_r20)*(x222)))+(((IkReal(-1.00000000000000))*(x221))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x233=((gconst44)*(sj5));
if( IKabs(((new_r12)*(x233))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x233))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((new_r12)*(x233)), ((new_r02)*(x233)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[12];
IkReal x234=IKcos(j4);
IkReal x235=IKsin(j4);
IkReal x236=((IkReal(1.00000000000000))*(cj6));
IkReal x237=((IkReal(1.00000000000000))*(sj5));
IkReal x238=((IkReal(1.00000000000000))*(cj5));
IkReal x239=((new_r00)*(x234));
IkReal x240=((cj5)*(x235));
IkReal x241=((new_r11)*(x235));
IkReal x242=((cj5)*(x234));
IkReal x243=((new_r02)*(x234));
IkReal x244=((new_r12)*(x235));
IkReal x245=((new_r10)*(x235));
IkReal x246=((IkReal(1.00000000000000))*(x235));
IkReal x247=((new_r01)*(x234));
evalcond[0]=((((new_r12)*(x234)))+(((IkReal(-1.00000000000000))*(new_r02)*(x246))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x237)))+(x243)+(x244));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)))+(((new_r10)*(x234)))+(((IkReal(-1.00000000000000))*(new_r00)*(x246))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x246)))+(((new_r11)*(x234)))+(((IkReal(-1.00000000000000))*(x236))));
evalcond[4]=((((cj5)*(sj6)))+(x241)+(x247));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x236)))+(x239)+(x245));
evalcond[6]=((((new_r12)*(x240)))+(((IkReal(-1.00000000000000))*(new_r22)*(x237)))+(((new_r02)*(x242))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x238)))+(((IkReal(-1.00000000000000))*(x237)*(x245)))+(((IkReal(-1.00000000000000))*(x237)*(x239))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r21)*(x238)))+(((IkReal(-1.00000000000000))*(x237)*(x247)))+(((IkReal(-1.00000000000000))*(x237)*(x241))));
evalcond[9]=((sj6)+(((IkReal(-1.00000000000000))*(new_r21)*(x237)))+(((new_r01)*(x242)))+(((new_r11)*(x240))));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x238)))+(((IkReal(-1.00000000000000))*(x237)*(x244)))+(((IkReal(-1.00000000000000))*(x237)*(x243))));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r20)*(x237)))+(((cj5)*(x239)))+(((IkReal(-1.00000000000000))*(x236)))+(((new_r10)*(x240))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "c9e5215735aecb79c5312f66d75d8bff"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
