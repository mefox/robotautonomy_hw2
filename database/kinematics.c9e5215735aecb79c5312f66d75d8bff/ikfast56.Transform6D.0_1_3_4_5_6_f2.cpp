/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 56 generated on 2013-02-18 14:43:51.771534
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h"
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==56);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72;
x0=IKsin(j[1]);
x1=IKsin(j[2]);
x2=IKsin(j[4]);
x3=IKcos(j[4]);
x4=IKcos(j[1]);
x5=IKsin(j[3]);
x6=((x4)*(x5));
x7=IKcos(j[2]);
x8=IKcos(j[3]);
x9=((x0)*(x7)*(x8));
x10=((x6)+(x9));
x11=IKsin(j[6]);
x12=IKcos(j[5]);
x13=((x0)*(x1)*(x2));
x14=((-1.00000000000000)*(x10));
x15=((x14)*(x3));
x16=((x13)+(x15));
x17=((x12)*(x16));
x18=IKsin(j[5]);
x19=((x0)*(x5)*(x7));
x20=((x4)*(x8));
x21=((((-1.00000000000000)*(x20)))+(x19));
x22=((x18)*(x21));
x23=((x17)+(x22));
x24=((x0)*(x1)*(x3));
x25=((x10)*(x2));
x26=((x24)+(x25));
x27=IKcos(j[6]);
x28=IKsin(j[0]);
x29=IKcos(j[0]);
x30=((x29)*(x7));
x31=((x1)*(x28)*(x4));
x32=((((-1.00000000000000)*(x31)))+(x30));
x33=((x1)*(x29));
x34=((x28)*(x4)*(x7));
x35=((x33)+(x34));
x36=((x35)*(x8));
x37=((x0)*(x28)*(x5));
x38=((((-1.00000000000000)*(x36)))+(x37));
x39=((-1.00000000000000)*(x35));
x40=((x39)*(x5));
x41=((x0)*(x28)*(x8));
x42=((((-1.00000000000000)*(x41)))+(x40));
x43=((x2)*(x32));
x44=((((-1.00000000000000)*(x37)))+(x36));
x45=((x3)*(x44));
x46=((x45)+(x43));
x47=((0.0450000000000000)*(x33));
x48=((0.0450000000000000)*(x34));
x49=((x30)*(x4));
x50=((x1)*(x28));
x51=((x28)*(x7));
x52=((x33)*(x4));
x53=((x51)+(x52));
x54=((-1.00000000000000)*(x53));
x55=((x49)+(((-1.00000000000000)*(x50))));
x56=((x55)*(x8));
x57=((x3)*(x54));
x58=((x0)*(x29)*(x5));
x59=((x58)+(((-1.00000000000000)*(x56))));
x60=((x2)*(x59));
x61=((x57)+(x60));
x62=((((-1.00000000000000)*(x49)))+(x50));
x63=((x5)*(x62));
x64=((x0)*(x29)*(x8));
x65=((x63)+(((-1.00000000000000)*(x64))));
x66=((x2)*(x54));
x67=((-1.00000000000000)*(x58));
x68=((x56)+(x67));
x69=((x3)*(x68));
x70=((x66)+(x69));
x71=((0.0450000000000000)*(x49));
x72=((0.0450000000000000)*(x50));
eerot[0]=((((x23)*(x27)))+(((x11)*(x26))));
eerot[1]=((((x26)*(x27)))+(((-1.00000000000000)*(x11)*(x23))));
eerot[2]=((((x12)*(((((-1.00000000000000)*(x19)))+(x20)))))+(((x16)*(x18))));
eetrans[0]=((0.0790000000000000)+(((0.300000000000000)*(x20)))+(((0.550000000000000)*(x4)))+(((0.0450000000000000)*(x6)))+(((0.0450000000000000)*(x9)))+(((-0.300000000000000)*(x19)))+(((-0.0450000000000000)*(x0)*(x7))));
eerot[3]=((((x11)*(((((-1.00000000000000)*(x3)*(x32)))+(((-1.00000000000000)*(x2)*(x38)))))))+(((x27)*(((((-1.00000000000000)*(x18)*(x42)))+(((-1.00000000000000)*(x12)*(x46))))))));
eerot[4]=((((x11)*(((((x18)*(x42)))+(((x12)*(x46)))))))+(((x27)*(((((-1.00000000000000)*(x3)*(x32)))+(((-1.00000000000000)*(x2)*(x38))))))));
eerot[5]=((((-1.00000000000000)*(x18)*(x46)))+(((x12)*(x42))));
eetrans[1]=((-0.191000000000000)+(((x8)*(((x48)+(x47)))))+(((-1.00000000000000)*(x47)))+(((-1.00000000000000)*(x48)))+(((x5)*(((((-0.300000000000000)*(x33)))+(((-0.300000000000000)*(x34)))))))+(((-0.0450000000000000)*(x37)))+(((-0.550000000000000)*(x0)*(x28)))+(((-0.300000000000000)*(x41))));
eerot[6]=((((x11)*(x61)))+(((x27)*(((((x18)*(x65)))+(((x12)*(x70))))))));
eerot[7]=((((x27)*(x61)))+(((x11)*(((((-1.00000000000000)*(x12)*(x70)))+(((-1.00000000000000)*(x18)*(x65))))))));
eerot[8]=((((x18)*(((((x3)*(((x56)+(((-1.00000000000000)*(x58)))))))+(x66)))))+(((x12)*(((x64)+(((-1.00000000000000)*(x63))))))));
eetrans[2]=((0.905000000000000)+(((x8)*(((((-1.00000000000000)*(x71)))+(x72)))))+(((-1.00000000000000)*(x72)))+(((0.550000000000000)*(x0)*(x29)))+(((0.0450000000000000)*(x58)))+(x71)+(((x5)*(((((-0.300000000000000)*(x50)))+(((0.300000000000000)*(x49)))))))+(((0.300000000000000)*(x64))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,j6,cj6,sj6,htj6,j2,cj2,sj2,htj2,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij2[2], _nj2;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij2[0] = -1; _ij2[1] = -1; _nj2 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r20;
new_r01=r21;
new_r02=r22;
new_px=((-0.905000000000000)+(pz));
new_r10=((-1.00000000000000)*(r10));
new_r11=((-1.00000000000000)*(r11));
new_r12=((-1.00000000000000)*(r12));
new_py=((-0.191000000000000)+(((-1.00000000000000)*(py))));
new_r20=r00;
new_r21=r01;
new_r22=r02;
new_pz=((-0.0790000000000000)+(px));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((-1.00000000000000)*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
rxp0_2=((((-1.00000000000000)*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((-1.00000000000000)*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x73=((2.98679637348110)*(pp));
IkReal x74=((-1.18441410190393)+(x73));
if( (((1.18441410190393)+(((-1.00000000000000)*(x73))))) < -1-IKFAST_SINCOS_THRESH || (((1.18441410190393)+(((-1.00000000000000)*(x73))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x75=((-1.00000000000000)*(IKasin(((1.18441410190393)+(((-1.00000000000000)*(x73)))))));
j3array[0]=((-1.34027003705633)+(x75));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((1.80132261653346)+(((-1.00000000000000)*(x75))));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x76=(cj2)*(cj2);
IkReal x77=(sj3)*(sj3);
IkReal x78=(cj3)*(cj3);
dummyeval[0]=((149.382716049383)+(((-13.3333333333333)*(cj3)*(sj3)*(x76)))+(((44.4444444444444)*(x78)))+(((24.4444444444444)*(sj3)))+(((44.4444444444444)*(x76)*(x77)))+(x77)+(x76)+(((x76)*(x78)))+(((162.962962962963)*(cj3)))+(((-2.00000000000000)*(cj3)*(x76)))+(((13.3333333333333)*(sj3)*(x76)))+(((13.3333333333333)*(cj3)*(sj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x79=((0.0450000000000000)*(sj3));
IkReal x80=((0.300000000000000)*(cj3));
IkReal x81=((0.300000000000000)*(cj2)*(sj3));
IkReal x82=((0.0450000000000000)*(cj2));
IkReal x83=((x82)+(x81));
IkReal x84=((1.00000000000000)*(cj3)*(x82));
IkReal x85=((x83)+(((-1.00000000000000)*(x84))));
IkReal x86=(x85)*(x85);
IkReal x87=((0.550000000000000)+(x79)+(x80));
IkReal x88=(x87)*(x87);
IkReal x89=((x88)+(x86));
if( (x89) < (IkReal)-0.00001 )
    continue;
IkReal x90=IKsqrt(x89);
IkReal x91=IKabs(x90);
IkReal x92=((IKabs(x91) != 0)?((IkReal)1/(x91)):(IkReal)1.0e30);
IkReal x93=((pz)*(x92));
if( (x93) < -1-IKFAST_SINCOS_THRESH || (x93) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x94=IKasin(x93);
IkReal x95=((-0.550000000000000)+(x87));
IkReal x96=((-0.550000000000000)+(((-1.00000000000000)*(x95))));
if( IKabs(x96) < IKFAST_ATAN2_MAGTHRESH && IKabs(x85) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x97=IKatan2(x96, x85);
j1array[0]=((((-1.00000000000000)*(x97)))+(((-1.00000000000000)*(x94))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(x94)+(((-1.00000000000000)*(x97))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(((((-1.00000000000000)*(sj1)*((py)*(py))))+(((-1.00000000000000)*(sj1)*((px)*(px))))));
dummyeval[0]=((((-1.00000000000000)*(sj1)*((py)*(py))))+(((-1.00000000000000)*(sj1)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x98=((-0.550000000000000)+(pz));
IkReal x99=((0.0450000000000000)*(sj3));
IkReal x100=((0.300000000000000)*(cj3));
IkReal x101=((x100)+(x99));
IkReal x102=((((-1.00000000000000)*(x101)))+(x98));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j1)), 6.28318530717959)));
evalcond[1]=((0.396550000000000)+(((0.0765000000000000)*(sj3)))+(((0.325950000000000)*(cj3)))+(((-1.00000000000000)*(pp))));
evalcond[2]=x102;
evalcond[3]=x102;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(((((-1.00000000000000)*(sj2)*((py)*(py))))+(((-1.00000000000000)*(sj2)*((px)*(px))))));
dummyeval[0]=((((-1.00000000000000)*(sj2)*((py)*(py))))+(((-1.00000000000000)*(sj2)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x103=((-0.550000000000000)+(pz));
IkReal x104=((0.0450000000000000)*(sj3));
IkReal x105=((0.300000000000000)*(cj3));
IkReal x106=((x104)+(x105));
IkReal x107=((((-1.00000000000000)*(x106)))+(x103));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j2)), 6.28318530717959)));
evalcond[1]=((0.396550000000000)+(((0.0765000000000000)*(sj3)))+(((0.325950000000000)*(cj3)))+(((-1.00000000000000)*(pp))));
evalcond[2]=x107;
evalcond[3]=x107;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((gconst2)*(((((0.300000000000000)*(py)*(sj3)))+(((-0.0450000000000000)*(cj3)*(py)))+(((0.0450000000000000)*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((0.300000000000000)*(px)*(sj3)))+(((-0.0450000000000000)*(cj3)*(px)))+(((0.0450000000000000)*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst2)*(((((0.300000000000000)*(py)*(sj3)))+(((-0.0450000000000000)*(cj3)*(py)))+(((0.0450000000000000)*(py)))))), ((gconst2)*(((((0.300000000000000)*(px)*(sj3)))+(((-0.0450000000000000)*(cj3)*(px)))+(((0.0450000000000000)*(px)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x108=IKsin(j0);
IkReal x109=IKcos(j0);
evalcond[0]=((((px)*(x108)))+(((-1.00000000000000)*(py)*(x109))));
evalcond[1]=((0.0450000000000000)+(((-1.00000000000000)*(px)*(x109)))+(((-0.0450000000000000)*(cj3)))+(((0.300000000000000)*(sj3)))+(((-1.00000000000000)*(py)*(x108))));
evalcond[2]=((-0.212500000000000)+(((1.10000000000000)*(pz)))+(((0.0900000000000000)*(px)*(x109)))+(((0.0900000000000000)*(py)*(x108)))+(((-1.00000000000000)*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x172=((-0.550000000000000)+(pz));
IkReal x173=((0.0450000000000000)*(sj3));
IkReal x174=((0.300000000000000)*(cj3));
IkReal x175=((x173)+(x174));
IkReal x176=((((-1.00000000000000)*(x175)))+(x172));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j2)), 6.28318530717959)));
evalcond[1]=((0.396550000000000)+(((0.0765000000000000)*(sj3)))+(((0.325950000000000)*(cj3)))+(((-1.00000000000000)*(pp))));
evalcond[2]=x176;
evalcond[3]=x176;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py))))));
dummyeval[0]=((((-1.00000000000000)*((px)*(px))))+(((-1.00000000000000)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((gconst3)*(((((0.300000000000000)*(py)*(sj3)))+(((-0.0450000000000000)*(cj3)*(py)))+(((0.0450000000000000)*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((0.300000000000000)*(px)*(sj3)))+(((-0.0450000000000000)*(cj3)*(px)))+(((0.0450000000000000)*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst3)*(((((0.300000000000000)*(py)*(sj3)))+(((-0.0450000000000000)*(cj3)*(py)))+(((0.0450000000000000)*(py)))))), ((gconst3)*(((((0.300000000000000)*(px)*(sj3)))+(((-0.0450000000000000)*(cj3)*(px)))+(((0.0450000000000000)*(px)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x177=IKsin(j0);
IkReal x178=IKcos(j0);
evalcond[0]=((((-1.00000000000000)*(py)*(x178)))+(((px)*(x177))));
evalcond[1]=((0.0450000000000000)+(((-0.0450000000000000)*(cj3)))+(((py)*(x177)))+(((px)*(x178)))+(((0.300000000000000)*(sj3))));
evalcond[2]=((-0.212500000000000)+(((-0.0900000000000000)*(py)*(x177)))+(((1.10000000000000)*(pz)))+(((-0.0900000000000000)*(px)*(x178)))+(((-1.00000000000000)*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x179=(sj2)*(sj2);
if( IKabs(((gconst1)*(((((-0.0450000000000000)*(cj3)*(px)*(x179)))+(((-0.0450000000000000)*(cj2)*(py)*(sj2)))+(((-0.300000000000000)*(cj2)*(py)*(sj2)*(sj3)))+(((0.0450000000000000)*(px)*(x179)))+(((0.300000000000000)*(px)*(sj3)*(x179)))+(((0.0450000000000000)*(cj2)*(cj3)*(py)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((-0.300000000000000)*(py)*(sj3)*(x179)))+(((0.0450000000000000)*(cj3)*(py)*(x179)))+(((-0.0450000000000000)*(cj2)*(px)*(sj2)))+(((-0.0450000000000000)*(py)*(x179)))+(((-0.300000000000000)*(cj2)*(px)*(sj2)*(sj3)))+(((0.0450000000000000)*(cj2)*(cj3)*(px)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst1)*(((((-0.0450000000000000)*(cj3)*(px)*(x179)))+(((-0.0450000000000000)*(cj2)*(py)*(sj2)))+(((-0.300000000000000)*(cj2)*(py)*(sj2)*(sj3)))+(((0.0450000000000000)*(px)*(x179)))+(((0.300000000000000)*(px)*(sj3)*(x179)))+(((0.0450000000000000)*(cj2)*(cj3)*(py)*(sj2)))))), ((gconst1)*(((((-0.300000000000000)*(py)*(sj3)*(x179)))+(((0.0450000000000000)*(cj3)*(py)*(x179)))+(((-0.0450000000000000)*(cj2)*(px)*(sj2)))+(((-0.0450000000000000)*(py)*(x179)))+(((-0.300000000000000)*(cj2)*(px)*(sj2)*(sj3)))+(((0.0450000000000000)*(cj2)*(cj3)*(px)*(sj2)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x180=IKcos(j0);
IkReal x181=IKsin(j0);
evalcond[0]=((((-1.00000000000000)*(py)*(x180)))+(((0.0450000000000000)*(sj2)))+(((-0.0450000000000000)*(cj3)*(sj2)))+(((0.300000000000000)*(sj2)*(sj3)))+(((px)*(x181))));
evalcond[1]=((((cj2)*(px)*(x181)))+(((py)*(sj2)*(x181)))+(((px)*(sj2)*(x180)))+(((-1.00000000000000)*(cj2)*(py)*(x180))));
evalcond[2]=((0.0450000000000000)+(((-1.00000000000000)*(cj2)*(px)*(x180)))+(((-0.0450000000000000)*(cj3)))+(((-1.00000000000000)*(py)*(sj2)*(x180)))+(((0.300000000000000)*(sj3)))+(((px)*(sj2)*(x181)))+(((-1.00000000000000)*(cj2)*(py)*(x181))));
evalcond[3]=((((-1.00000000000000)*(py)*(x181)))+(((0.300000000000000)*(cj2)*(sj3)))+(((0.0450000000000000)*(cj2)))+(((-1.00000000000000)*(px)*(x180)))+(((-0.0450000000000000)*(cj2)*(cj3))));
evalcond[4]=((-0.212500000000000)+(((1.10000000000000)*(pz)))+(((0.0900000000000000)*(py)*(sj2)*(x180)))+(((0.0900000000000000)*(cj2)*(px)*(x180)))+(((-0.0900000000000000)*(px)*(sj2)*(x181)))+(((0.0900000000000000)*(cj2)*(py)*(x181)))+(((-1.00000000000000)*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x182=((0.0450000000000000)*(sj3));
IkReal x183=((0.300000000000000)*(cj3));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j1)), 6.28318530717959)));
evalcond[1]=((0.396550000000000)+(((0.0765000000000000)*(sj3)))+(((0.325950000000000)*(cj3)))+(((-1.00000000000000)*(pp))));
evalcond[2]=((-0.550000000000000)+(((-1.00000000000000)*(x183)))+(((-1.00000000000000)*(x182)))+(((-1.00000000000000)*(pz))));
evalcond[3]=((0.550000000000000)+(x182)+(x183)+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((gconst4)*(((((0.0450000000000000)*(cj3)*(px)*(sj2)))+(((0.0450000000000000)*(cj2)*(cj3)*(py)))+(((-0.0450000000000000)*(cj2)*(py)))+(((-0.300000000000000)*(cj2)*(py)*(sj3)))+(((-0.300000000000000)*(px)*(sj2)*(sj3)))+(((-0.0450000000000000)*(px)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((((0.0450000000000000)*(cj2)*(cj3)*(px)))+(((-0.0450000000000000)*(cj2)*(px)))+(((-0.300000000000000)*(cj2)*(px)*(sj3)))+(((0.0450000000000000)*(py)*(sj2)))+(((0.300000000000000)*(py)*(sj2)*(sj3)))+(((-0.0450000000000000)*(cj3)*(py)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst4)*(((((0.0450000000000000)*(cj3)*(px)*(sj2)))+(((0.0450000000000000)*(cj2)*(cj3)*(py)))+(((-0.0450000000000000)*(cj2)*(py)))+(((-0.300000000000000)*(cj2)*(py)*(sj3)))+(((-0.300000000000000)*(px)*(sj2)*(sj3)))+(((-0.0450000000000000)*(px)*(sj2)))))), ((gconst4)*(((((0.0450000000000000)*(cj2)*(cj3)*(px)))+(((-0.0450000000000000)*(cj2)*(px)))+(((-0.300000000000000)*(cj2)*(px)*(sj3)))+(((0.0450000000000000)*(py)*(sj2)))+(((0.300000000000000)*(py)*(sj2)*(sj3)))+(((-0.0450000000000000)*(cj3)*(py)*(sj2)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x184=IKsin(j0);
IkReal x185=IKcos(j0);
evalcond[0]=((((-1.00000000000000)*(py)*(x185)))+(((0.0450000000000000)*(sj2)))+(((-0.0450000000000000)*(cj3)*(sj2)))+(((0.300000000000000)*(sj2)*(sj3)))+(((px)*(x184))));
evalcond[1]=((((-1.00000000000000)*(px)*(sj2)*(x185)))+(((-1.00000000000000)*(py)*(sj2)*(x184)))+(((cj2)*(px)*(x184)))+(((-1.00000000000000)*(cj2)*(py)*(x185))));
evalcond[2]=((0.0450000000000000)+(((-0.0450000000000000)*(cj3)))+(((-1.00000000000000)*(py)*(sj2)*(x185)))+(((cj2)*(px)*(x185)))+(((0.300000000000000)*(sj3)))+(((cj2)*(py)*(x184)))+(((px)*(sj2)*(x184))));
evalcond[3]=((((0.0450000000000000)*(cj2)*(cj3)))+(((-0.0450000000000000)*(cj2)))+(((-1.00000000000000)*(py)*(x184)))+(((-0.300000000000000)*(cj2)*(sj3)))+(((-1.00000000000000)*(px)*(x185))));
evalcond[4]=((-0.212500000000000)+(((-0.0900000000000000)*(cj2)*(py)*(x184)))+(((-1.10000000000000)*(pz)))+(((0.0900000000000000)*(py)*(sj2)*(x185)))+(((-0.0900000000000000)*(px)*(sj2)*(x184)))+(((-0.0900000000000000)*(cj2)*(px)*(x185)))+(((-1.00000000000000)*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((gconst0)*(((((-0.0450000000000000)*(py)*(sj3)))+(((0.0450000000000000)*(px)*(sj1)*(sj2)))+(((cj1)*(py)*(pz)))+(((-0.0450000000000000)*(cj3)*(px)*(sj1)*(sj2)))+(((-0.300000000000000)*(cj3)*(py)))+(((0.300000000000000)*(px)*(sj1)*(sj2)*(sj3)))+(((-0.550000000000000)*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((-0.0450000000000000)*(py)*(sj1)*(sj2)))+(((cj1)*(px)*(pz)))+(((0.0450000000000000)*(cj3)*(py)*(sj1)*(sj2)))+(((-0.300000000000000)*(cj3)*(px)))+(((-0.0450000000000000)*(px)*(sj3)))+(((-0.300000000000000)*(py)*(sj1)*(sj2)*(sj3)))+(((-0.550000000000000)*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst0)*(((((-0.0450000000000000)*(py)*(sj3)))+(((0.0450000000000000)*(px)*(sj1)*(sj2)))+(((cj1)*(py)*(pz)))+(((-0.0450000000000000)*(cj3)*(px)*(sj1)*(sj2)))+(((-0.300000000000000)*(cj3)*(py)))+(((0.300000000000000)*(px)*(sj1)*(sj2)*(sj3)))+(((-0.550000000000000)*(py)))))), ((gconst0)*(((((-0.0450000000000000)*(py)*(sj1)*(sj2)))+(((cj1)*(px)*(pz)))+(((0.0450000000000000)*(cj3)*(py)*(sj1)*(sj2)))+(((-0.300000000000000)*(cj3)*(px)))+(((-0.0450000000000000)*(px)*(sj3)))+(((-0.300000000000000)*(py)*(sj1)*(sj2)*(sj3)))+(((-0.550000000000000)*(px)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x186=IKsin(j0);
IkReal x187=IKcos(j0);
evalcond[0]=((-0.550000000000000)+(((-0.0450000000000000)*(sj3)))+(((px)*(sj1)*(x187)))+(((-0.300000000000000)*(cj3)))+(((cj1)*(pz)))+(((py)*(sj1)*(x186))));
evalcond[1]=((((-1.00000000000000)*(py)*(x187)))+(((0.0450000000000000)*(sj2)))+(((-0.0450000000000000)*(cj3)*(sj2)))+(((0.300000000000000)*(sj2)*(sj3)))+(((px)*(x186))));
evalcond[2]=((((-1.00000000000000)*(pz)*(sj1)*(sj2)))+(((cj1)*(py)*(sj2)*(x186)))+(((cj2)*(px)*(x186)))+(((-1.00000000000000)*(cj2)*(py)*(x187)))+(((cj1)*(px)*(sj2)*(x187))));
evalcond[3]=((0.0450000000000000)+(((-0.0450000000000000)*(cj3)))+(((-1.00000000000000)*(py)*(sj2)*(x187)))+(((cj2)*(pz)*(sj1)))+(((0.300000000000000)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj2)*(px)*(x187)))+(((-1.00000000000000)*(cj1)*(cj2)*(py)*(x186)))+(((px)*(sj2)*(x186))));
evalcond[4]=((((0.300000000000000)*(cj1)*(cj2)*(sj3)))+(((-1.00000000000000)*(py)*(x186)))+(((0.0450000000000000)*(sj1)*(sj3)))+(((0.550000000000000)*(sj1)))+(((-0.0450000000000000)*(cj1)*(cj2)*(cj3)))+(((0.300000000000000)*(cj3)*(sj1)))+(((-1.00000000000000)*(px)*(x187)))+(((0.0450000000000000)*(cj1)*(cj2))));
evalcond[5]=((-0.212500000000000)+(((1.10000000000000)*(py)*(sj1)*(x186)))+(((-0.0900000000000000)*(cj2)*(pz)*(sj1)))+(((0.0900000000000000)*(py)*(sj2)*(x187)))+(((1.10000000000000)*(cj1)*(pz)))+(((0.0900000000000000)*(cj1)*(cj2)*(py)*(x186)))+(((1.10000000000000)*(px)*(sj1)*(x187)))+(((-0.0900000000000000)*(px)*(sj2)*(x186)))+(((0.0900000000000000)*(cj1)*(cj2)*(px)*(x187)))+(((-1.00000000000000)*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x188=(px)*(px);
IkReal x189=(py)*(py);
IkReal x190=((x188)+(x189));
if( (x190) < (IkReal)-0.00001 )
    continue;
IkReal x191=IKsqrt(x190);
IkReal x192=IKabs(x191);
IkReal x193=((IKabs(x192) != 0)?((IkReal)1/(x192)):(IkReal)1.0e30);
IkReal x194=((0.0450000000000000)*(sj2));
IkReal x195=((0.300000000000000)*(sj2)*(sj3));
IkReal x196=((x195)+(x194));
IkReal x197=((1.00000000000000)*(cj3)*(x194));
IkReal x198=((((-1.00000000000000)*(x197)))+(x196));
IkReal x199=((x193)*(x198));
if( (x199) < -1-IKFAST_SINCOS_THRESH || (x199) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x200=IKasin(x199);
IkReal x201=((-1.00000000000000)*(py));
if( IKabs(x201) < IKFAST_ATAN2_MAGTHRESH && IKabs(px) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x202=IKatan2(x201, px);
j0array[0]=((((-1.00000000000000)*(x200)))+(((-1.00000000000000)*(x202))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x202)))+(x200));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x203=(cj2)*(cj2);
IkReal x204=(py)*(py);
IkReal x205=(sj2)*(sj2);
IkReal x206=((px)*(py)*(x205));
IkReal x207=((px)*(py)*(x203));
IkReal x208=((x207)+(x206));
IkReal x209=IKcos(j0);
IkReal x210=IKsin(j0);
IkReal x211=(px)*(px);
evalcond[0]=((((-0.0450000000000000)*(py)*(sj2)))+(((x209)*(((((x204)*(x205)))+(((x203)*(x204)))))))+(((0.0450000000000000)*(cj3)*(py)*(sj2)))+(((-1.00000000000000)*(x208)*(x210)))+(((-0.300000000000000)*(py)*(sj2)*(sj3))));
evalcond[1]=((((0.0450000000000000)*(cj3)*(px)*(sj2)))+(((-0.300000000000000)*(px)*(sj2)*(sj3)))+(((x210)*(((((-1.00000000000000)*(x205)*(x211)))+(((-1.00000000000000)*(x203)*(x211)))))))+(((-0.0450000000000000)*(px)*(sj2)))+(((x208)*(x209))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((((-0.300000000000000)*(cj3)*(py)*(sj0)))+(((0.0450000000000000)*(cj2)*(cj3)*(pz)))+(((-0.300000000000000)*(cj2)*(pz)*(sj3)))+(((-0.300000000000000)*(cj0)*(cj3)*(px)))+(((-0.0450000000000000)*(cj2)*(pz)))+(((-0.0450000000000000)*(cj0)*(px)*(sj3)))+(((-0.550000000000000)*(cj0)*(px)))+(((-0.550000000000000)*(py)*(sj0)))+(((-0.0450000000000000)*(py)*(sj0)*(sj3)))));
dummyeval[0]=((((-1.00000000000000)*(py)*(sj0)*(sj3)))+(((-6.66666666666667)*(cj0)*(cj3)*(px)))+(((-12.2222222222222)*(py)*(sj0)))+(((-6.66666666666667)*(cj2)*(pz)*(sj3)))+(((-1.00000000000000)*(cj2)*(pz)))+(((-1.00000000000000)*(cj0)*(px)*(sj3)))+(((cj2)*(cj3)*(pz)))+(((-6.66666666666667)*(cj3)*(py)*(sj0)))+(((-12.2222222222222)*(cj0)*(px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x212=(cj3)*(cj3);
IkReal x213=(sj3)*(sj3);
if( IKabs(((-1.00000000000000)*(gconst5)*(((0.302500000000000)+(((0.0495000000000000)*(sj3)))+(((-1.00000000000000)*((pz)*(pz))))+(((0.330000000000000)*(cj3)))+(((0.0270000000000000)*(cj3)*(sj3)))+(((0.0900000000000000)*(x212)))+(((0.00202500000000000)*(x213))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((((-1.00000000000000)*(cj0)*(px)*(pz)))+(((0.0112500000000000)*(cj2)*(cj3)))+(((-0.0135000000000000)*(cj2)*(x213)))+(((0.0135000000000000)*(cj2)*(x212)))+(((-0.0247500000000000)*(cj2)))+(((-1.00000000000000)*(py)*(pz)*(sj0)))+(((-0.167025000000000)*(cj2)*(sj3)))+(((-0.0879750000000000)*(cj2)*(cj3)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((-1.00000000000000)*(gconst5)*(((0.302500000000000)+(((0.0495000000000000)*(sj3)))+(((-1.00000000000000)*((pz)*(pz))))+(((0.330000000000000)*(cj3)))+(((0.0270000000000000)*(cj3)*(sj3)))+(((0.0900000000000000)*(x212)))+(((0.00202500000000000)*(x213)))))), ((gconst5)*(((((-1.00000000000000)*(cj0)*(px)*(pz)))+(((0.0112500000000000)*(cj2)*(cj3)))+(((-0.0135000000000000)*(cj2)*(x213)))+(((0.0135000000000000)*(cj2)*(x212)))+(((-0.0247500000000000)*(cj2)))+(((-1.00000000000000)*(py)*(pz)*(sj0)))+(((-0.167025000000000)*(cj2)*(sj3)))+(((-0.0879750000000000)*(cj2)*(cj3)*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x214=IKsin(j1);
IkReal x215=IKcos(j1);
evalcond[0]=((-0.550000000000000)+(((-0.0450000000000000)*(sj3)))+(((cj0)*(px)*(x214)))+(((-0.300000000000000)*(cj3)))+(((pz)*(x215)))+(((py)*(sj0)*(x214))));
evalcond[1]=((((py)*(sj0)*(sj2)*(x215)))+(((-1.00000000000000)*(cj0)*(cj2)*(py)))+(((-1.00000000000000)*(pz)*(sj2)*(x214)))+(((cj0)*(px)*(sj2)*(x215)))+(((cj2)*(px)*(sj0))));
evalcond[2]=((((-0.0450000000000000)*(sj3)*(x215)))+(((-0.0450000000000000)*(cj2)*(cj3)*(x214)))+(((0.0450000000000000)*(cj2)*(x214)))+(pz)+(((-0.300000000000000)*(cj3)*(x215)))+(((0.300000000000000)*(cj2)*(sj3)*(x214)))+(((-0.550000000000000)*(x215))));
evalcond[3]=((0.0450000000000000)+(((-1.00000000000000)*(cj2)*(py)*(sj0)*(x215)))+(((-0.0450000000000000)*(cj3)))+(((px)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj0)*(py)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(px)*(x215)))+(((cj2)*(pz)*(x214)))+(((0.300000000000000)*(sj3))));
evalcond[4]=((((-0.0450000000000000)*(cj2)*(cj3)*(x215)))+(((0.0450000000000000)*(cj2)*(x215)))+(((-1.00000000000000)*(py)*(sj0)))+(((0.550000000000000)*(x214)))+(((0.0450000000000000)*(sj3)*(x214)))+(((-1.00000000000000)*(cj0)*(px)))+(((0.300000000000000)*(cj3)*(x214)))+(((0.300000000000000)*(cj2)*(sj3)*(x215))));
evalcond[5]=((-0.212500000000000)+(((0.0900000000000000)*(cj0)*(cj2)*(px)*(x215)))+(((0.0900000000000000)*(cj0)*(py)*(sj2)))+(((1.10000000000000)*(py)*(sj0)*(x214)))+(((-0.0900000000000000)*(cj2)*(pz)*(x214)))+(((1.10000000000000)*(cj0)*(px)*(x214)))+(((-0.0900000000000000)*(px)*(sj0)*(sj2)))+(((0.0900000000000000)*(cj2)*(py)*(sj0)*(x215)))+(((1.10000000000000)*(pz)*(x215)))+(((-1.00000000000000)*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x216=(px)*(px);
IkReal x217=(py)*(py);
IkReal x218=((x216)+(x217));
if( (x218) < (IkReal)-0.00001 )
    continue;
IkReal x219=IKsqrt(x218);
IkReal x220=IKabs(x219);
IkReal x221=((IKabs(x220) != 0)?((IkReal)1/(x220)):(IkReal)1.0e30);
IkReal x222=((0.0450000000000000)*(sj2));
IkReal x223=((0.300000000000000)*(sj2)*(sj3));
IkReal x224=((x223)+(x222));
IkReal x225=((1.00000000000000)*(cj3)*(x222));
IkReal x226=((x224)+(((-1.00000000000000)*(x225))));
IkReal x227=((x221)*(x226));
if( (x227) < -1-IKFAST_SINCOS_THRESH || (x227) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x228=IKasin(x227);
IkReal x229=((-1.00000000000000)*(py));
if( IKabs(x229) < IKFAST_ATAN2_MAGTHRESH && IKabs(px) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x230=IKatan2(x229, px);
j0array[0]=((((-1.00000000000000)*(x230)))+(((-1.00000000000000)*(x228))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x230)))+(x228));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((((-0.300000000000000)*(cj3)*(py)*(sj0)))+(((0.0450000000000000)*(cj2)*(cj3)*(pz)))+(((-0.300000000000000)*(cj2)*(pz)*(sj3)))+(((-0.300000000000000)*(cj0)*(cj3)*(px)))+(((-0.0450000000000000)*(cj2)*(pz)))+(((-0.0450000000000000)*(cj0)*(px)*(sj3)))+(((-0.550000000000000)*(cj0)*(px)))+(((-0.550000000000000)*(py)*(sj0)))+(((-0.0450000000000000)*(py)*(sj0)*(sj3)))));
dummyeval[0]=((((-1.00000000000000)*(py)*(sj0)*(sj3)))+(((-6.66666666666667)*(cj0)*(cj3)*(px)))+(((-12.2222222222222)*(py)*(sj0)))+(((-6.66666666666667)*(cj2)*(pz)*(sj3)))+(((-1.00000000000000)*(cj2)*(pz)))+(((-1.00000000000000)*(cj0)*(px)*(sj3)))+(((cj2)*(cj3)*(pz)))+(((-6.66666666666667)*(cj3)*(py)*(sj0)))+(((-12.2222222222222)*(cj0)*(px))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x231=(cj3)*(cj3);
IkReal x232=(sj3)*(sj3);
if( IKabs(((-1.00000000000000)*(gconst5)*(((0.302500000000000)+(((0.0900000000000000)*(x231)))+(((0.0495000000000000)*(sj3)))+(((0.00202500000000000)*(x232)))+(((-1.00000000000000)*((pz)*(pz))))+(((0.330000000000000)*(cj3)))+(((0.0270000000000000)*(cj3)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((((-1.00000000000000)*(cj0)*(px)*(pz)))+(((0.0112500000000000)*(cj2)*(cj3)))+(((0.0135000000000000)*(cj2)*(x231)))+(((-0.0135000000000000)*(cj2)*(x232)))+(((-0.0247500000000000)*(cj2)))+(((-1.00000000000000)*(py)*(pz)*(sj0)))+(((-0.167025000000000)*(cj2)*(sj3)))+(((-0.0879750000000000)*(cj2)*(cj3)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((-1.00000000000000)*(gconst5)*(((0.302500000000000)+(((0.0900000000000000)*(x231)))+(((0.0495000000000000)*(sj3)))+(((0.00202500000000000)*(x232)))+(((-1.00000000000000)*((pz)*(pz))))+(((0.330000000000000)*(cj3)))+(((0.0270000000000000)*(cj3)*(sj3)))))), ((gconst5)*(((((-1.00000000000000)*(cj0)*(px)*(pz)))+(((0.0112500000000000)*(cj2)*(cj3)))+(((0.0135000000000000)*(cj2)*(x231)))+(((-0.0135000000000000)*(cj2)*(x232)))+(((-0.0247500000000000)*(cj2)))+(((-1.00000000000000)*(py)*(pz)*(sj0)))+(((-0.167025000000000)*(cj2)*(sj3)))+(((-0.0879750000000000)*(cj2)*(cj3)*(sj3)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x233=IKsin(j1);
IkReal x234=IKcos(j1);
evalcond[0]=((-0.550000000000000)+(((-0.0450000000000000)*(sj3)))+(((-0.300000000000000)*(cj3)))+(((py)*(sj0)*(x233)))+(((pz)*(x234)))+(((cj0)*(px)*(x233))));
evalcond[1]=((((cj0)*(px)*(sj2)*(x234)))+(((-1.00000000000000)*(cj0)*(cj2)*(py)))+(((-1.00000000000000)*(pz)*(sj2)*(x233)))+(((py)*(sj0)*(sj2)*(x234)))+(((cj2)*(px)*(sj0))));
evalcond[2]=((((0.300000000000000)*(cj2)*(sj3)*(x233)))+(((-0.300000000000000)*(cj3)*(x234)))+(((-0.550000000000000)*(x234)))+(pz)+(((-0.0450000000000000)*(sj3)*(x234)))+(((0.0450000000000000)*(cj2)*(x233)))+(((-0.0450000000000000)*(cj2)*(cj3)*(x233))));
evalcond[3]=((0.0450000000000000)+(((-0.0450000000000000)*(cj3)))+(((-1.00000000000000)*(cj2)*(py)*(sj0)*(x234)))+(((px)*(sj0)*(sj2)))+(((cj2)*(pz)*(x233)))+(((-1.00000000000000)*(cj0)*(py)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(px)*(x234)))+(((0.300000000000000)*(sj3))));
evalcond[4]=((((0.300000000000000)*(cj2)*(sj3)*(x234)))+(((-1.00000000000000)*(py)*(sj0)))+(((0.300000000000000)*(cj3)*(x233)))+(((-1.00000000000000)*(cj0)*(px)))+(((0.0450000000000000)*(cj2)*(x234)))+(((-0.0450000000000000)*(cj2)*(cj3)*(x234)))+(((0.550000000000000)*(x233)))+(((0.0450000000000000)*(sj3)*(x233))));
evalcond[5]=((-0.212500000000000)+(((1.10000000000000)*(cj0)*(px)*(x233)))+(((-0.0900000000000000)*(cj2)*(pz)*(x233)))+(((1.10000000000000)*(py)*(sj0)*(x233)))+(((0.0900000000000000)*(cj0)*(py)*(sj2)))+(((0.0900000000000000)*(cj0)*(cj2)*(px)*(x234)))+(((1.10000000000000)*(pz)*(x234)))+(((-0.0900000000000000)*(px)*(sj0)*(sj2)))+(((0.0900000000000000)*(cj2)*(py)*(sj0)*(x234)))+(((-1.00000000000000)*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x110=((cj1)*(cj2)*(cj3));
IkReal x111=((sj1)*(sj3));
IkReal x112=((((-1.00000000000000)*(x111)))+(x110));
IkReal x113=((-1.00000000000000)*(cj3)*(sj0)*(sj2));
IkReal x114=((cj0)*(x112));
IkReal x115=((x113)+(x114));
IkReal x116=((cj1)*(sj3));
IkReal x117=((cj2)*(cj3)*(sj1));
IkReal x118=((x117)+(x116));
IkReal x119=((-1.00000000000000)*(x118));
IkReal x120=((cj0)*(cj3)*(sj2));
IkReal x121=((sj0)*(x112));
IkReal x122=((x120)+(x121));
IkReal x123=((cj0)*(cj2));
IkReal x124=((cj1)*(sj0)*(sj2));
IkReal x125=((((-1.00000000000000)*(x124)))+(x123));
IkReal x126=((cj2)*(sj0));
IkReal x127=((cj0)*(cj1)*(sj2));
IkReal x128=((x126)+(x127));
IkReal x129=((-1.00000000000000)*(x128));
IkReal x130=((cj2)*(x116));
IkReal x131=((cj3)*(sj1));
IkReal x132=((x131)+(x130));
IkReal x133=((cj1)*(cj3));
IkReal x134=((cj2)*(x111));
IkReal x135=((x133)+(((-1.00000000000000)*(x134))));
IkReal x136=((sj0)*(x132));
IkReal x137=((cj0)*(sj2)*(sj3));
IkReal x138=((x137)+(x136));
IkReal x139=((cj0)*(x132));
IkReal x140=((sj0)*(sj2)*(sj3));
IkReal x141=((((-1.00000000000000)*(x140)))+(x139));
new_r00=((((r20)*(x119)))+(((r00)*(x115)))+(((r10)*(x122))));
new_r01=((((r21)*(x119)))+(((r01)*(x115)))+(((r11)*(x122))));
new_r02=((((r22)*(x119)))+(((r02)*(x115)))+(((r12)*(x122))));
new_r10=((((r00)*(x129)))+(((r20)*(sj1)*(sj2)))+(((r10)*(x125))));
new_r11=((((r01)*(x129)))+(((r21)*(sj1)*(sj2)))+(((r11)*(x125))));
new_r12=((((r02)*(x129)))+(((r12)*(x125)))+(((r22)*(sj1)*(sj2))));
new_r20=((((r00)*(x141)))+(((r20)*(x135)))+(((r10)*(x138))));
new_r21=((((r01)*(x141)))+(((r21)*(x135)))+(((r11)*(x138))));
new_r22=((((r22)*(x135)))+(((r12)*(x138)))+(((r02)*(x141))));
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
cj5array[0]=new_r22;
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j5)), 6.28318530717959)));
evalcond[1]=((-1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((-1.00000000000000)*(new_r20));
evalcond[5]=((-1.00000000000000)*(new_r21));
evalcond[6]=((1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x142=IKatan2(new_r02, new_r12);
j4array[0]=((-1.00000000000000)*(x142));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.00000000000000)*(x142))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((((new_r12)*(IKcos(j4))))+(((-1.00000000000000)*(new_r02)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj4)*(new_r00)))+(((new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4)))))+IKsqr(((((cj4)*(new_r00)))+(((new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x143=IKsin(j6);
IkReal x144=IKcos(j6);
evalcond[0]=((((-1.00000000000000)*(x143)))+(((cj4)*(new_r10)))+(((-1.00000000000000)*(new_r00)*(sj4))));
evalcond[1]=((((-1.00000000000000)*(x144)))+(((cj4)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj4))));
evalcond[2]=((((cj4)*(new_r01)))+(((new_r11)*(sj4)))+(x143));
evalcond[3]=((((-1.00000000000000)*(x144)))+(((cj4)*(new_r00)))+(((new_r10)*(sj4))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
IkReal x145=((1.00000000000000)+(new_r22));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j5)), 6.28318530717959)));
evalcond[1]=x145;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x145;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x146=IKatan2(new_r02, new_r12);
j4array[0]=((-1.00000000000000)*(x146));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.00000000000000)*(x146))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((((new_r12)*(IKcos(j4))))+(((-1.00000000000000)*(new_r02)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((cj4)*(new_r01)))+(((new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))))+IKsqr(((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x147=IKsin(j6);
IkReal x148=IKcos(j6);
evalcond[0]=((((-1.00000000000000)*(x147)))+(((cj4)*(new_r10)))+(((-1.00000000000000)*(new_r00)*(sj4))));
evalcond[1]=((((-1.00000000000000)*(x148)))+(((cj4)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj4))));
evalcond[2]=((((-1.00000000000000)*(x147)))+(((cj4)*(new_r01)))+(((new_r11)*(sj4))));
evalcond[3]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(x148));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst6)*(new_r12)*(sj5))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(new_r02)*(sj5))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst6)*(new_r12)*(sj5)), ((gconst6)*(new_r02)*(sj5)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x149=IKcos(j4);
IkReal x150=IKsin(j4);
evalcond[0]=((((new_r12)*(x149)))+(((-1.00000000000000)*(new_r02)*(x150))));
evalcond[1]=((((new_r12)*(x150)))+(((new_r02)*(x149)))+(((-1.00000000000000)*(sj5))));
evalcond[2]=((((cj5)*(new_r02)*(x149)))+(((-1.00000000000000)*(new_r22)*(sj5)))+(((cj5)*(new_r12)*(x150))));
evalcond[3]=((((-1.00000000000000)*(new_r00)*(sj5)*(x149)))+(((-1.00000000000000)*(new_r10)*(sj5)*(x150)))+(((-1.00000000000000)*(cj5)*(new_r20))));
evalcond[4]=((((-1.00000000000000)*(new_r01)*(sj5)*(x149)))+(((-1.00000000000000)*(new_r11)*(sj5)*(x150)))+(((-1.00000000000000)*(cj5)*(new_r21))));
evalcond[5]=((1.00000000000000)+(((-1.00000000000000)*(new_r02)*(sj5)*(x149)))+(((-1.00000000000000)*(new_r12)*(sj5)*(x150)))+(((-1.00000000000000)*(cj5)*(new_r22))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x151=((cj4)*(new_r12));
IkReal x152=((new_r02)*(sj4));
IkReal x153=((((-1.00000000000000)*(x152)))+(x151));
IkReal x154=((new_r12)*(sj4));
IkReal x155=((cj4)*(new_r02));
IkReal x156=((x155)+(x154));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j5)), 6.28318530717959)));
evalcond[1]=((-1.00000000000000)+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x153;
evalcond[5]=x153;
evalcond[6]=x156;
evalcond[7]=x156;
evalcond[8]=((-1.00000000000000)*(new_r20));
evalcond[9]=((-1.00000000000000)*(new_r21));
evalcond[10]=((1.00000000000000)+(((-1.00000000000000)*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj4)*(new_r00)))+(((new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4)))))+IKsqr(((((cj4)*(new_r00)))+(((new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.00000000000000)*(cj4)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x157=IKsin(j6);
IkReal x158=IKcos(j6);
evalcond[0]=((((-1.00000000000000)*(x157)))+(((cj4)*(new_r10)))+(((-1.00000000000000)*(new_r00)*(sj4))));
evalcond[1]=((((-1.00000000000000)*(x158)))+(((cj4)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj4))));
evalcond[2]=((((cj4)*(new_r01)))+(((new_r11)*(sj4)))+(x157));
evalcond[3]=((((-1.00000000000000)*(x158)))+(((cj4)*(new_r00)))+(((new_r10)*(sj4))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x159=((cj4)*(new_r12));
IkReal x160=((new_r02)*(sj4));
IkReal x161=((((-1.00000000000000)*(x160)))+(x159));
IkReal x162=((new_r12)*(sj4));
IkReal x163=((cj4)*(new_r02));
IkReal x164=((x162)+(x163));
IkReal x165=((1.00000000000000)+(new_r22));
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j5)), 6.28318530717959)));
evalcond[1]=x165;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x161;
evalcond[5]=x161;
evalcond[6]=x164;
evalcond[7]=((-1.00000000000000)*(x164));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x165;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((cj4)*(new_r01)))+(((new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))))+IKsqr(((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((-1.00000000000000)*(new_r10)*(sj4)))+(((-1.00000000000000)*(cj4)*(new_r00)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x166=IKsin(j6);
IkReal x167=IKcos(j6);
evalcond[0]=((((-1.00000000000000)*(x166)))+(((cj4)*(new_r10)))+(((-1.00000000000000)*(new_r00)*(sj4))));
evalcond[1]=((((-1.00000000000000)*(x167)))+(((cj4)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj4))));
evalcond[2]=((((-1.00000000000000)*(x166)))+(((cj4)*(new_r01)))+(((new_r11)*(sj4))));
evalcond[3]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(x167));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((gconst8)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.00000000000000)*(gconst8)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst8)*(new_r21)), ((-1.00000000000000)*(gconst8)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x168=IKsin(j6);
IkReal x169=IKcos(j6);
evalcond[0]=((new_r20)+(((sj5)*(x169))));
evalcond[1]=((((-1.00000000000000)*(sj5)*(x168)))+(new_r21));
evalcond[2]=((((-1.00000000000000)*(x168)))+(((cj4)*(new_r10)))+(((-1.00000000000000)*(new_r00)*(sj4))));
evalcond[3]=((((-1.00000000000000)*(x169)))+(((cj4)*(new_r11)))+(((-1.00000000000000)*(new_r01)*(sj4))));
evalcond[4]=((((cj4)*(new_r01)))+(((cj5)*(x168)))+(((new_r11)*(sj4))));
evalcond[5]=((((-1.00000000000000)*(cj5)*(x169)))+(((cj4)*(new_r00)))+(((new_r10)*(sj4))));
evalcond[6]=((((-1.00000000000000)*(new_r21)*(sj5)))+(x168)+(((cj4)*(cj5)*(new_r01)))+(((cj5)*(new_r11)*(sj4))));
evalcond[7]=((((-1.00000000000000)*(x169)))+(((cj4)*(cj5)*(new_r00)))+(((cj5)*(new_r10)*(sj4)))+(((-1.00000000000000)*(new_r20)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((gconst7)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.00000000000000)*(gconst7)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst7)*(new_r21)), ((-1.00000000000000)*(gconst7)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=((new_r20)+(((sj5)*(IKcos(j6)))));
evalcond[1]=((new_r21)+(((-1.00000000000000)*(sj5)*(IKsin(j6)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst9;
gconst9=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst9)*(new_r12)*(sj5))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst9)*(new_r02)*(sj5))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst9)*(new_r12)*(sj5)), ((gconst9)*(new_r02)*(sj5)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[12];
IkReal x170=IKcos(j4);
IkReal x171=IKsin(j4);
evalcond[0]=((((new_r12)*(x170)))+(((-1.00000000000000)*(new_r02)*(x171))));
evalcond[1]=((((new_r02)*(x170)))+(((new_r12)*(x171)))+(((-1.00000000000000)*(sj5))));
evalcond[2]=((((new_r10)*(x170)))+(((-1.00000000000000)*(sj6)))+(((-1.00000000000000)*(new_r00)*(x171))));
evalcond[3]=((((new_r11)*(x170)))+(((-1.00000000000000)*(cj6)))+(((-1.00000000000000)*(new_r01)*(x171))));
evalcond[4]=((((new_r01)*(x170)))+(((new_r11)*(x171)))+(((cj5)*(sj6))));
evalcond[5]=((((new_r00)*(x170)))+(((new_r10)*(x171)))+(((-1.00000000000000)*(cj5)*(cj6))));
evalcond[6]=((((-1.00000000000000)*(new_r22)*(sj5)))+(((cj5)*(new_r12)*(x171)))+(((cj5)*(new_r02)*(x170))));
evalcond[7]=((((-1.00000000000000)*(new_r00)*(sj5)*(x170)))+(((-1.00000000000000)*(new_r10)*(sj5)*(x171)))+(((-1.00000000000000)*(cj5)*(new_r20))));
evalcond[8]=((((-1.00000000000000)*(new_r01)*(sj5)*(x170)))+(((-1.00000000000000)*(new_r11)*(sj5)*(x171)))+(((-1.00000000000000)*(cj5)*(new_r21))));
evalcond[9]=((((cj5)*(new_r01)*(x170)))+(((-1.00000000000000)*(new_r21)*(sj5)))+(sj6)+(((cj5)*(new_r11)*(x171))));
evalcond[10]=((1.00000000000000)+(((-1.00000000000000)*(new_r02)*(sj5)*(x170)))+(((-1.00000000000000)*(new_r12)*(sj5)*(x171)))+(((-1.00000000000000)*(cj5)*(new_r22))));
evalcond[11]=((((-1.00000000000000)*(cj6)))+(((cj5)*(new_r10)*(x171)))+(((cj5)*(new_r00)*(x170)))+(((-1.00000000000000)*(new_r20)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "c9e5215735aecb79c5312f66d75d8bff"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
